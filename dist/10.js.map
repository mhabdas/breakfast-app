{"version":3,"sources":["webpack:///./src/components/Button/Button.jsx","webpack:///./src/containers/MapContainer/MapContainer.jsx"],"names":["_styledComponents","__webpack_require__","StyledButton","styled","button","_templateObject","colors","dark","light","accent","props","isLarge","css","_templateObject2","ButtonList","div","_templateObject3","_react","_Button","Button","React","lazy","e","then","t","bind","Map","Promise","all","Modal","MainSection","initialState","country","visible","breakfastName","description","img","attr","alt","info","initialZoom","center","zoom","MapContainer","state","data","continents","name","coordinates","handleToggle","_this","setState","handleZoom","cont","target","getAttribute","handleReset","_extends","handleClick","geography","countryName","properties","NAME","getBreakfastData","handleClose","handleRandom","Math","floor","random","length","Component","_this2","this","fetch","resp","json","breakfast","catch","err","_this3","forEach","element","_this4","_state","_react2","default","createElement","Suspense","fallback","_Spinner2","show","close","geoUrl","map","i","key","action","dataAttr","title"],"mappings":"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","file":"10.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport colors from '../../styles/globals';\n\nconst StyledButton = styled.button`\n  border: 2px solid ${colors.dark};\n  background-color: ${colors.light};\n  padding: 0.5rem;\n  margin: 0.25rem;\n  color: ${colors.dark};\n  font-weight: 700;\n  cursor: pointer;\n  border-radius: 2px;\n  transition: background-color 1s;\n\n  a {\n    color: ${colors.accent};\n    text-decoration: none;\n    width: 100%;\n    height: 100%;\n    &:hover {\n      color: white;\n    }\n  }\n\n  &:hover {\n    background-color: ${colors.accent};\n    color: white;\n    a {\n      color: white;\n    }\n  }\n\n  ${props => props.isLarge\n    && css`\n      background-color: transparent;\n      border-color: ${colors.light};\n      color: ${colors.light};\n      font-size: 1rem;\n      height: 3rem;\n    `}\n`;\n\nconst ButtonList = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding-bottom: 1rem;\n`;\n\nexport { StyledButton, ButtonList };\n","import React, { Component, Suspense } from \"react\";\n\nconst Button = React.lazy(() => import(\"../../components/Button\"));\nconst Map = React.lazy(() => import(\"../../components/Map\"));\nconst Modal = React.lazy(() => import(\"../../components/Modal\"));\nconst MainSection = React.lazy(() => import(\"../../components/MainSection\"));\nimport {ButtonList} from \"../../components/Button/Button\";\nimport Spinner from \"../../components/Spinner\";\n\nconst initialState = {\n  country: \"\",\n  visible: false,\n  breakfastName: \"\",\n  description: \"\",\n  img: \"\",\n  attr: \"\",\n  alt: \"\",\n  info:\n    \"Sorry. This content is not yet available. Try a different or random country.\"\n};\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-50m.json\";\nconst apiUrl =\n  \"https://codekingdom.pl/projects/coderslab-workshops/international-breakfast/\";\n\nconst initialZoom = {\n  center: [0, 20],\n  zoom: 1\n};\n\nclass MapContainer extends Component {\n  state = {\n    data: null,\n    ...initialZoom,\n    ...initialState,\n    continents: [\n      { name: \"Asia\", coordinates: [103.8198, 15.3521] },\n      { name: \"Africa\", coordinates: [3.3792, 6.5244] },\n      { name: \"Australia\", coordinates: [151.2093, -33.8688] },\n      { name: \"Europe\", coordinates: [8.5417, 52.3769] },\n      { name: \"North America\", coordinates: [-122.4194, 37.7749] },\n      { name: \"South America\", coordinates: [-58.3816, -18.6037] }\n    ]\n  };\n\n  componentDidMount() {\n    fetch(apiUrl)\n      .then(resp => resp.json())\n      .then(data => this.setState({ data: data.breakfast }))\n      .catch(err => err);\n  }\n\n  getBreakfastData(resp) {\n    const { country } = this.state;\n    resp.forEach(element => {\n      if (element.name === country) {\n        this.setState({\n          breakfastName: element.breakfastName,\n          description: element.description,\n          img: element.img,\n          attr: element.attr,\n          info: \"\"\n        });\n      }\n    });\n  }\n\n  handleToggle = () => {\n    const { visible } = this.state;\n    this.setState({\n      visible: !visible\n    });\n  };\n\n  handleZoom = e => {\n    const { continents } = this.state;\n    const contId = e.target.getAttribute(\"data-attr\");\n    const cont = continents[contId];\n    if (cont.name === \"Europe\") {\n      this.setState({\n        center: cont.coordinates,\n        zoom: 3.5\n      });\n    } else {\n      this.setState({\n        center: cont.coordinates,\n        zoom: 2\n      });\n    }\n  };\n\n  handleReset = () => {\n    this.setState({\n      ...initialZoom\n    });\n  };\n\n  handleClick = geography => {\n    const { data } = this.state;\n    const countryName = geography.properties.NAME;\n    this.setState(\n      {\n        country: countryName\n      },\n      () => {\n        this.getBreakfastData(data);\n        this.handleToggle();\n      }\n    );\n  };\n\n  handleClose = () => {\n    this.handleToggle();\n    this.setState({\n      ...initialState\n    });\n  };\n\n  handleRandom = () => {\n    const { data } = this.state;\n    const random = data[Math.floor(Math.random() * data.length)];\n    const countryName = random.name;\n    this.setState(\n      {\n        country: countryName\n      },\n      () => {\n        this.getBreakfastData(data);\n        this.handleToggle();\n      }\n    );\n  };\n\n  render() {\n    const {\n      country,\n      breakfastName,\n      description,\n      img,\n      attr,\n      info,\n      alt,\n      center,\n      zoom,\n      continents,\n      visible,\n      data\n    } = this.state;\n    return (\n      <MainSection>\n        <Suspense fallback={<Spinner />}>\n        <Modal\n          show={visible}\n          close={() => this.handleClose()}\n          country={country}\n          breakfastName={breakfastName}\n          description={description}\n          img={img}\n          attr={attr}\n          info={info}\n          alt={alt}\n        />\n        </Suspense>\n        <Map\n          data={data}\n          center={center}\n          geoUrl={geoUrl}\n          zoom={zoom}\n          handleClick={this.handleClick}\n        />\n        <ButtonList>\n          {continents.map((cont, i) => (\n            <Button\n              key={cont.name}\n              action={this.handleZoom}\n              dataAttr={i}\n              title={cont.name}\n            />\n          ))}\n          <Button action={this.handleReset} title=\"Reset\" />\n          <Button action={this.handleRandom} title=\"Random\" />\n        </ButtonList>\n      </MainSection>\n    );\n  }\n}\n\nexport default MapContainer;\n"],"sourceRoot":""}