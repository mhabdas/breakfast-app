{"version":3,"sources":["webpack:///./node_modules/d3-geo-projection/src/math.js","webpack:///./node_modules/d3-geo-projection/src/airy.js","webpack:///./node_modules/d3-geo-projection/src/aitoff.js","webpack:///./node_modules/d3-geo-projection/src/armadillo.js","webpack:///./node_modules/d3-geo-projection/src/august.js","webpack:///./node_modules/d3-geo-projection/src/baker.js","webpack:///./node_modules/d3-geo-projection/src/berghaus.js","webpack:///./node_modules/d3-geo-projection/src/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/boggs.js","webpack:///./node_modules/d3-geo-projection/src/parallel1.js","webpack:///./node_modules/d3-geo-projection/src/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/bonne.js","webpack:///./node_modules/d3-geo-projection/src/bottomley.js","webpack:///./node_modules/d3-geo-projection/src/bromley.js","webpack:///./node_modules/d3-geo-projection/src/chamberlin.js","webpack:///./node_modules/d3-geo-projection/src/collignon.js","webpack:///./node_modules/d3-geo-projection/src/craig.js","webpack:///./node_modules/d3-geo-projection/src/craster.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack:///./node_modules/d3-geo-projection/src/eckert1.js","webpack:///./node_modules/d3-geo-projection/src/eckert2.js","webpack:///./node_modules/d3-geo-projection/src/eckert3.js","webpack:///./node_modules/d3-geo-projection/src/eckert4.js","webpack:///./node_modules/d3-geo-projection/src/eckert5.js","webpack:///./node_modules/d3-geo-projection/src/eckert6.js","webpack:///./node_modules/d3-geo-projection/src/eisenlohr.js","webpack:///./node_modules/d3-geo-projection/src/fahey.js","webpack:///./node_modules/d3-geo-projection/src/foucaut.js","webpack:///./node_modules/d3-geo-projection/src/gilbert.js","webpack:///./node_modules/d3-geo-projection/src/gingery.js","webpack:///./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg4.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg5.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg6.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg8.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg9.js","webpack:///./node_modules/d3-geo-projection/src/square.js","webpack:///./node_modules/d3-geo-projection/src/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/elliptic.js","webpack:///./node_modules/d3-geo-projection/src/guyou.js","webpack:///./node_modules/d3-geo-projection/src/hammer.js","webpack:///./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack:///./node_modules/d3-geo-projection/src/healpix.js","webpack:///./node_modules/d3-geo-projection/src/hill.js","webpack:///./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/index.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack:///./node_modules/d3-geo-projection/src/lagrange.js","webpack:///./node_modules/d3-geo-projection/src/larrivee.js","webpack:///./node_modules/d3-geo-projection/src/laskowski.js","webpack:///./node_modules/d3-geo-projection/src/littrow.js","webpack:///./node_modules/d3-geo-projection/src/loximuthal.js","webpack:///./node_modules/d3-geo-projection/src/miller.js","webpack:///./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/naturalEarth.js","webpack:///./node_modules/d3-geo-projection/src/nellHammer.js","webpack:///./node_modules/d3-geo-projection/src/patterson.js","webpack:///./node_modules/d3-geo-projection/src/polyconic.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack:///./node_modules/d3-geo-projection/src/noop.js","webpack:///./node_modules/d3-geo-projection/src/project/index.js","webpack:///./node_modules/d3-geo-projection/src/project/clockwise.js","webpack:///./node_modules/d3-geo-projection/src/project/contains.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack:///./node_modules/d3-geo-projection/src/quantize.js","webpack:///./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/robinson.js","webpack:///./node_modules/d3-geo-projection/src/satellite.js","webpack:///./node_modules/d3-geo-projection/src/stitch.js","webpack:///./node_modules/d3-geo-projection/src/times.js","webpack:///./node_modules/d3-geo-projection/src/twoPoint.js","webpack:///./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack:///./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack:///./node_modules/d3-geo-projection/src/wagner4.js","webpack:///./node_modules/d3-geo-projection/src/wagner6.js","webpack:///./node_modules/d3-geo-projection/src/wagner7.js","webpack:///./node_modules/d3-geo-projection/src/wiechel.js","webpack:///./node_modules/d3-geo-projection/src/winkel3.js","webpack:///./node_modules/d3-geo-projection/index.js","webpack:///./node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson-client/src/bbox.js","webpack:///./node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson-client/src/stitch.js","webpack:///./node_modules/topojson-client/src/mesh.js","webpack:///./node_modules/topojson-client/src/merge.js","webpack:///./node_modules/topojson-client/src/bisect.js","webpack:///./node_modules/topojson-client/src/neighbors.js","webpack:///./node_modules/topojson-client/src/quantize.js","webpack:///./node_modules/topojson-client/src/untransform.js","webpack:///./node_modules/topojson-client/index.js","webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/polygon.js","webpack:///./node_modules/d3-geo/src/clip/extent.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/distance.js","webpack:///./node_modules/d3-geo/src/contains.js","webpack:///./node_modules/d3-geo/src/graticule.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/albersUsa.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/conicConformal.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/identity.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-geo/index.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/cross.js","webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-array/src/threshold/sturges.js","webpack:///./node_modules/d3-array/src/merge.js","webpack:///./node_modules/d3-array/src/index.js","webpack:///./node_modules/react-simple-maps/lib/utils.js","webpack:///./node_modules/react-simple-maps/lib/projectionConfig.js","webpack:///./node_modules/react-simple-maps/lib/index.js","webpack:///./node_modules/react-simple-maps/lib/ComposableMap.js","webpack:///./node_modules/react-simple-maps/lib/projections.js","webpack:///./node_modules/react-simple-maps/lib/ZoomableGroup.js","webpack:///./node_modules/react-simple-maps/lib/Geographies.js","webpack:///./node_modules/react-simple-maps/lib/Geography.js","webpack:///./node_modules/react-simple-maps/lib/Marker.js","webpack:///./node_modules/react-simple-maps/lib/Markers.js","webpack:///./node_modules/react-simple-maps/lib/Annotation.js","webpack:///./node_modules/react-simple-maps/lib/Graticule.js"],"names":["abs","Math","atan","atan2","cos","ceil","exp","floor","log","max","min","pow","round","sign","x","sin","tan","math_epsilon","epsilon2","pi","PI","halfPi","quarterPi","sqrt1_2","SQRT1_2","sqrt2","sqrt","sqrtPi","tau","degrees","radians","asin","acos","sinh","cosh","airyRaw","beta","tanBeta_2","b","forward","y","cosx","cosy","siny","cosz","k","invert","delta","r","z","i","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","airy","m","Object","d3_geo","p","radius","_","arguments","length","scale","clipAngle","aitoffRaw","sincia","sinci","x1","y1","f","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","c","e","fx","fy","dxdx","dxdy","dydx","dydy","dx","dy","aitoff","armadilloRaw","phi0","sinPhi0","cosPhi0","sPhi0","tanPhi0","lambda","phi","cosPhi","cosLambda","sinLambda","sinPhi","A","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dLambda","dPhi","armadillo","stream_","stream","parallel","rotate","rotateStream","sphereStream","sphere","polygonStart","lineStart","point","lineEnd","polygonEnd","center","augustRaw","tanPhi","x2","y2","s","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","d","august","sqrt8","baker_phi0","bakerRaw","y0","cosPhi_2","tanPhi_2","baker","berghausRaw","lobes","theta","theta0","α","cotα","berghaus","projectionStream","cr","sr","delta0","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","cx","cy","mollweideRaw","mollweide","boggs_k","boggs_w","boggsRaw","ky","boggs","parallel1","projectAt","sinusoidalRaw","sinusoidal","bonneRaw","cotPhi0","rho","bonne","bottomleyRaw","sinPsi","bottomley","fraction","bromleyRaw","bromley","chamberlin_distance","c1","s1","c2","s2","cosdLambda","sindPhi","sindLambda","angle","a","longitude","chamberlinRaw","p0","p1","p2","points","v","beta0","beta1","beta2","mean","Array","slice","j","pointRadians","chamberlinAfrica","chamberlin","type","coordinates","R","collignonRaw","alpha","collignon","craigRaw","cosλ","craig","sqrt3","crasterRaw","craster","cylindricalEqualAreaRaw","cylindricalEqualArea","cylindricalStereographicRaw","cylindricalStereographic","eckert1Raw","eckert1","eckert2Raw","eckert2","eckert3Raw","eckert3","eckert4Raw","Infinity","eckert4","eckert5Raw","eckert5","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","c0","t","_0","_1","cos1","t2","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","deltaLambda","deltaPhi","eisenlohr","faheyK","faheyRaw","fahey","foucautRaw","cosk","foucaut","gilbertForward","gilbertInvert","src_gilbert","projectionType","projection","equirectangular","precision","translate","gilbert","property","name","gingeryRaw","n","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","y_","h","gingery","cRho","sRho","ginzburgPolyconic","g","phi2","xB","yB","q","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg4","ginzburg5Raw","ginzburg5","ginzburg6Raw","ginzburg6","ginzburg8Raw","lambda2","lambda4","ginzburg8","ginzburg9Raw","ginzburg9","square","project","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","lambda1","x0","g2","zetaMug","f2","df","gringortenHexadecant","sx","sy","gringortenHexadecantInvert","gringorten","ellipticJ","u","ai","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","tn","guyouComplexDivide","guyou","hammerRaw","B","hammerQuarticAuthalicRaw","hammer","coefficient","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","hammerRetroazimuthal","rotate_","circle","call","ring","healpixParallel","healpixLambert","healpixRaw","H","dy1","w","healpix","step","src","map","concat","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","hill","ratio","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","sinuMollweide","homolosineRaw","homolosine","pointEqual","interpolateLine","resampled","push","interrupted","lobe","lambda0","phi1","interpolateSphere","bounds","l","bound","boggs_lobes","interrupted_boggs","homolosine_lobes","interrupted_homolosine","mollweide_lobes","interrupted_mollweide","mollweideHemispheres_lobes","mollweideHemispheres","sinuMollweide_lobes","interrupted_sinuMollweide","sinusoidal_lobes","interrupted_sinusoidal","kavrayskiy7Raw","kavrayskiy7","lagrangeRaw","lagrange","spacing","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","f0","f1","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","larrivee","laskowskiRaw","lambdaPhi","laskowski","littrowRaw","y2_1","littrow","loximuthalRaw","loximuthal","millerRaw","miller","modifiedStereographicRaw","zr","zi","ar","br","bi","deltar","deltai","sinc","alaska","gs48","gs50","modifiedStereographic_miller","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarParabolic","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarQuartic","mtFlatPolarSinusoidalRaw","mtFlatPolarSinusoidal","naturalEarthRaw","phi4","naturalEarth","nellHammerRaw","nellHammer","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","patterson","polyconicRaw","polyconic","matrix","subtract","matrix_angle","matrix_length","multiply","polyhedral","root","face","node","transform","recurse","parent","edges","faceEdges","shared","found","sharedEdge","polyhedral_pointEqual","children","forEach","child","hasInverse","faceInvert","faceDegrees","proj","outline","edge","multiPoint","notPoles","filter","inside","isArray","some","octahedron","polyhedral_octahedron","butterfly","faceProjection","faces","kx","collignonK","polyhedral_collignon","waterman","w5","xyz","waterman_cartesian","hexagon","spherical","cornerNormals","parents","normals","cosphi","dot","cartesian","noop","src_project","object","Error","projectFeature","projectFeatureCollection","projectGeometry","o","features","id","properties","geometry","geometries","projectGeometryCollection","sink","sinkPoint","sinkLine","sinkPolygon","result","project_points","lines","polygons","holes","area","clockwise","hole","polygon","contains","yi","pj","xj","yj","quincuncial","projectQuincuncial","quincuncial_gringorten","peirce","quantize","digits","quantizePoint","toFixed","quantizePoints","quantizePolygon","quantizeGeometry","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","rectangularPolyconic","robinson_K","robinsonRaw","i0","di","ax","ay","bx","by","yy","robinson","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","satellite","distance","tilt","epsilonInverse","stitch_x0","x0e","stitch_x1","x1e","stitch_y0","y0e","stitch_y1","y1e","normalizePoint","clampPoint","clampPoints","extractFragments","fragments","pointk","xk","yk","fragmentBefore","pop","stitchFeature","stitchGeometry","fragment","start","startFragment","end","endFragment","fragmentByStart","fragmentByEnd","index","stitchFragments","stitch","timesRaw","times","twoPoint","raw","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPointEquidistantRaw","z0","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","G","P2","P2_A2","G_P2","Q","x2_y2","c3","a1","m1","theta1","vanDerGrinten","vanDerGrinten2Raw","vanDerGrinten2","vanDerGrinten3Raw","vanDerGrinten3","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","vanDerGrinten4","wagner4_A","wagner4_B","wagner4Raw","wagner4","wagner6Raw","wagner6","wagner7Raw","t1","wagner7","wiechelRaw","sin1_Phi","wiechel","winkel3Raw","F","sinphi","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","winkel3","__webpack_require__","__webpack_exports__","identity","src_transform","topology","src_bbox","bbox","bboxPoint","bboxGeometry","arcs","arc","objects","reverse","array","feature","feature_feature","feature_object","transformPoint","line","stitchedArcs","emptyIndex","flush","dp","ends","fg","unshift","gf","mesh","meshArcs","apply","this","geom","geomsByArc","extract0","extract1","extract2","extract3","geoms","extractArcs","merge","mergeArcs","polygonsByArc","groups","extract","planarRingArea","group","neighbors","ki","bisect","lo","hi","mid","src_neighbors","indexesByArc","geometryType","LineString","MultiLineString","Polygon","MultiPolygon","indexes","ij","ik","splice","bb","untransform","adder","Adder","reset","prototype","constructor","add","temp","valueOf","bv","av","epsilon","math_sign","haversin","streamGeometry","streamGeometryType","hasOwnProperty","streamObjectType","Feature","FeatureCollection","Sphere","Point","MultiPoint","streamLine","streamPolygon","GeometryCollection","closed","coordinate","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","sdLambda","adLambda","src_area","cartesian_spherical","cartesian_cartesian","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","range","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","bounds_linePoint","normal","inflection","phii","lambdai","antimeridian","bounds_angle","rangeCompare","rangeContains","W0","W1","centroid_X0","centroid_Y0","Z0","centroid_X1","centroid_Y1","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","merged","deltaMax","sort","NaN","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","centroidRingPointFirst","centroidRingPoint","cz","centroid","constant","compose","rotationIdentity","rotateRadians","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","circleStream","direction","t0","cosRadius","sinRadius","circleRadius","src_circle","buffer","rejoin","shift","clip_line","Intersection","other","entry","clip_polygon","segments","compareIntersection","startInside","interpolate","subject","clip","segment","polygon_link","current","isSubject","clipMax","clipMin","extent_clipExtent","visible","from","to","corner","comparePoint","ca","cb","x__","y__","v__","x_","v_","first","clean","activeStream","bufferStream","clipStream","linePoint","winding","a0","b0","b1","polygonInside","cleanInside","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","extent","sum","polygonContains","point0","sinPhi1","cosPhi1","point1","absDelta","intersection","phiArc","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ab","ringRadians","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","src_path","contextStream","path","src_clip","pointVisible","clipLine","rotatedStart","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","ringSegments","validSegment","clip_antimeridian","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","clip_circle","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","n1xn2","uu","polar","q1","code","v0","v00","point2","methods","transformer","TransformStream","key","fitExtent","clipExtent","fitSize","size","maxDepth","cosMinDistance","resample","delta2","resampleLineTo","depth","d2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","projection_projection","projectionMutator","projectRotate","preclip","postclip","projectResample","projectTransform","recenter","conicProjection","parallels","conicEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","hawaii","pointStream","albersUsa","streams","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercatorRaw","mercator","mercatorProjection","reclip","tany","conicConformalRaw","conicConformal","equirectangularRaw","conicEquidistantRaw","gy","nx","conicEquidistant","gnomonicRaw","gnomonic","scaleTranslate","tx","ty","projection_identity","reflectX","reflectY","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","transverseMercator","ascending","compare","array_array","stop","arrays","defineProperty","exports","value","replaceStrokeWidth","styles","newStyles","keys","createChoroplethStyles","choroplethValue","calculateResizeFactor","actualDimension","baseDimension","calculateMousePosition","props","zoom","resizeFactor","undefined","width","height","reference","reverseRotation","item","isChildOfType","createNewChildren","_react2","default","cloneElement","roundPath","replace","createConnectorPath","connectorType","endPoint","createTextAnchor","obj","_react","__esModule","expectedType","componentIdentifier","xOffset","yOffset","_ComposableMap","enumerable","get","_interopRequireDefault","_ZoomableGroup","_Geographies","_Geography","_Marker","_Markers","_Annotation","_Graticule","_createClass","defineProperties","target","descriptor","configurable","writable","Constructor","protoProps","staticProps","_projections2","_projectionConfig2","ComposableMap","_Component","instance","TypeError","_classCallCheck","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","bind","subClass","superClass","create","setPrototypeOf","_inherits","Component","_props","projectionConfig","_props2","style","showCenter","createElement","viewBox","className","fill","defaultProps","config","projectionName","projectionReference","_d3GeoProjection","_d3Geo","_projectionConfig","geoMercator","geoMiller","geoTimes","geoRobinson","geoWinkel3","geoEckert4","_utils","ZoomableGroup","backdropX","backdrop","backdropY","backdropWidth","backdropHeight","state","mouseX","mouseY","mouseXStart","mouseYStart","isPressed","resizeFactorX","resizeFactorY","handleMouseMove","handleMouseUp","handleMouseDown","handleResize","_ref","pageX","pageY","disablePanning","setState","_ref2","nextProps","_state","zoomFactor","centerChanged","JSON","stringify","zoomableGroupNode","parentNode","getBoundingClientRect","xPercentageChange","yPercentageChange","_props3","window","addEventListener","removeEventListener","_this2","_props4","_state2","ref","onMouseMove","onMouseUp","onMouseDown","strokeWidth","_topojsonClient","Geographies","geographyPaths","fetchGeographies","geographyUrl","request","XMLHttpRequest","open","onload","status","parse","responseText","onGeographiesLoaded","onGeographyPathsLoaded","String","onerror","console","send","nextState","geoPathsChanged","choroplethChanged","choropleth","disableOptimization","_extends","assign","source","pathCache","Geography","hover","pressed","handleMouseEnter","handleMouseLeave","handleMouseClick","handleFocus","handleBlur","evt","persist","onClick","geography","onMouseEnter","onMouseLeave","_props5","_props6","_props7","onFocus","_props8","onBlur","_props9","cacheId","tabable","pathString","geoPath","renderPath","excludeProps","restProps","indexOf","reduce","tabIndex","Marker","marker","Markers","Annotation","stroke","connectorPath","textAnchor","computeGraticule","geoGraticule","computeOutline","Graticule","renderGraticule","graticulePath","outlinePath","pointerEvents"],"mappings":"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","file":"2.js","sourcesContent":["export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = tan(z_2),\n          lnsecz_2 = log(1 / cosz_2);\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          α = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(α)) - α;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotα = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotα + s * sqrt(cotα * cotα - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      p = projection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosλ = cos(x);\n    return [x, 2 * atan2(sqrt(cosλ * cosλ + tanPhi0 * tanPhi0 - y * y) - cosλ, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function(_) {\n      return arguments.length ? (projection[name](_), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport {pi} from \"./math\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\nimport {abs, floor, max, min, pi, radians, sqrtPi, tau} from \"./math\";\n\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphere(step) {\n  return {\n    type: \"Polygon\",\n    coordinates: [\n      range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })\n      .concat(range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))\n    ]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, radians} from \"../math\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes) {\n  var sphere = interpolateSphere(lobes);\n\n  lobes = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      return [\n        [l[0][0] * radians, l[0][1] * radians],\n        [l[1][0] * radians, l[1][1] * radians],\n        [l[2][0] * radians, l[2][1] * radians]\n      ];\n    });\n  });\n\n  var bounds = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      var x0 = project(l[0][0], l[0][1])[0],\n          x1 = project(l[2][0], l[2][1])[0],\n          y0 = project(l[1][0], l[0][1])[1],\n          y1 = project(l[1][0], l[1][1])[1],\n          t;\n      if (y0 > y1) t = y0, y0 = y1, y1 = t;\n      return [[x0, y0], [x1, y1]];\n    });\n  });\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  // Assumes mutually exclusive bounding boxes for lobes.\n  if (project.invert) forward.invert = function(x, y) {\n    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n    for (var i = 0, n = bound.length; i < n; ++i) {\n      var b = bound[i];\n      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n        p[0] += lobe[i][1][0];\n        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n      }\n    }\n  };\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((y2_1 - sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1500)\n      .center([-160.908, 62.4864])\n      .clipAngle(25);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function naturalEarthRaw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarthRaw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarthRaw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\nexport default function(root, face, r) {\n\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {transform: [\n    cos(r), sin(r), 0,\n    -sin(r), cos(r), 0\n  ]});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(101.858)\n      .center([0, 45]);\n}\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon\";\nimport {pi, sqrt} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","export default function() {}\n","import {geoStream} from \"d3-geo\";\nimport noop from \"../noop\";\nimport clockwise from \"./clockwise\";\nimport contains from \"./contains\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n","export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n","export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * (x0 + (y > 0 ? 1 : -1) * d),\n          y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {gringortenRaw} from \"../gringorten\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","export default function(o, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(coordinates) {\n    coordinates[0] = +coordinates[0].toFixed(digits);\n    coordinates[1] = +coordinates[1].toFixed(digits);\n  }\n\n  function quantizePoints(coordinates) {\n    coordinates.forEach(quantizePoint);\n  }\n\n  function quantizePolygon(coordinates) {\n    coordinates.forEach(quantizePoints);\n  }\n\n  function quantizeGeometry(o) {\n    if (o) switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": case \"LineString\": quantizePoints(o.coordinates); break;\n      case \"MultiLineString\": case \"Polygon\": quantizePolygon(o.coordinates); break;\n      case \"MultiPolygon\": o.coordinates.forEach(quantizePolygon); break;\n      default: return;\n    }\n  }\n\n  function quantizeFeature(o) {\n    quantizeGeometry(o.geometry);\n  }\n\n  if (o) switch (o.type) {\n    case \"Feature\": quantizeFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(quantizeFeature); break;\n    default: quantizeGeometry(o); break;\n  }\n\n  return o;\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1\n      ? [0, y] // pole\n      : [x0, quantize(y)]; // antimeridian\n}\n\nfunction clampPoint(p) {\n  if (p[0] <= x0e) p[0] = x0;\n  else if (p[0] >= x1e) p[0] = x1;\n  if (p[1] <= y0e) p[1] = y0;\n  else if (p[1] >= y1e) p[1] = y1;\n}\n\nfunction clampPoints(points) {\n  points.forEach(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(polygon, fragments) {\n  for (var j = 0, m = polygon.length; j < m; ++j) {\n    var ring = polygon[j];\n    ring.polygon = polygon;\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push(ring);\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = ring.slice(0, i + 1);\n          fragmentBefore.polygon = polygon;\n          fragmentBefore[fragmentBefore.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push(ring = ring.slice(k - 1));\n        ring[0] = normalizePoint(ring[0][1]);\n        ring.polygon = polygon;\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n  polygon.length = 0;\n}\n\n// Now stitch the fragments back together into rings.\n// TODO remove empty polygons.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment[0];\n    end = fragment[fragment.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment[0];\n      end = fragment[fragment.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment[0]];\n        startFragment.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = startFragment.concat(fragment);\n        fragment.polygon = startFragment.polygon;\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment[endFragment.length - 1]];\n        fragment.pop(); // drop the shared coordinate\n        fragment = fragment.concat(endFragment);\n        fragment.polygon = endFragment.polygon;\n        fragment.index = n++;\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n      } else {\n        fragment.push(fragment[0]); // close ring\n        fragment.polygon.push(fragment);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(o) {\n  stitchGeometry(o.geometry);\n}\n\nfunction stitchGeometry(o) {\n  if (!o) return;\n  var fragments, i, n;\n\n  switch (o.type) {\n    case \"GeometryCollection\": {\n      o.geometries.forEach(stitchGeometry);\n      return;\n    }\n    case \"Point\": {\n      clampPoint(o.coordinates);\n      break;\n    }\n    case \"MultiPoint\":\n    case \"LineString\": {\n      clampPoints(o.coordinates);\n      break;\n    }\n    case \"MultiLineString\": {\n      o.coordinates.forEach(clampPoints);\n      break;\n    }\n    case \"Polygon\": {\n      extractFragments(o.coordinates, fragments = []);\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = o.coordinates.length;\n      while (++i < n) extractFragments(o.coordinates[i], fragments);\n      break;\n    }\n    default: return;\n  }\n\n  stitchFragments(fragments);\n}\n\nexport default function(o) {\n  if (o) switch (o.type) {\n    case \"Feature\": stitchFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(stitchFeature); break;\n    default: stitchGeometry(o); break;\n  }\n  return o;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\n// TODO clip to ellipse\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \"./math\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","export {default as geoAiry, airyRaw as geoAiryRaw} from \"./src/airy\";\nexport {default as geoAitoff, aitoffRaw as geoAitoffRaw} from \"./src/aitoff\";\nexport {default as geoArmadillo, armadilloRaw as geoArmadilloRaw} from \"./src/armadillo\";\nexport {default as geoAugust, augustRaw as geoAugustRaw} from \"./src/august\";\nexport {default as geoBaker, bakerRaw as geoBakerRaw} from \"./src/baker\";\nexport {default as geoBerghaus, berghausRaw as geoBerghausRaw} from \"./src/berghaus\";\nexport {default as geoBoggs, boggsRaw as geoBoggsRaw} from \"./src/boggs\";\nexport {default as geoBonne, bonneRaw as geoBonneRaw} from \"./src/bonne\";\nexport {default as geoBottomley, bottomleyRaw as geoBottomleyRaw} from \"./src/bottomley\";\nexport {default as geoBromley, bromleyRaw as geoBromleyRaw} from \"./src/bromley\";\nexport {default as geoChamberlin, chamberlinRaw as geoChamberlinRaw, chamberlinAfrica as geoChamberlinAfrica} from \"./src/chamberlin\";\nexport {default as geoCollignon, collignonRaw as geoCollignonRaw} from \"./src/collignon\";\nexport {default as geoCraig, craigRaw as geoCraigRaw} from \"./src/craig\";\nexport {default as geoCraster, crasterRaw as geoCrasterRaw} from \"./src/craster\";\nexport {default as geoCylindricalEqualArea, cylindricalEqualAreaRaw as geoCylindricalEqualAreaRaw} from \"./src/cylindricalEqualArea\";\nexport {default as geoCylindricalStereographic, cylindricalStereographicRaw as geoCylindricalStereographicRaw} from \"./src/cylindricalStereographic\";\nexport {default as geoEckert1, eckert1Raw as geoEckert1Raw} from \"./src/eckert1.js\";\nexport {default as geoEckert2, eckert2Raw as geoEckert2Raw} from \"./src/eckert2.js\";\nexport {default as geoEckert3, eckert3Raw as geoEckert3Raw} from \"./src/eckert3.js\";\nexport {default as geoEckert4, eckert4Raw as geoEckert4Raw} from \"./src/eckert4.js\";\nexport {default as geoEckert5, eckert5Raw as geoEckert5Raw} from \"./src/eckert5.js\";\nexport {default as geoEckert6, eckert6Raw as geoEckert6Raw} from \"./src/eckert6.js\";\nexport {default as geoEisenlohr, eisenlohrRaw as geoEisenlohrRaw} from \"./src/eisenlohr.js\";\nexport {default as geoFahey, faheyRaw as geoFaheyRaw} from \"./src/fahey.js\";\nexport {default as geoFoucaut, foucautRaw as geoFoucautRaw} from \"./src/foucaut.js\";\nexport {default as geoGilbert} from \"./src/gilbert.js\";\nexport {default as geoGingery, gingeryRaw as geoGingeryRaw} from \"./src/gingery.js\";\nexport {default as geoGinzburg4, ginzburg4Raw as geoGinzburg4Raw} from \"./src/ginzburg4.js\";\nexport {default as geoGinzburg5, ginzburg5Raw as geoGinzburg5Raw} from \"./src/ginzburg5.js\";\nexport {default as geoGinzburg6, ginzburg6Raw as geoGinzburg6Raw} from \"./src/ginzburg6.js\";\nexport {default as geoGinzburg8, ginzburg8Raw as geoGinzburg8Raw} from \"./src/ginzburg8.js\";\nexport {default as geoGinzburg9, ginzburg9Raw as geoGinzburg9Raw} from \"./src/ginzburg9.js\";\nexport {default as geoGringorten, gringortenRaw as geoGringortenRaw} from \"./src/gringorten.js\";\nexport {default as geoGuyou, guyouRaw as geoGuyouRaw} from \"./src/guyou.js\";\nexport {default as geoHammer, hammerRaw as geoHammerRaw} from \"./src/hammer.js\";\nexport {default as geoHammerRetroazimuthal, hammerRetroazimuthalRaw as geoHammerRetroazimuthalRaw} from \"./src/hammerRetroazimuthal.js\";\nexport {default as geoHealpix, healpixRaw as geoHealpixRaw} from \"./src/healpix.js\";\nexport {default as geoHill, hillRaw as geoHillRaw} from \"./src/hill.js\";\nexport {default as geoHomolosine, homolosineRaw as geoHomolosineRaw} from \"./src/homolosine.js\";\nexport {default as geoInterrupt} from \"./src/interrupted/index\";\nexport {default as geoInterruptedBoggs} from \"./src/interrupted/boggs\";\nexport {default as geoInterruptedHomolosine} from \"./src/interrupted/homolosine\";\nexport {default as geoInterruptedMollweide} from \"./src/interrupted/mollweide\";\nexport {default as geoInterruptedMollweideHemispheres} from \"./src/interrupted/mollweideHemispheres\";\nexport {default as geoInterruptedSinuMollweide} from \"./src/interrupted/sinuMollweide\";\nexport {default as geoInterruptedSinusoidal} from \"./src/interrupted/sinusoidal\";\nexport {default as geoKavrayskiy7, kavrayskiy7Raw as geoKavrayskiy7Raw} from \"./src/kavrayskiy7.js\";\nexport {default as geoLagrange, lagrangeRaw as geoLagrangeRaw} from \"./src/lagrange.js\";\nexport {default as geoLarrivee, larriveeRaw as geoLarriveeRaw} from \"./src/larrivee\";\nexport {default as geoLaskowski, laskowskiRaw as geoLaskowskiRaw} from \"./src/laskowski\";\nexport {default as geoLittrow, littrowRaw as geoLittrowRaw} from \"./src/littrow.js\";\nexport {default as geoLoximuthal, loximuthalRaw as geoLoximuthalRaw} from \"./src/loximuthal.js\";\nexport {default as geoMiller, millerRaw as geoMillerRaw} from \"./src/miller\";\nexport {default as geoModifiedStereographic, modifiedStereographicRaw as geoModifiedStereographicRaw, modifiedStereographicAlaska as geoModifiedStereographicAlaska, modifiedStereographicGs48 as geoModifiedStereographicGs48, modifiedStereographicGs50 as geoModifiedStereographicGs50, modifiedStereographicMiller as geoModifiedStereographicMiller, modifiedStereographicLee as geoModifiedStereographicLee} from \"./src/modifiedStereographic\";\nexport {default as geoMollweide, mollweideRaw as geoMollweideRaw} from \"./src/mollweide\";\nexport {default as geoMtFlatPolarParabolic, mtFlatPolarParabolicRaw as geoMtFlatPolarParabolicRaw} from \"./src/mtFlatPolarParabolic\";\nexport {default as geoMtFlatPolarQuartic, mtFlatPolarQuarticRaw as geoMtFlatPolarQuarticRaw} from \"./src/mtFlatPolarQuartic\";\nexport {default as geoMtFlatPolarSinusoidal, mtFlatPolarSinusoidalRaw as geoMtFlatPolarSinusoidalRaw} from \"./src/mtFlatPolarSinusoidal\";\nexport {default as geoNaturalEarth, naturalEarthRaw as geoNaturalEarthRaw} from \"./src/naturalEarth\";\nexport {default as geoNellHammer, nellHammerRaw as geoNellHammerRaw} from \"./src/nellHammer\";\nexport {default as geoPatterson, pattersonRaw as geoPattersonRaw} from \"./src/patterson\";\nexport {default as geoPolyconic, polyconicRaw as geoPolyconicRaw} from \"./src/polyconic\";\nexport {default as geoPolyhedral} from \"./src/polyhedral/index.js\";\nexport {default as geoPolyhedralButterfly} from \"./src/polyhedral/butterfly.js\";\nexport {default as geoPolyhedralCollignon} from \"./src/polyhedral/collignon.js\";\nexport {default as geoPolyhedralWaterman} from \"./src/polyhedral/waterman.js\";\nexport {default as geoProject} from \"./src/project/index\";\nexport {default as geoGringortenQuincuncial} from \"./src/quincuncial/gringorten.js\";\nexport {default as geoPeirceQuincuncial} from \"./src/quincuncial/peirce.js\";\nexport {default as geoPierceQuincuncial} from \"./src/quincuncial/peirce.js\"; // DEPRECATED misspelling\nexport {default as geoQuantize} from \"./src/quantize\";\nexport {default as geoQuincuncial} from \"./src/quincuncial/index.js\";\nexport {default as geoRectangularPolyconic, rectangularPolyconicRaw as geoRectangularPolyconicRaw} from \"./src/rectangularPolyconic\";\nexport {default as geoRobinson, robinsonRaw as geoRobinsonRaw} from \"./src/robinson\";\nexport {default as geoSatellite, satelliteRaw as geoSatelliteRaw} from \"./src/satellite\";\nexport {default as geoSinuMollweide, sinuMollweideRaw as geoSinuMollweideRaw} from \"./src/sinuMollweide\";\nexport {default as geoSinusoidal, sinusoidalRaw as geoSinusoidalRaw} from \"./src/sinusoidal\";\nexport {default as geoStitch} from \"./src/stitch\";\nexport {default as geoTimes, timesRaw as geoTimesRaw} from \"./src/times\";\nexport {default as geoTwoPointAzimuthal, twoPointAzimuthalRaw as geoTwoPointAzimuthalRaw, twoPointAzimuthalUsa as geoTwoPointAzimuthalUsa} from \"./src/twoPointAzimuthal\";\nexport {default as geoTwoPointEquidistant, twoPointEquidistantRaw as geoTwoPointEquidistantRaw, twoPointEquidistantUsa as geoTwoPointEquidistantUsa} from \"./src/twoPointEquidistant\";\nexport {default as geoVanDerGrinten, vanDerGrintenRaw as geoVanDerGrintenRaw} from \"./src/vanDerGrinten\";\nexport {default as geoVanDerGrinten2, vanDerGrinten2Raw as geoVanDerGrinten2Raw} from \"./src/vanDerGrinten2\";\nexport {default as geoVanDerGrinten3, vanDerGrinten3Raw as geoVanDerGrinten3Raw} from \"./src/vanDerGrinten3\";\nexport {default as geoVanDerGrinten4, vanDerGrinten4Raw as geoVanDerGrinten4Raw} from \"./src/vanDerGrinten4\";\nexport {default as geoWagner4, wagner4Raw as geoWagner4Raw} from \"./src/wagner4.js\";\nexport {default as geoWagner6, wagner6Raw as geoWagner6Raw} from \"./src/wagner6.js\";\nexport {default as geoWagner7, wagner7Raw as geoWagner7Raw} from \"./src/wagner7.js\";\nexport {default as geoWiechel, wiechelRaw as geoWiechelRaw} from \"./src/wiechel.js\";\nexport {default as geoWinkel3, winkel3Raw as geoWinkel3Raw} from \"./src/winkel3\";\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    point[0] = (x0 += point[0]) * kx + dx;\n    point[1] = (y0 += point[1]) * ky + dy;\n    return point;\n  };\n}\n","import transform from \"./transform\";\n\nexport default function(topology) {\n  var bbox = topology.bbox;\n\n  function bboxPoint(p0) {\n    p1[0] = p0[0], p1[1] = p0[1], t(p1);\n    if (p1[0] < x0) x0 = p1[0];\n    if (p1[0] > x1) x1 = p1[0];\n    if (p1[1] < y0) y0 = p1[1];\n    if (p1[1] > y1) y1 = p1[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  if (!bbox) {\n    var t = transform(topology), p0, p1 = new Array(2), name,\n        x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n    topology.arcs.forEach(function(arc) {\n      var i = -1, n = arc.length;\n      while (++i < n) {\n        p0 = arc[i], p1[0] = p0[0], p1[1] = p0[1], t(p1, i);\n        if (p1[0] < x0) x0 = p1[0];\n        if (p1[0] > x1) x1 = p1[0];\n        if (p1[1] < y0) y0 = p1[1];\n        if (p1[1] > y1) y1 = p1[1];\n      }\n    });\n\n    for (name in topology.objects) {\n      bboxGeometry(topology.objects[name]);\n    }\n\n    bbox = topology.bbox = [x0, y0, x1, y1];\n  }\n\n  return bbox;\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k].slice(), k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p.slice());\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0].slice());\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0].slice());\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nexport default function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n}\n\nexport function meshArcs(topology, object, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n","export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n","import bisect from \"./bisect\";\n\nexport default function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n","import bbox from \"./bbox\";\n\nexport default function(topology, n) {\n  if (!((n = Math.floor(n)) >= 2)) throw new Error(\"n must be ≥2\");\n  if (topology.transform) throw new Error(\"already quantized\");\n  var bb = bbox(topology), name,\n      dx = bb[0], kx = (bb[2] - dx) / (n - 1) || 1,\n      dy = bb[1], ky = (bb[3] - dy) / (n - 1) || 1;\n\n  function quantizePoint(p) {\n    p[0] = Math.round((p[0] - dx) / kx);\n    p[1] = Math.round((p[1] - dy) / ky);\n  }\n\n  function quantizeGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(quantizePoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = 1,\n        j = 1,\n        n = arc.length,\n        pi = arc[0],\n        x0 = pi[0] = Math.round((pi[0] - dx) / kx),\n        y0 = pi[1] = Math.round((pi[1] - dy) / ky),\n        pj,\n        x1,\n        y1;\n\n    for (; i < n; ++i) {\n      pi = arc[i];\n      x1 = Math.round((pi[0] - dx) / kx);\n      y1 = Math.round((pi[1] - dy) / ky);\n      if (x1 !== x0 || y1 !== y0) {\n        pj = arc[j++];\n        pj[0] = x1 - x0, x0 = x1;\n        pj[1] = y1 - y0, y0 = y1;\n      }\n    }\n\n    if (j < 2) {\n      pj = arc[j++];\n      pj[0] = 0;\n      pj[1] = 0;\n    }\n\n    arc.length = j;\n  });\n\n  for (name in topology.objects) {\n    quantizeGeometry(topology.objects[name]);\n  }\n\n  topology.transform = {\n    scale: [kx, ky],\n    translate: [dx, dy]\n  };\n\n  return topology;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0, x0 = x1;\n    point[1] = y1 - y0, y0 = y1;\n    return point;\n  };\n}\n","export {default as bbox} from \"./src/bbox\";\nexport {default as feature} from \"./src/feature\";\nexport {default as mesh, meshArcs} from \"./src/mesh\";\nexport {default as merge, mergeArcs} from \"./src/merge\";\nexport {default as neighbors} from \"./src/neighbors\";\nexport {default as quantize} from \"./src/quantize\";\nexport {default as transform} from \"./src/transform\";\nexport {default as untransform} from \"./src/untransform\";\n","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipPolygon from \"./polygon\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport function clipExtent(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    return this._circle = circle(_), this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","import clipBuffer from \"./buffer\";\nimport clipPolygon from \"./polygon\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(rotate, sink) {\n    var line = clipLine(sink),\n        rotatedStart = rotate.invert(start[0], start[1]),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, rotatedStart);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      var point = rotate(lambda, phi);\n      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      var point = rotate(lambda, phi);\n      line.point(point[0], point[1]);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      var point = rotate(lambda, phi);\n      ringSink.point(point[0], point[1]);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius, delta) {\n  var cr = cos(radius),\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nexport function fitExtent(projection, extent, object) {\n  var w = extent[1][0] - extent[0][0],\n      h = extent[1][1] - extent[0][1],\n      clip = projection.clipExtent && projection.clipExtent();\n\n  projection\n      .scale(150)\n      .translate([0, 0]);\n\n  if (clip != null) projection.clipExtent(null);\n\n  geoStream(object, projection.stream(boundsStream));\n\n  var b = boundsStream.result(),\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\n  if (clip != null) projection.clipExtent(clip);\n\n  return projection\n      .scale(k * 150)\n      .translate([x, y]);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {clipExtent} from \"../clip/extent\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, clip = identity, // clip extent\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    }\n  };\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export {default as geoArea} from \"./src/area\";\nexport {default as geoBounds} from \"./src/bounds\";\nexport {default as geoCentroid} from \"./src/centroid\";\nexport {default as geoCircle} from \"./src/circle\";\nexport {default as geoClipExtent} from \"./src/clip/extent\"; // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\nexport {default as geoContains} from \"./src/contains\";\nexport {default as geoDistance} from \"./src/distance\";\nexport {default as geoGraticule, graticule10 as geoGraticule10} from \"./src/graticule\";\nexport {default as geoInterpolate} from \"./src/interpolate\";\nexport {default as geoLength} from \"./src/length\";\nexport {default as geoPath} from \"./src/path/index\";\nexport {default as geoAlbers} from \"./src/projection/albers\";\nexport {default as geoAlbersUsa} from \"./src/projection/albersUsa\";\nexport {default as geoAzimuthalEqualArea, azimuthalEqualAreaRaw as geoAzimuthalEqualAreaRaw} from \"./src/projection/azimuthalEqualArea\";\nexport {default as geoAzimuthalEquidistant, azimuthalEquidistantRaw as geoAzimuthalEquidistantRaw} from \"./src/projection/azimuthalEquidistant\";\nexport {default as geoConicConformal, conicConformalRaw as geoConicConformalRaw} from \"./src/projection/conicConformal\";\nexport {default as geoConicEqualArea, conicEqualAreaRaw as geoConicEqualAreaRaw} from \"./src/projection/conicEqualArea\";\nexport {default as geoConicEquidistant, conicEquidistantRaw as geoConicEquidistantRaw} from \"./src/projection/conicEquidistant\";\nexport {default as geoEquirectangular, equirectangularRaw as geoEquirectangularRaw} from \"./src/projection/equirectangular\";\nexport {default as geoGnomonic, gnomonicRaw as geoGnomonicRaw} from \"./src/projection/gnomonic\";\nexport {default as geoIdentity} from \"./src/projection/identity\";\nexport {default as geoProjection, projectionMutator as geoProjectionMutator} from \"./src/projection/index\";\nexport {default as geoMercator, mercatorRaw as geoMercatorRaw} from \"./src/projection/mercator\";\nexport {default as geoOrthographic, orthographicRaw as geoOrthographicRaw} from \"./src/projection/orthographic\";\nexport {default as geoStereographic, stereographicRaw as geoStereographicRaw} from \"./src/projection/stereographic\";\nexport {default as geoTransverseMercator, transverseMercatorRaw as geoTransverseMercatorRaw} from \"./src/projection/transverseMercator\";\nexport {default as geoRotation} from \"./src/rotation\";\nexport {default as geoStream} from \"./src/stream\";\nexport {default as geoTransform} from \"./src/transform\";\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","export {default as bisect, bisectRight, bisectLeft} from \"./bisect\";\nexport {default as ascending} from \"./ascending\";\nexport {default as bisector} from \"./bisector\";\nexport {default as cross} from \"./cross\";\nexport {default as descending} from \"./descending\";\nexport {default as deviation} from \"./deviation\";\nexport {default as extent} from \"./extent\";\nexport {default as histogram} from \"./histogram\";\nexport {default as thresholdFreedmanDiaconis} from \"./threshold/freedmanDiaconis\";\nexport {default as thresholdScott} from \"./threshold/scott\";\nexport {default as thresholdSturges} from \"./threshold/sturges\";\nexport {default as max} from \"./max\";\nexport {default as mean} from \"./mean\";\nexport {default as median} from \"./median\";\nexport {default as merge} from \"./merge\";\nexport {default as min} from \"./min\";\nexport {default as pairs} from \"./pairs\";\nexport {default as permute} from \"./permute\";\nexport {default as quantile} from \"./quantile\";\nexport {default as range} from \"./range\";\nexport {default as scan} from \"./scan\";\nexport {default as shuffle} from \"./shuffle\";\nexport {default as sum} from \"./sum\";\nexport {default as ticks, tickIncrement, tickStep} from \"./ticks\";\nexport {default as transpose} from \"./transpose\";\nexport {default as variance} from \"./variance\";\nexport {default as zip} from \"./zip\";\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceStrokeWidth = replaceStrokeWidth;\nexports.createChoroplethStyles = createChoroplethStyles;\nexports.calculateResizeFactor = calculateResizeFactor;\nexports.calculateMousePosition = calculateMousePosition;\nexports.isChildOfType = isChildOfType;\nexports.createNewChildren = createNewChildren;\nexports.roundPath = roundPath;\nexports.createConnectorPath = createConnectorPath;\nexports.createTextAnchor = createTextAnchor;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction replaceStrokeWidth(styles) {\n  var newStyles = {};\n  Object.keys(styles).map(function (key, i) {\n    if (key === \"strokeWidth\") newStyles[key] = \"inherit\";else newStyles[key] = styles[key];\n  });\n  return newStyles;\n}\n\nfunction createChoroplethStyles(styles, choroplethValue) {\n  if (choroplethValue) {\n    var newStyles = {};\n    Object.keys(styles).map(function (key, i) {\n      if (key === \"fill\") newStyles[key] = choroplethValue.value;else newStyles[key] = styles[key];\n    });\n    return newStyles;\n  } else {\n    return styles;\n  }\n}\n\nfunction calculateResizeFactor(actualDimension, baseDimension) {\n  return 1 / 100 * (100 / actualDimension * baseDimension);\n}\n\nfunction calculateMousePosition(direction, projection, props, zoom, resizeFactor) {\n  var center = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : props.center;\n  var width = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : props.width;\n  var height = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : props.height;\n\n  var reference = { x: 0, y: 1 };\n  var reverseRotation = projection().rotate().map(function (item) {\n    return -item;\n  });\n  return (projection().rotate(reverseRotation)([-center[0], -center[1]])[reference[direction]] - (reference[direction] === 0 ? width : height) / 2) * zoom * (1 / resizeFactor);\n}\n\nfunction isChildOfType(child, expectedType) {\n  return child.props.componentIdentifier === expectedType;\n}\n\nfunction createNewChildren(children, props) {\n  if (!children) return;\n  if (!children.length) {\n    return isChildOfType(children, \"Geographies\") ? _react2.default.cloneElement(children, {\n      projection: props.projection\n    }) : isChildOfType(children, \"Markers\") || isChildOfType(children, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(children, {\n      projection: props.projection,\n      zoom: props.zoom\n    }) : children;\n  } else {\n    return children.map(function (child, i) {\n      if (!child) return;\n      return isChildOfType(child, \"Geographies\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection\n      }) : isChildOfType(child, \"Markers\") || isChildOfType(child, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection,\n        zoom: props.zoom\n      }) : child;\n    });\n  }\n}\n\nfunction roundPath(path, precision) {\n  if (!path) return;\n  var query = /[\\d\\.-][\\d\\.e-]*/g;\n  return path.replace(query, function (n) {\n    return Math.round(n * (1 / precision)) / (1 / precision);\n  });\n}\n\nfunction createConnectorPath(connectorType, endPoint) {\n  return \"M0,0 L\" + endPoint[0] + \",\" + endPoint[1];\n}\n\nfunction createTextAnchor(dx) {\n  if (dx > 0) return \"start\";else if (dx < 0) return \"end\";else return \"middle\";\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  scale: 160,\n  xOffset: 0,\n  yOffset: 0,\n  rotation: [0, 0, 0],\n  precision: 0.1\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ComposableMap = require(\"./ComposableMap\");\n\nObject.defineProperty(exports, \"ComposableMap\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ComposableMap).default;\n  }\n});\n\nvar _ZoomableGroup = require(\"./ZoomableGroup\");\n\nObject.defineProperty(exports, \"ZoomableGroup\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ZoomableGroup).default;\n  }\n});\n\nvar _Geographies = require(\"./Geographies\");\n\nObject.defineProperty(exports, \"Geographies\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geographies).default;\n  }\n});\n\nvar _Geography = require(\"./Geography\");\n\nObject.defineProperty(exports, \"Geography\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geography).default;\n  }\n});\n\nvar _Marker = require(\"./Marker\");\n\nObject.defineProperty(exports, \"Marker\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Marker).default;\n  }\n});\n\nvar _Markers = require(\"./Markers\");\n\nObject.defineProperty(exports, \"Markers\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Markers).default;\n  }\n});\n\nvar _Annotation = require(\"./Annotation\");\n\nObject.defineProperty(exports, \"Annotation\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Annotation).default;\n  }\n});\n\nvar _Graticule = require(\"./Graticule\");\n\nObject.defineProperty(exports, \"Graticule\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Graticule).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _projections = require(\"./projections\");\n\nvar _projections2 = _interopRequireDefault(_projections);\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ComposableMap = function (_Component) {\n  _inherits(ComposableMap, _Component);\n\n  function ComposableMap() {\n    _classCallCheck(this, ComposableMap);\n\n    var _this = _possibleConstructorReturn(this, (ComposableMap.__proto__ || Object.getPrototypeOf(ComposableMap)).call(this));\n\n    _this.projection = _this.projection.bind(_this);\n    return _this;\n  }\n\n  _createClass(ComposableMap, [{\n    key: \"projection\",\n    value: function projection() {\n      var _props = this.props,\n          projection = _props.projection,\n          projectionConfig = _props.projectionConfig,\n          width = _props.width,\n          height = _props.height;\n\n\n      return typeof projection !== \"function\" ? (0, _projections2.default)(width, height, projectionConfig, projection) : projection(width, height, projectionConfig);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          style = _props2.style,\n          showCenter = _props2.showCenter,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"svg\",\n        { width: width,\n          height: height,\n          viewBox: \"0 0 \" + width + \" \" + height,\n          className: \"rsm-svg\",\n          style: style },\n        _react2.default.cloneElement(this.props.children, {\n          projection: this.projection,\n          width: width,\n          height: height\n        }),\n        showCenter && _react2.default.createElement(\n          \"g\",\n          null,\n          _react2.default.createElement(\"rect\", { x: width / 2 - 0.5, y: 0, width: 1, height: height, fill: \"#e91e63\" }),\n          _react2.default.createElement(\"rect\", { x: 0, y: height / 2 - 0.5, width: width, height: 1, fill: \"#e91e63\" })\n        )\n      );\n    }\n  }]);\n\n  return ComposableMap;\n}(_react.Component);\n\nComposableMap.defaultProps = {\n  width: 800,\n  height: 450,\n  projection: \"times\",\n  projectionConfig: _projectionConfig2.default\n};\n\nexports.default = ComposableMap;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (width, height, config, projectionName) {\n\n  var scale = config.scale || _projectionConfig2.default.scale;\n  var xOffset = config.xOffset || _projectionConfig2.default.xOffset;\n  var yOffset = config.yOffset || _projectionConfig2.default.yOffset;\n  var rotation = config.rotation || _projectionConfig2.default.rotation;\n  var precision = config.precision || _projectionConfig2.default.precision;\n\n  return projectionReference[projectionName]().scale(scale).translate([xOffset + width / 2, yOffset + height / 2]).rotate(rotation).precision(precision);\n};\n\nvar _d3GeoProjection = require(\"d3-geo-projection\");\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar projectionReference = {\n  mercator: _d3Geo.geoMercator,\n  miller: _d3GeoProjection.geoMiller,\n  times: _d3GeoProjection.geoTimes,\n  robinson: _d3GeoProjection.geoRobinson,\n  winkel3: _d3GeoProjection.geoWinkel3,\n  eckert4: _d3GeoProjection.geoEckert4\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ZoomableGroup = function (_Component) {\n  _inherits(ZoomableGroup, _Component);\n\n  function ZoomableGroup(props) {\n    _classCallCheck(this, ZoomableGroup);\n\n    var _this = _possibleConstructorReturn(this, (ZoomableGroup.__proto__ || Object.getPrototypeOf(ZoomableGroup)).call(this, props));\n\n    var backdropX = props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropY = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n    var backdropWidth = props.projection().rotate([0, 0, 0])([props.backdrop.x[1], 0])[0] - props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropHeight = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[1]])[1] - props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n\n    _this.state = {\n      mouseX: (0, _utils.calculateMousePosition)(\"x\", props.projection, props, props.zoom, 1),\n      mouseY: (0, _utils.calculateMousePosition)(\"y\", props.projection, props, props.zoom, 1),\n      mouseXStart: 0,\n      mouseYStart: 0,\n      isPressed: false,\n      resizeFactorX: 1,\n      resizeFactorY: 1,\n      backdrop: {\n        width: Math.round(backdropWidth),\n        height: Math.round(backdropHeight),\n        x: Math.round(backdropX),\n        y: Math.round(backdropY)\n      }\n    };\n\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleResize = _this.handleResize.bind(_this);\n    return _this;\n  }\n\n  _createClass(ZoomableGroup, [{\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(_ref) {\n      var pageX = _ref.pageX,\n          pageY = _ref.pageY;\n\n      if (this.props.disablePanning) return;\n\n      if (this.state.isPressed) {\n        this.setState({\n          mouseX: pageX - this.state.mouseXStart,\n          mouseY: pageY - this.state.mouseYStart\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      if (this.props.disablePanning) return;\n      if (this.state.isPressed) {\n        this.setState({\n          isPressed: false\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(_ref2) {\n      var pageX = _ref2.pageX,\n          pageY = _ref2.pageY;\n\n      if (this.props.disablePanning) return;\n      this.setState({\n        isPressed: true,\n        mouseXStart: pageX - this.state.mouseX,\n        mouseYStart: pageY - this.state.mouseY\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _state = this.state,\n          mouseX = _state.mouseX,\n          mouseY = _state.mouseY,\n          resizeFactorX = _state.resizeFactorX,\n          resizeFactorY = _state.resizeFactorY;\n      var _props = this.props,\n          projection = _props.projection,\n          center = _props.center,\n          zoom = _props.zoom;\n\n\n      var zoomFactor = nextProps.zoom / zoom;\n      var centerChanged = JSON.stringify(nextProps.center) !== JSON.stringify(center);\n\n      this.setState({\n        zoom: nextProps.zoom,\n        mouseX: centerChanged ? (0, _utils.calculateMousePosition)(\"x\", projection, nextProps, nextProps.zoom, resizeFactorX) : mouseX * zoomFactor,\n        mouseY: centerChanged ? (0, _utils.calculateMousePosition)(\"y\", projection, nextProps, nextProps.zoom, resizeFactorY) : mouseY * zoomFactor\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          projection = _props2.projection,\n          zoom = _props2.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      var xPercentageChange = 1 / resizeFactorX * this.state.resizeFactorX;\n      var yPercentageChange = 1 / resizeFactorY * this.state.resizeFactorY;\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: this.state.mouseX * xPercentageChange,\n        mouseY: this.state.mouseY * yPercentageChange\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props3 = this.props,\n          width = _props3.width,\n          height = _props3.height,\n          projection = _props3.projection,\n          zoom = _props3.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: (0, _utils.calculateMousePosition)(\"x\", projection, this.props, zoom, resizeFactorX),\n        mouseY: (0, _utils.calculateMousePosition)(\"y\", projection, this.props, zoom, resizeFactorY)\n      });\n\n      window.addEventListener(\"resize\", this.handleResize);\n      window.addEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n      window.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          width = _props4.width,\n          height = _props4.height,\n          zoom = _props4.zoom,\n          style = _props4.style,\n          projection = _props4.projection,\n          children = _props4.children;\n      var _state2 = this.state,\n          mouseX = _state2.mouseX,\n          mouseY = _state2.mouseY,\n          resizeFactorX = _state2.resizeFactorX,\n          resizeFactorY = _state2.resizeFactorY;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-zoomable-group\",\n          ref: function ref(zoomableGroupNode) {\n            return _this2.zoomableGroupNode = zoomableGroupNode;\n          },\n          transform: \"\\n           translate(\\n             \" + Math.round((width / 2 + resizeFactorX * mouseX) * 100) / 100 + \"\\n             \" + Math.round((height / 2 + resizeFactorY * mouseY) * 100) / 100 + \"\\n           )\\n           scale(\" + zoom + \")\\n           translate(\" + -width / 2 + \" \" + -height / 2 + \")\\n         \",\n          onMouseMove: this.handleMouseMove,\n          onMouseUp: this.handleMouseUp,\n          onMouseDown: this.handleMouseDown,\n          style: style\n        },\n        _react2.default.createElement(\"rect\", {\n          x: this.state.backdrop.x,\n          y: this.state.backdrop.y,\n          width: this.state.backdrop.width,\n          height: this.state.backdrop.height,\n          fill: \"transparent\",\n          style: { strokeWidth: 0 }\n        }),\n        (0, _utils.createNewChildren)(children, this.props)\n      );\n    }\n  }]);\n\n  return ZoomableGroup;\n}(_react.Component);\n\nZoomableGroup.defaultProps = {\n  center: [0, 0],\n  backdrop: {\n    x: [-179.9, 179.9],\n    y: [89.9, -89.9]\n  },\n  zoom: 1,\n  disablePanning: false\n};\n\nexports.default = ZoomableGroup;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _topojsonClient = require(\"topojson-client\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Geographies = function (_Component) {\n  _inherits(Geographies, _Component);\n\n  function Geographies(props) {\n    _classCallCheck(this, Geographies);\n\n    var _this = _possibleConstructorReturn(this, (Geographies.__proto__ || Object.getPrototypeOf(Geographies)).call(this, props));\n\n    _this.state = {\n      geographyPaths: props.geographyPaths\n    };\n\n    _this.fetchGeographies = _this.fetchGeographies.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geographies, [{\n    key: \"fetchGeographies\",\n    value: function fetchGeographies(geographyUrl) {\n      var _this2 = this;\n\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height;\n\n\n      if (!geographyUrl) return;\n\n      var request = new XMLHttpRequest();\n      request.open(\"GET\", geographyUrl, true);\n\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n          var geographyPaths = JSON.parse(request.responseText);\n          _this2.setState({\n            geographyPaths: (0, _topojsonClient.feature)(geographyPaths, geographyPaths.objects[Object.keys(geographyPaths.objects)[0]]).features\n          }, function () {\n            if (!_this2.props.onGeographiesLoaded) return;\n            _this2.props.onGeographyPathsLoaded(String(request.status));\n          });\n        } else {\n          if (!_this2.props.onGeographiesLoaded) return;\n          _this2.props.onGeographyPathsLoaded(String(request.status));\n        }\n      };\n      request.onerror = function () {\n        console.log(\"There was a connection error...\");\n      };\n      request.send();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      ;\n      if (!nextProps.geographyUrl && !nextProps.geographyPaths.length !== this.props.geographyPaths.length) {\n        this.setState({\n          geographyPaths: nextProps.geographyPaths\n        });\n        return;\n      }\n      if (nextProps.geographyUrl !== this.props.geographyUrl) {\n        this.fetchGeographies(nextProps.geographyUrl);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var geoPathsChanged = nextState.geographyPaths.length !== this.state.geographyPaths.length;\n      var choroplethChanged = JSON.stringify(nextProps.choropleth) !== JSON.stringify(this.props.choropleth);\n      return geoPathsChanged || choroplethChanged || nextProps.disableOptimization;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchGeographies(this.props.geographyUrl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          projection = _props2.projection,\n          style = _props2.style,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-geographies\", style: style },\n        children(this.state.geographyPaths, projection)\n      );\n    }\n  }]);\n\n  return Geographies;\n}(_react.Component);\n\nGeographies.defaultProps = {\n  componentIdentifier: \"Geographies\",\n  disableOptimization: false,\n  geographyUrl: \"\",\n  geographyPaths: []\n};\n\nexports.default = Geographies;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar pathCache = {};\n\nvar renderPath = function renderPath(cacheId, geography, projection, round, precision) {\n  if (pathCache[cacheId]) return pathCache[cacheId];\n\n  var pathString = cacheId ? pathCache[cacheId] ? pathCache[cacheId] : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography) : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography);\n\n  if (cacheId) pathCache[cacheId] = pathString;\n\n  return pathString;\n};\n\nvar Geography = function (_Component) {\n  _inherits(Geography, _Component);\n\n  function Geography() {\n    _classCallCheck(this, Geography);\n\n    var _this = _possibleConstructorReturn(this, (Geography.__proto__ || Object.getPrototypeOf(Geography)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geography, [{\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      evt.persist();\n      var _props = this.props,\n          onClick = _props.onClick,\n          geography = _props.geography;\n\n      return onClick && onClick(geography, evt);\n    }\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props2 = this.props,\n          onMouseEnter = _props2.onMouseEnter,\n          geography = _props2.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props3 = this.props,\n          onMouseMove = _props3.onMouseMove,\n          geography = _props3.geography;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(geography, evt);\n        });\n      } else if (onMouseMove) onMouseMove(geography, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseLeave = _props4.onMouseLeave,\n          geography = _props4.geography;\n\n      this.setState({\n        hover: false,\n        pressed: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseDown = _props5.onMouseDown,\n          geography = _props5.geography;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props6 = this.props,\n          onMouseUp = _props6.onMouseUp,\n          geography = _props6.geography;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          geography = _props7.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          geography = _props8.geography;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(geography, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props9 = this.props,\n          geography = _props9.geography,\n          projection = _props9.projection,\n          round = _props9.round,\n          cacheId = _props9.cacheId,\n          precision = _props9.precision,\n          tabable = _props9.tabable,\n          style = _props9.style;\n      var _state = this.state,\n          hover = _state.hover,\n          pressed = _state.pressed;\n\n\n      var pathString = renderPath(cacheId, geography, projection, round, precision);\n\n      var excludeProps = [\"geography\", \"projection\", \"round\", \"cacheId\", \"precision\", \"tabable\", \"style\", \"onClick\", \"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\"];\n\n      var restProps = Object.keys(this.props).filter(function (key) {\n        return excludeProps.indexOf(key) === -1;\n      }).reduce(function (obj, key) {\n        obj[key] = _this2.props[key];\n        return obj;\n      }, {});\n\n      return _react2.default.createElement(\"path\", _extends({\n        d: pathString,\n        className: \"rsm-geography\" + (pressed ? \" rsm-geography--pressed\" : \"\") + (hover ? \" rsm-geography--hover\" : \"\"),\n        style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n        onClick: this.handleMouseClick,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseMove: this.handleMouseMove,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onFocus: tabable && this.handleFocus,\n        onBlur: tabable && this.handleBlur,\n        tabIndex: tabable ? 0 : -1\n      }, restProps));\n    }\n  }]);\n\n  return Geography;\n}(_react.Component);\n\nGeography.defaultProps = {\n  precision: 0.1,\n  cacheId: null,\n  round: false,\n  tabable: true,\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  }\n};\n\nexports.default = Geography;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Marker = function (_Component) {\n  _inherits(Marker, _Component);\n\n  function Marker() {\n    _classCallCheck(this, Marker);\n\n    var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Marker, [{\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props = this.props,\n          onMouseEnter = _props.onMouseEnter,\n          marker = _props.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props2 = this.props,\n          onMouseMove = _props2.onMouseMove,\n          marker = _props2.marker;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(marker, evt);\n        });\n      } else if (onMouseMove) onMouseMove(marker, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props3 = this.props,\n          onMouseLeave = _props3.onMouseLeave,\n          marker = _props3.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseDown = _props4.onMouseDown,\n          marker = _props4.marker;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseUp = _props5.onMouseUp,\n          marker = _props5.marker;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      if (!this.props.onClick) return;\n      evt.persist();\n      var _props6 = this.props,\n          onClick = _props6.onClick,\n          marker = _props6.marker,\n          projection = _props6.projection;\n\n      return onClick && onClick(marker, projection()(marker.coordinates), evt);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          marker = _props7.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          marker = _props8.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(marker, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props9 = this.props,\n          projection = _props9.projection,\n          marker = _props9.marker,\n          style = _props9.style,\n          tabable = _props9.tabable,\n          children = _props9.children;\n      var _state = this.state,\n          pressed = _state.pressed,\n          hover = _state.hover;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-marker\" + (pressed ? \" rsm-marker--pressed\" : \"\") + (hover ? \" rsm-marker--hover\" : \"\"),\n          transform: \"translate(\\n           \" + projection()(marker.coordinates)[0] + \"\\n           \" + projection()(marker.coordinates)[1] + \"\\n         )\",\n          style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n          onMouseDown: this.handleMouseDown,\n          onMouseUp: this.handleMouseUp,\n          onClick: this.handleMouseClick,\n          onMouseMove: this.handleMouseMove,\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur,\n          tabIndex: tabable ? 0 : -1\n        },\n        children\n      );\n    }\n  }]);\n\n  return Marker;\n}(_react.Component);\n\nMarker.defaultProps = {\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  },\n  marker: {\n    coordinates: [0, 0]\n  },\n  tabable: true\n};\n\nexports.default = Marker;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Markers = function (_Component) {\n  _inherits(Markers, _Component);\n\n  function Markers() {\n    _classCallCheck(this, Markers);\n\n    return _possibleConstructorReturn(this, (Markers.__proto__ || Object.getPrototypeOf(Markers)).apply(this, arguments));\n  }\n\n  _createClass(Markers, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          projection = _props.projection,\n          style = _props.style;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-markers\", style: style },\n        !children ? null : children.length === undefined ? _react2.default.cloneElement(children, {\n          projection: projection\n        }) : children.map(function (child, i) {\n          return !child ? null : _react2.default.cloneElement(child, {\n            key: child.key || \"marker-\" + i,\n            projection: projection\n          });\n        })\n      );\n    }\n  }]);\n\n  return Markers;\n}(_react.Component);\n\nMarkers.defaultProps = {\n  componentIdentifier: \"Markers\"\n};\n\nexports.default = Markers;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Annotation = function (_Component) {\n  _inherits(Annotation, _Component);\n\n  function Annotation() {\n    _classCallCheck(this, Annotation);\n\n    return _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).apply(this, arguments));\n  }\n\n  _createClass(Annotation, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          projection = _props.projection,\n          subject = _props.subject,\n          style = _props.style,\n          dx = _props.dx,\n          dy = _props.dy,\n          zoom = _props.zoom,\n          stroke = _props.stroke,\n          strokeWidth = _props.strokeWidth,\n          children = _props.children;\n\n\n      var connectorPath = (0, _utils.createConnectorPath)(null, [-dx / zoom, -dy / zoom]);\n\n      return _react2.default.createElement(\n        \"g\",\n        {\n          className: \"rsm-annotation\",\n          style: { style: style },\n          transform: \"translate(\\n          \" + (projection()(subject)[0] + dx / zoom) + \"\\n          \" + (projection()(subject)[1] + dy / zoom) + \"\\n        )\",\n          textAnchor: (0, _utils.createTextAnchor)(dx)\n        },\n        children,\n        _react2.default.createElement(\"path\", { d: connectorPath, stroke: stroke, strokeWidth: strokeWidth })\n      );\n    }\n  }]);\n\n  return Annotation;\n}(_react.Component);\n\nAnnotation.defaultProps = {\n  componentIdentifier: \"Annotation\",\n  stroke: \"#000000\",\n  strokeWidth: 1,\n  zoom: 1\n};\n\nexports.default = Annotation;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar computeGraticule = function computeGraticule(projection, step) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().step(step)());\n};\n\nvar computeOutline = function computeOutline(projection) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().outline());\n};\n\nvar Graticule = function (_Component) {\n  _inherits(Graticule, _Component);\n\n  function Graticule() {\n    _classCallCheck(this, Graticule);\n\n    var _this = _possibleConstructorReturn(this, (Graticule.__proto__ || Object.getPrototypeOf(Graticule)).call(this));\n\n    _this.state = {\n      renderGraticule: false,\n      graticulePath: \"\",\n      outlinePath: \"\"\n    };\n    _this.renderGraticule = _this.renderGraticule.bind(_this);\n    return _this;\n  }\n\n  _createClass(Graticule, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderGraticule();\n    }\n  }, {\n    key: \"renderGraticule\",\n    value: function renderGraticule() {\n      var _props = this.props,\n          step = _props.step,\n          projection = _props.projection,\n          round = _props.round,\n          precision = _props.precision;\n\n\n      this.setState({\n        renderGraticule: true,\n        graticulePath: round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n        outlinePath: round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _props2 = this.props,\n          step = _props2.step,\n          projection = _props2.projection,\n          round = _props2.round,\n          precision = _props2.precision;\n\n\n      if (nextProps.round !== round || nextProps.precision !== precision) {\n        this.setState({\n          graticulePath: nextProps.round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n          outlinePath: nextProps.round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.disableOptimization;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          zoom = _props3.zoom,\n          style = _props3.style,\n          outline = _props3.outline,\n          fill = _props3.fill,\n          stroke = _props3.stroke;\n\n\n      return this.state.renderGraticule && _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-graticule\" },\n        _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.graticulePath,\n          style: style\n        }),\n        outline && _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.outlinePath,\n          style: style\n        })\n      );\n    }\n  }]);\n\n  return Graticule;\n}(_react.Component);\n\nGraticule.defaultProps = {\n  componentIdentifier: \"Graticule\",\n  disableOptimization: true,\n  round: true,\n  precision: 0.1,\n  step: [10, 10],\n  outline: true,\n  stroke: \"#DDDDDD\",\n  fill: \"transparent\",\n  style: {\n    pointerEvents: \"none\"\n  }\n};\n\nexports.default = Graticule;"],"sourceRoot":""}