{"version":3,"sources":["webpack:///./src/components/AuthModals/AuthModals.js","webpack:///./src/components/SignUpForm/SignUpForm.js","webpack:///./src/utils/Form/Form.jsx","webpack:///./src/utils/Button/Button.jsx","webpack:///./src/utils/Button/index.jsx","webpack:///./src/utils/Form/index.jsx","webpack:///./src/utils/validation.js"],"names":["_react","__webpack_require__","Button","React","lazy","Promise","resolve","then","t","bind","Modal","all","e","SignInForm","AuthModals","state","signIn","signUp","toggleModal","mode","_this","setState","prevProps","Component","_this2","this","_state","_react2","default","createElement","Suspense","fallback","large","action","title","visible","closeModal","body","_context2","Consumer","firebase","_SignUpForm2","_validation","SignUpForm","initialValues","email","password","confirmPassword","fieldsConfig","type","name","placeholder","_Form2","_extends","fields","validationSchema","signUpSchema","props","propTypes","PropTypes","object","Form","styled","form","_templateObject","Input","input","_templateObject2","colors","dark","accent","Error","div","_templateObject3","_styledComponents","StyledButton","button","light","isLarge","css","ButtonList","_Button","_ref","dataAttr","onClick","data-attr","oneOfType","func","string","isRequired","bool","number","defaultProps","undefined","_formik","_Form","FormTemplate","doCreateUserWithEmailAndPassword","Formik","onSubmit","values","actions","response","setSubmitting","console","log","data","error","setErrors","message","setStatus","msg","handleChange","handleBlur","handleSubmit","errors","touched","map","field","key","onChange","onBlur","value","_Button2","url","firebaseAction","arrayOf","yup","signInSchema","shape","min","required","oneOf","ref"],"mappings":"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","file":"8.js","sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport SignUpForm from \"../SignUpForm/SignUpForm\";\nimport FirebaseContext from \"../Firebase/context\";\n\nconst Button = React.lazy(() => import(\"../../utils/Button\"));\nconst Modal = React.lazy(() => import(\"../../utils/Modal\"));\nconst SignInForm = React.lazy(() => import(\"../SignInForm/SignInForm\"));\n\nclass AuthModals extends Component {\n  state = {\n    signIn: false,\n    signUp: false\n  };\n\n  toggleModal = mode => {\n    this.setState(prevProps => ({\n      [mode]: !prevProps[mode]\n    }));\n  };\n\n  render() {\n    const { signUp, signIn } = this.state;\n    return (\n      <div>\n        <Suspense fallback={<div />}>\n          <Button\n            large\n            action={() => this.toggleModal(\"signIn\")}\n            title=\"Sign in\"\n          />\n          <Button\n            large\n            action={() => this.toggleModal(\"signUp\")}\n            title=\"Sign up\"\n          />\n          <Modal\n            visible={signIn}\n            closeModal={() => this.toggleModal(\"signIn\")}\n            title=\"Sign in\"\n            body={\n              <FirebaseContext.Consumer>\n                {firebase => <SignInForm firebase={firebase} />}\n              </FirebaseContext.Consumer>\n            }\n          />\n          <Modal\n            visible={signUp}\n            closeModal={() => this.toggleModal(\"signUp\")}\n            title=\"Sign up\"\n            body={\n              <FirebaseContext.Consumer>\n                {firebase => <SignUpForm firebase={firebase} />}\n              </FirebaseContext.Consumer>\n            }\n          />\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nexport default AuthModals;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport FormTemplate from \"../../utils/Form\";\nimport { signUpSchema } from \"../../utils/validation\";\n\nclass SignUpForm extends Component {\n  state = {\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    }\n  };\n\n  fieldsConfig = [\n    { type: \"text\", name: \"email\", placeholder: \"Email\" },\n    { type: \"password\", name: \"password\", placeholder: \"Password\" },\n    {\n      type: \"password\",\n      name: \"confirmPassword\",\n      placeholder: \"Confirm password\"\n    }\n  ];\n\n  render() {\n    const { initialValues } = this.state;\n    return (\n      <FormTemplate\n        initialValues={initialValues}\n        fields={this.fieldsConfig}\n        validationSchema={signUpSchema}\n        {...this.props}\n      />\n    );\n  }\n}\n\nSignUpForm.propTypes = {\n  initialValues: PropTypes.object\n};\n\nexport default SignUpForm;\n","import styled from \"styled-components\";\nimport colors from '../../styles/globals';\n\nconst Form = styled.form`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 1rem 0;\n`;\n\nconst Input = styled.input`\n  width: 300px;\n  height: 35px;\n  border: 2px solid ${colors.dark};\n  background-color: #fff;\n  margin-bottom: 0.5rem;\n  padding: 0.25rem;\n  color: ${colors.dark};\n  font-size: 1rem;\n  \n  &:focus {\n      border: 2px solid ${colors.accent};\n      outline: none;\n  }\n`;\n\nconst Error = styled.div`\n  font-size: 0.75rem;\n  color: ${colors.accent};\n  margin-bottom: 0.5rem;\n`;\n\nexport { Form, Input, Error };\n","import styled, { css } from 'styled-components';\nimport colors from '../../styles/globals';\n\nconst StyledButton = styled.button`\n  border: 2px solid ${colors.dark};\n  background-color: ${colors.light};\n  padding: 0.5rem;\n  margin: 0.25rem;\n  color: ${colors.dark};\n  font-weight: 700;\n  cursor: pointer;\n  border-radius: 2px;\n  transition: background-color 1s;\n\n  a {\n    color: ${colors.accent};\n    text-decoration: none;\n    width: 100%;\n    height: 100%;\n    &:hover {\n      color: white;\n    }\n  }\n\n  &:hover {\n    background-color: ${colors.accent};\n    color: white;\n    a {\n      color: white;\n    }\n  }\n\n  ${props => props.isLarge\n    && css`\n      background-color: transparent;\n      border-color: ${colors.light};\n      color: ${colors.light};\n      font-size: 1rem;\n      height: 3rem;\n    `}\n`;\n\nconst ButtonList = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding-bottom: 1rem;\n`;\n\nexport { StyledButton, ButtonList };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledButton } from \"./Button\";\n\nconst Button = ({ action, title, large, dataAttr }) => (\n  <StyledButton\n    {...(typeof action === \"string\" ? { type: action } : { onClick: action })}\n    isLarge={large}\n    data-attr={dataAttr}\n  >\n    {title}\n  </StyledButton>\n);\n\nButton.propTypes = {\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  title: PropTypes.string.isRequired,\n  large: PropTypes.bool,\n  dataAttr: PropTypes.number\n};\n\nButton.defaultProps = {\n  large: false,\n  dataAttr: undefined\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport PropTypes from \"prop-types\";\n\nimport { Error, Form, Input } from \"./Form\";\nimport Button from \"../Button\";\n\nconst FormTemplate = props => {\n  const {\n    initialValues,\n    fields,\n    validationSchema,\n    firebase: { doCreateUserWithEmailAndPassword }\n  } = props;\n\n  const onSubmit = (values, actions) => {\n    doCreateUserWithEmailAndPassword(values).then(\n      response => {\n        actions.setSubmitting(false);\n        console.log(response.data);\n      },\n      error => {\n        actions.setSubmitting(false);\n        actions.setErrors(error.message);\n        actions.setStatus({ msg: error.message });\n        console.log(error.message);\n      }\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched\n      }) => {\n        return (\n          <Form onSubmit={handleSubmit}>\n            {fields.map(field => (\n              <div key={field.name}>\n                <Input\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values[field.name]}\n                  type={field.type}\n                  name={field.name}\n                  placeholder={field.placeholder}\n                />\n                {errors[field.name] && touched[field.name] ? (\n                  <Error>{errors[field.name]}</Error>\n                ) : null}\n              </div>\n            ))}\n            <Button title=\"Submit\" action=\"submit\" />\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nFormTemplate.propTypes = {\n  initialValues: PropTypes.object,\n  url: PropTypes.string,\n  firebaseAction: PropTypes.func,\n  fields: PropTypes.arrayOf(PropTypes.object),\n  validationSchema: PropTypes.object,\n  firebase: PropTypes.object\n};\n\nexport default FormTemplate;\n","import * as yup from \"yup\";\n\nconst signInSchema = yup.object().shape({\n  password: yup\n    .string()\n    .min(6, \"Your password is too short!\")\n    .required(\"This field is required!\"),\n  email: yup\n    .string()\n    .email(\"Your email is invalid!\")\n    .required(\"This field is required!\")\n});\n\nconst signUpSchema = yup.object().shape({\n  password: yup\n    .string()\n    .min(6, \"Your password is too short!\")\n    .required(\"This field is required!\"),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\n  email: yup\n    .string()\n    .email(\"Your email is invalid!\")\n    .required(\"This field is required!\")\n});\n\nexport { signInSchema, signUpSchema };\n"],"sourceRoot":""}