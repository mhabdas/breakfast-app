{"version":3,"sources":["webpack:///./src/utils/Button/Button.jsx","webpack:///./src/utils/Button/index.jsx","webpack:///./src/components/SignInForm/SignInForm.js","webpack:///./src/utils/Form/index.jsx","webpack:///./src/utils/Form/Form.jsx","webpack:///./src/utils/validation.js"],"names":["_styledComponents","__webpack_require__","StyledButton","styled","button","_templateObject","colors","dark","light","accent","props","isLarge","css","_templateObject2","ButtonList","div","_templateObject3","_Button","Button","_ref","action","title","large","dataAttr","_react2","default","createElement","_extends","type","onClick","data-attr","propTypes","PropTypes","func","isRequired","string","bool","number","defaultProps","undefined","_react","_validation","SignInForm","state","initialValues","email","password","fieldsConfig","name","placeholder","Component","this","_Form2","generateAxiosObject","fields","validationSchema","signInSchema","object","_formik","_Form","FormTemplate","firebaseAction","Formik","onSubmit","values","actions","console","log","then","response","setSubmitting","data","error","setErrors","setStatus","msg","handleChange","handleBlur","handleSubmit","errors","touched","Form","map","field","key","Input","onChange","onBlur","value","Error","_Button2","url","arrayOf","form","input","yup","shape","min","required","signUpSchema","confirmPassword","oneOf","ref"],"mappings":"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","file":"8.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport colors from '../../styles/globals';\n\nconst StyledButton = styled.button`\n  border: 2px solid ${colors.dark};\n  background-color: ${colors.light};\n  padding: 0.5rem;\n  margin: 0.25rem;\n  color: ${colors.dark};\n  font-weight: 700;\n  cursor: pointer;\n  border-radius: 2px;\n  transition: background-color 1s;\n\n  a {\n    color: ${colors.accent};\n    text-decoration: none;\n    width: 100%;\n    height: 100%;\n    &:hover {\n      color: white;\n    }\n  }\n\n  &:hover {\n    background-color: ${colors.accent};\n    color: white;\n    a {\n      color: white;\n    }\n  }\n\n  ${props => props.isLarge\n    && css`\n      background-color: transparent;\n      border-color: ${colors.light};\n      color: ${colors.light};\n      font-size: 1rem;\n      height: 3rem;\n    `}\n`;\n\nconst ButtonList = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding-bottom: 1rem;\n`;\n\nexport { StyledButton, ButtonList };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledButton } from \"./Button\";\n\nconst Button = ({ action, title, large, dataAttr }) => (\n  <StyledButton\n    {...(typeof action === \"string\" ? { type: action } : { onClick: action })}\n    isLarge={large}\n    data-attr={dataAttr}\n  >\n    {title}\n  </StyledButton>\n);\n\nButton.propTypes = {\n  action: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  large: PropTypes.bool,\n  dataAttr: PropTypes.number\n};\n\nButton.defaultProps = {\n  large: false,\n  dataAttr: undefined\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport FormTemplate from \"../../utils/Form\";\nimport { signInSchema } from \"../../utils/validation\";\n\nclass SignInForm extends Component {\n  state = {\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    }\n  };\n\n  // generateAxiosObject = values => {\n  //   return {\n  //     method: \"POST\",\n  //     url: SIGN_IN_URL,\n  //     data: {\n  //       email: values.email,\n  //       password: values.password,\n  //       returnSecureToken: true\n  //     },\n  //     header: {\n  //       \"Content-Type\": \"application/json\"\n  //     }\n  //   };\n  // };\n\n  fieldsConfig = [\n    { type: \"text\", name: \"email\", placeholder: \"Email\" },\n    { type: \"password\", name: \"password\", placeholder: \"Password\" },\n  ];\n\n  render() {\n    const { initialValues } = this.state;\n    return (\n      <FormTemplate\n        initialValues={initialValues}\n        generateAxiosObject={this.generateAxiosObject}\n        fields={this.fieldsConfig}\n        validationSchema={signInSchema}\n      />\n    );\n  }\n}\n\nSignInForm.propTypes = {\n  initialValues: PropTypes.object\n};\n\nexport default SignInForm;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport PropTypes from \"prop-types\";\n\nimport { Error, Form, Input } from \"./Form\";\nimport Button from \"../Button\";\n\nconst FormTemplate = props => {\n  const {\n    initialValues,\n    firebaseAction,\n    fields,\n    validationSchema,\n  } = props;\n\n  const onSubmit = (values, actions) => {\n    console.log(values);\n    firebaseAction(values).then(\n      response => {\n        actions.setSubmitting(false);\n        console.log(response.data);\n      },\n      error => {\n        actions.setSubmitting(false);\n        actions.setErrors(error.response.data.error);\n        actions.setStatus({ msg: \"Error\" });\n        console.log(error.response.data.error);\n      }\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched\n      }) => {\n        return (\n          <Form onSubmit={handleSubmit}>\n            {fields.map(field => (\n              <div key={field.name}>\n                <Input\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values[field.name]}\n                  type={field.type}\n                  name={field.name}\n                  placeholder={field.placeholder}\n                />\n                {errors[field.name] && touched[field.name] ? (\n                  <Error>{errors[field.name]}</Error>\n                ) : null}\n              </div>\n            ))}\n            <Button title=\"Submit\" action=\"submit\" />\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nFormTemplate.propTypes = {\n  initialValues: PropTypes.object,\n  url: PropTypes.string,\n  firebaseAction: PropTypes.func,\n  fields: PropTypes.arrayOf(PropTypes.object),\n  validationSchema: PropTypes.object\n};\n\nexport default FormTemplate;\n","import styled from \"styled-components\";\nimport colors from '../../styles/globals';\n\nconst Form = styled.form`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 1rem 0;\n`;\n\nconst Input = styled.input`\n  width: 300px;\n  height: 35px;\n  border: 2px solid ${colors.dark};\n  background-color: #fff;\n  margin-bottom: 0.5rem;\n  padding: 0.25rem;\n  color: ${colors.dark};\n  font-size: 1rem;\n  \n  &:focus {\n      border: 2px solid ${colors.accent};\n      outline: none;\n  }\n`;\n\nconst Error = styled.div`\n  font-size: 0.75rem;\n  color: ${colors.accent};\n  margin-bottom: 0.5rem;\n`;\n\nexport { Form, Input, Error };\n","import * as yup from \"yup\";\n\nconst signInSchema = yup.object().shape({\n  password: yup\n    .string()\n    .min(6, \"Your password is too short!\")\n    .required(\"This field is required!\"),\n  email: yup\n    .string()\n    .email(\"Your email is invalid!\")\n    .required(\"This field is required!\")\n});\n\nconst signUpSchema = yup.object().shape({\n  password: yup\n    .string()\n    .min(6, \"Your password is too short!\")\n    .required(\"This field is required!\"),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\n  email: yup\n    .string()\n    .email(\"Your email is invalid!\")\n    .required(\"This field is required!\")\n});\n\nexport { signInSchema, signUpSchema };\n"],"sourceRoot":""}