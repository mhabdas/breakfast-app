{"version":3,"sources":["webpack:///./src/components/Map/index.jsx","webpack:///./src/components/Map/Map.jsx"],"names":["_reactSimpleMaps","__webpack_require__","primaryMap","fill","colors","secondary","stroke","dark","strokeWidth","outline","cursor","transition","secondaryMap","light","pressedMap","Map","props","data","center","zoom","geoUrl","handleClick","_react2","default","createElement","_Map2","ComposableMap","projectionConfig","scale","width","height","style","ZoomableGroup","Geographies","geographyUrl","geographies","projection","map","geography","Geography","key","properties","NAME","data-country","el","name","includes","hover","pressed","onClick","round","className","propTypes","PropTypes","arrayOf","object","number","isRequired","string","func","defaultProps","StyledMap","styled","div","_templateObject"],"mappings":"kTAAAA,EAAAC,EAAA,QAMAA,EAAA,QACAA,EAAA,SACAA,EAAA,QACAA,EAAA,wDAEA,IAAMC,EAAa,CACjBC,KAAMC,UAAOC,UACbC,OAAQF,UAAOG,KACfC,YAAa,IACbC,QAAS,OACTC,OAAQ,UACRC,WAAY,YAGRC,EAAe,CACnBT,KAAMC,UAAOS,MACbP,OAAQF,UAAOG,KACfC,YAAa,IACbC,QAAS,OACTE,WAAY,YAGRG,EAAa,CACjBX,KAAMC,UAAOS,MACbP,OAAQF,UAAOG,KACfC,YAAa,IACbC,QAAS,OACTC,OAAQ,UACRC,WAAY,YAGRI,EAAM,SAACC,GAAU,IAEnBC,EACED,EADFC,KAAMC,EACJF,EADIE,OAAQC,EACZH,EADYG,KAAMC,EAClBJ,EADkBI,OAAQC,EAC1BL,EAD0BK,YAG9B,OACEC,EAAAC,QAAAC,cAACC,EAAAF,QAAD,KACED,EAAAC,QAAAC,cAACxB,EAAA0B,cAAD,CACEC,iBAAkB,CAChBC,MAAO,KAETC,MAAO,IACPC,OAAQ,IACRC,MAAO,CACLF,MAAO,OACPC,OAAQ,SAGTb,EACCK,EAAAC,QAAAC,cAACxB,EAAAgC,cAAD,CAAed,OAAQA,EAAQC,KAAMA,GACnCG,EAAAC,QAAAC,cAACxB,EAAAiC,YAAD,CAAaC,aAAcd,GACxB,SAACe,EAAaC,GAAd,OAA6BD,EAAYE,IAAI,SAAAC,GAAA,OAC5ChB,EAAAC,QAAAC,cAACxB,EAAAuC,UAAD,CACEC,IAAKF,EAAUG,WAAWC,KAC1BJ,UAAWA,EACXK,eAAcL,EAAUG,WAAWC,KACnCN,WAAYA,EACZL,MACId,EACGoB,IAAI,SAAAO,GAAA,OAAMA,EAAGC,OACbC,SAASR,EAAUG,WAAWC,MAC7B,CACAnB,aAAcrB,GACd6C,WAAYjC,GACZkC,aAAclC,IAEd,CACAS,aAAcX,GACdmC,WAAYnC,GACZoC,aAAcpC,IAGtBqC,QACIhC,EACGoB,IAAI,SAAAO,GAAA,OAAMA,EAAGC,OACbC,SAASR,EAAUG,WAAWC,OAASrB,EAE9C6B,OAAA,SAOR5B,EAAAC,QAAAC,cAAA,OAAK2B,UAAU,oBACb7B,EAAAC,QAAAC,cAAA,OAAK2B,UAAU,+BACf7B,EAAAC,QAAAC,cAAA,OAAK2B,UAAU,mCAQ3BpC,EAAIqC,UAAY,CACdnC,KAAMoC,UAAUC,QAAQD,UAAUE,QAClCrC,OAAQmC,UAAUC,QAAQD,UAAUG,QAAQC,WAC5CtC,KAAMkC,UAAUG,OAAOC,WACvBrC,OAAQiC,UAAUK,OAAOD,WACzBpC,YAAagC,UAAUM,KAAKF,YAG9B1C,EAAI6C,aAAe,CACjB3C,KAAM,gBAGOF,qeCjHfd,EAAA,QACAA,EAAA,wDAEA,IAAM4D,EAAYC,UAAOC,IAAnBC,EACgB5D,UAAOG,gBASdsD","file":"6.js","sourcesContent":["import {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from 'react-simple-maps';\nimport PropTypes from 'prop-types';\nimport colors from '../../styles/globals';\nimport React from \"react\";\nimport StyledMap from \"./Map\";\n\nconst primaryMap = {\n  fill: colors.secondary,\n  stroke: colors.dark,\n  strokeWidth: 0.65,\n  outline: 'none',\n  cursor: 'pointer',\n  transition: 'fill .5s',\n};\n\nconst secondaryMap = {\n  fill: colors.light,\n  stroke: colors.dark,\n  strokeWidth: 0.65,\n  outline: 'none',\n  transition: 'fill .5s',\n};\n\nconst pressedMap = {\n  fill: colors.light,\n  stroke: colors.dark,\n  strokeWidth: 0.65,\n  outline: 'none',\n  cursor: 'pointer',\n  transition: 'fill .5s',\n};\n\nconst Map = (props) => {\n  const {\n    data, center, zoom, geoUrl, handleClick,\n  } = props;\n\n  return (\n    <StyledMap>\n      <ComposableMap\n        projectionConfig={{\n          scale: 220,\n        }}\n        width={980}\n        height={551}\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      >\n        {data ? (\n          <ZoomableGroup center={center} zoom={zoom}>\n            <Geographies geographyUrl={geoUrl}>\n              {(geographies, projection) => geographies.map(geography => (\n                <Geography\n                  key={geography.properties.NAME}\n                  geography={geography}\n                  data-country={geography.properties.NAME}\n                  projection={projection}\n                  style={\n                      data\n                        .map(el => el.name)\n                        .includes(geography.properties.NAME)\n                        ? {\n                          default: { ...primaryMap },\n                          hover: { ...pressedMap },\n                          pressed: { ...pressedMap },\n                        }\n                        : {\n                          default: { ...secondaryMap },\n                          hover: { ...secondaryMap },\n                          pressed: { ...secondaryMap },\n                        }\n                    }\n                  onClick={\n                      data\n                        .map(el => el.name)\n                        .includes(geography.properties.NAME) && handleClick\n                    }\n                  round\n                />\n              ))\n              }\n            </Geographies>\n          </ZoomableGroup>\n        ) : (\n          <div className=\"sk-double-bounce\">\n            <div className=\"sk-child sk-double-bounce1\" />\n            <div className=\"sk-child sk-double-bounce2\" />\n          </div>\n        )}\n      </ComposableMap>\n    </StyledMap>\n  );\n};\n\nMap.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n  zoom: PropTypes.number.isRequired,\n  geoUrl: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nMap.defaultProps = {\n  data: null,\n};\n\nexport default Map;\n","import styled from 'styled-components';\nimport colors from '../../styles/globals';\n\nconst StyledMap = styled.div`\n  border: 2px solid ${colors.dark};\n  border-radius: 2px;\n  width: 60vw;\n  margin: 0 auto;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n`;\n\nexport default StyledMap;\n"],"sourceRoot":""}