{"version":3,"sources":["webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/polygon.js","webpack:///./node_modules/d3-geo/src/clip/extent.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/distance.js","webpack:///./node_modules/d3-geo/src/contains.js","webpack:///./node_modules/d3-geo/src/graticule.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/albersUsa.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/conicConformal.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/identity.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-geo/index.js","webpack:///./node_modules/react-simple-maps/lib/projectionConfig.js","webpack:///./node_modules/react-simple-maps/lib/index.js","webpack:///./node_modules/react-simple-maps/lib/ComposableMap.js","webpack:///./node_modules/react-simple-maps/lib/projections.js","webpack:///./node_modules/react-simple-maps/lib/ZoomableGroup.js","webpack:///./node_modules/react-simple-maps/lib/Geographies.js","webpack:///./node_modules/react-simple-maps/lib/Geography.js","webpack:///./node_modules/react-simple-maps/lib/Marker.js","webpack:///./node_modules/react-simple-maps/lib/Markers.js","webpack:///./node_modules/react-simple-maps/lib/Annotation.js","webpack:///./node_modules/react-simple-maps/lib/Graticule.js","webpack:///./node_modules/d3-geo-projection/src/math.js","webpack:///./node_modules/d3-geo-projection/src/airy.js","webpack:///./node_modules/d3-geo-projection/src/aitoff.js","webpack:///./node_modules/d3-geo-projection/src/armadillo.js","webpack:///./node_modules/d3-geo-projection/src/august.js","webpack:///./node_modules/d3-geo-projection/src/baker.js","webpack:///./node_modules/d3-geo-projection/src/berghaus.js","webpack:///./node_modules/d3-geo-projection/src/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/boggs.js","webpack:///./node_modules/d3-geo-projection/src/parallel1.js","webpack:///./node_modules/d3-geo-projection/src/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/bonne.js","webpack:///./node_modules/d3-geo-projection/src/bottomley.js","webpack:///./node_modules/d3-geo-projection/src/bromley.js","webpack:///./node_modules/d3-geo-projection/src/chamberlin.js","webpack:///./node_modules/d3-geo-projection/src/collignon.js","webpack:///./node_modules/d3-geo-projection/src/craig.js","webpack:///./node_modules/d3-geo-projection/src/craster.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack:///./node_modules/d3-geo-projection/src/eckert1.js","webpack:///./node_modules/d3-geo-projection/src/eckert2.js","webpack:///./node_modules/d3-geo-projection/src/eckert3.js","webpack:///./node_modules/d3-geo-projection/src/eckert4.js","webpack:///./node_modules/d3-geo-projection/src/eckert5.js","webpack:///./node_modules/d3-geo-projection/src/eckert6.js","webpack:///./node_modules/d3-geo-projection/src/eisenlohr.js","webpack:///./node_modules/d3-geo-projection/src/fahey.js","webpack:///./node_modules/d3-geo-projection/src/foucaut.js","webpack:///./node_modules/d3-geo-projection/src/gilbert.js","webpack:///./node_modules/d3-geo-projection/src/gingery.js","webpack:///./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg4.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg5.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg6.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg8.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg9.js","webpack:///./node_modules/d3-geo-projection/src/square.js","webpack:///./node_modules/d3-geo-projection/src/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/elliptic.js","webpack:///./node_modules/d3-geo-projection/src/guyou.js","webpack:///./node_modules/d3-geo-projection/src/hammer.js","webpack:///./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack:///./node_modules/d3-geo-projection/src/healpix.js","webpack:///./node_modules/d3-geo-projection/src/hill.js","webpack:///./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/index.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack:///./node_modules/d3-geo-projection/src/lagrange.js","webpack:///./node_modules/d3-geo-projection/src/larrivee.js","webpack:///./node_modules/d3-geo-projection/src/laskowski.js","webpack:///./node_modules/d3-geo-projection/src/littrow.js","webpack:///./node_modules/d3-geo-projection/src/loximuthal.js","webpack:///./node_modules/d3-geo-projection/src/miller.js","webpack:///./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/naturalEarth.js","webpack:///./node_modules/d3-geo-projection/src/nellHammer.js","webpack:///./node_modules/d3-geo-projection/src/patterson.js","webpack:///./node_modules/d3-geo-projection/src/polyconic.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack:///./node_modules/d3-geo-projection/src/noop.js","webpack:///./node_modules/d3-geo-projection/src/project/index.js","webpack:///./node_modules/d3-geo-projection/src/project/clockwise.js","webpack:///./node_modules/d3-geo-projection/src/project/contains.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack:///./node_modules/d3-geo-projection/src/quantize.js","webpack:///./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/robinson.js","webpack:///./node_modules/d3-geo-projection/src/satellite.js","webpack:///./node_modules/d3-geo-projection/src/stitch.js","webpack:///./node_modules/d3-geo-projection/src/times.js","webpack:///./node_modules/d3-geo-projection/src/twoPoint.js","webpack:///./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack:///./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack:///./node_modules/d3-geo-projection/src/wagner4.js","webpack:///./node_modules/d3-geo-projection/src/wagner6.js","webpack:///./node_modules/d3-geo-projection/src/wagner7.js","webpack:///./node_modules/d3-geo-projection/src/wiechel.js","webpack:///./node_modules/d3-geo-projection/src/winkel3.js","webpack:///./node_modules/d3-geo-projection/index.js","webpack:///./node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson-client/src/bbox.js","webpack:///./node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson-client/src/stitch.js","webpack:///./node_modules/topojson-client/src/mesh.js","webpack:///./node_modules/topojson-client/src/merge.js","webpack:///./node_modules/topojson-client/src/bisect.js","webpack:///./node_modules/topojson-client/src/neighbors.js","webpack:///./node_modules/topojson-client/src/quantize.js","webpack:///./node_modules/topojson-client/src/untransform.js","webpack:///./node_modules/topojson-client/index.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/cross.js","webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-array/src/threshold/sturges.js","webpack:///./node_modules/d3-array/src/merge.js","webpack:///./node_modules/d3-array/src/index.js","webpack:///./node_modules/react-simple-maps/lib/utils.js"],"names":["adder","Adder","this","reset","prototype","constructor","s","t","add","y","temp","valueOf","a","b","x","bv","av","epsilon","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","ceil","exp","log","floor","pow","sin","math_sign","sign","sqrt","tan","acos","asin","haversin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","i","n","length","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","src_area","cartesian_spherical","cartesian","cartesian_cartesian","spherical","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","d","l","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","range","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","push","bounds_linePoint","p","normal","inflection","phii","delta","lambdai","antimeridian","bounds_angle","lambda0","lambda1","rangeCompare","rangeContains","W0","W1","centroid_X0","centroid_Y0","Z0","centroid_X1","centroid_Y1","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","z0","bounds","feature","merged","deltaMax","Infinity","sort","NaN","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","z","centroidLinePointFirst","centroidLinePoint","w","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","m","centroid","constant","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","rotate","forward","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","step","circleRadius","src_circle","ring","center","precision","circle","c","apply","arguments","r","_","buffer","line","lines","rejoin","pop","concat","shift","result","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","pointEqual","Intersection","points","other","entry","o","e","clip_polygon","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","polygon_link","start","current","isSubject","array","clipMax","clipMin","extent_clipExtent","visible","from","to","a1","corner","comparePoint","ca","cb","polygon","x__","y__","v__","x_","y_","v_","first","clean","activeStream","bufferStream","clipStream","linePoint","winding","a0","j","b0","b1","polygonInside","cleanInside","Object","src","max","min","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","extent","sum","polygonContains","angle","point0","phi0","sinPhi0","cosPhi0","sinPhi1","cosPhi1","point1","phi1","absDelta","arc","intersection","phiArc","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","distance","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ab","map","ringRadians","pointRadians","contains","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","filter","outline","slice","reverse","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","A","identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","src_path","projection","projectionStream","contextStream","path","src_clip","pointVisible","clipLine","sink","rotatedStart","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","ringSegments","validSegment","clip_antimeridian","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","clip_circle","cr","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","q","polar","q1","code","c0","v0","v00","point2","src_transform","methods","transformer","TransformStream","key","fitExtent","h","clipExtent","scale","translate","fitSize","size","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","projection_projection","projectionMutator","projectAt","projectRotate","theta","preclip","postclip","projectResample","projectTransform","recenter","clipAngle","conicProjection","parallels","conicEqualAreaRaw","cylindricalEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercatorRaw","mercator","mercatorProjection","reclip","tany","conicConformalRaw","f","fy","conicConformal","equirectangularRaw","equirectangular","conicEquidistantRaw","g","gy","nx","conicEquidistant","gnomonicRaw","gnomonic","scaleTranslate","kx","ky","tx","ty","projection_identity","sx","sy","transform","reflectX","reflectY","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","transverseMercator","__webpack_require__","__webpack_exports__","defineProperty","exports","value","default","xOffset","yOffset","_ComposableMap","enumerable","get","_interopRequireDefault","_ZoomableGroup","_Geographies","_Geography","_Marker","_Markers","_Annotation","_Graticule","obj","__esModule","_createClass","defineProperties","target","props","descriptor","configurable","writable","Constructor","protoProps","staticProps","_react","_react2","_projections2","_projectionConfig2","ComposableMap","_Component","instance","TypeError","_classCallCheck","_this","self","call","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","bind","subClass","superClass","create","setPrototypeOf","_inherits","Component","_props","projectionConfig","width","height","_props2","style","showCenter","children","createElement","viewBox","className","cloneElement","fill","defaultProps","config","projectionName","projectionReference","_d3GeoProjection","_d3Geo","_projectionConfig","geoMercator","miller","geoMiller","times","geoTimes","robinson","geoRobinson","winkel3","geoWinkel3","eckert4","geoEckert4","_utils","ZoomableGroup","backdropX","backdrop","backdropY","backdropWidth","backdropHeight","state","mouseX","calculateMousePosition","zoom","mouseY","mouseXStart","mouseYStart","isPressed","resizeFactorX","resizeFactorY","round","handleMouseMove","handleMouseUp","handleMouseDown","handleResize","_ref","pageX","pageY","disablePanning","setState","_ref2","nextProps","_state","zoomFactor","centerChanged","JSON","stringify","calculateResizeFactor","zoomableGroupNode","parentNode","getBoundingClientRect","xPercentageChange","yPercentageChange","_props3","window","addEventListener","removeEventListener","_this2","_props4","_state2","ref","onMouseMove","onMouseUp","onMouseDown","strokeWidth","createNewChildren","_topojsonClient","Geographies","geographyPaths","fetchGeographies","geographyUrl","request","XMLHttpRequest","open","onload","status","parse","responseText","objects","keys","onGeographiesLoaded","onGeographyPathsLoaded","String","onerror","console","send","nextState","geoPathsChanged","choroplethChanged","choropleth","disableOptimization","componentIdentifier","_extends","assign","source","pathCache","Geography","hover","pressed","handleMouseEnter","handleMouseLeave","handleMouseClick","handleFocus","handleBlur","evt","persist","onClick","geography","onMouseEnter","onMouseLeave","_props5","_props6","_props7","onFocus","_props8","onBlur","_props9","cacheId","tabable","pathString","roundPath","geoPath","renderPath","excludeProps","restProps","indexOf","reduce","tabIndex","Marker","marker","Markers","undefined","child","Annotation","stroke","connectorPath","createConnectorPath","textAnchor","createTextAnchor","computeGraticule","geoGraticule","computeOutline","Graticule","renderGraticule","graticulePath","outlinePath","pointerEvents","math_epsilon","epsilon2","sqrt1_2","SQRT1_2","sqrt2","sqrtPi","sinh","cosh","airyRaw","beta","tanBeta_2","cosx","cosy","siny","cosz","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","airy","d3_geo","aitoffRaw","sincia","sinci","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","fx","dxdx","dxdy","dydx","dydy","aitoff","armadilloRaw","sPhi0","tanPhi0","cosLambda","sinLambda","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dPhi","armadillo","stream_","parallel","rotateStream","sphereStream","augustRaw","tanPhi","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","august","sqrt8","baker_phi0","bakerRaw","cosPhi_2","tanPhi_2","baker","berghausRaw","lobes","theta0","α","cotα","berghaus","sr","delta0","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","mollweideRaw","mollweide","boggs_k","boggs_w","boggsRaw","boggs","parallel1","sinusoidalRaw","sinusoidal","bonneRaw","cotPhi0","rho","bonne","bottomleyRaw","sinPsi","bottomley","fraction","bromleyRaw","bromley","chamberlin_distance","s1","s2","cosdLambda","sindPhi","sindLambda","longitude","chamberlinRaw","p2","beta0","beta1","beta2","mean","Array","chamberlinAfrica","chamberlin","R","collignonRaw","alpha","collignon","craigRaw","cosλ","craig","sqrt3","crasterRaw","craster","cylindricalEqualArea","cylindricalStereographicRaw","cylindricalStereographic","eckert1Raw","eckert1","eckert2Raw","eckert2","eckert3Raw","eckert3","eckert4Raw","eckert5Raw","eckert5","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","_0","_1","cos1","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","eisenlohr","faheyK","faheyRaw","fahey","foucautRaw","cosk","foucaut","gilbertForward","gilbertInvert","src_gilbert","projectionType","gilbert","property","name","gingeryRaw","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","gingery","cRho","sRho","ginzburgPolyconic","xB","yB","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg4","ginzburg5Raw","ginzburg5","ginzburg6Raw","ginzburg6","ginzburg8Raw","lambda4","ginzburg8","ginzburg9Raw","ginzburg9","square","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","g2","zetaMug","f2","df","gringortenHexadecant","gringortenHexadecantInvert","gringorten","ellipticJ","ai","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","tn","guyouComplexDivide","guyou","hammerRaw","hammerQuarticAuthalicRaw","hammer","coefficient","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","hammerRetroazimuthal","rotate_","healpixParallel","healpixLambert","healpixRaw","H","dy1","healpix","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","hill","ratio","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","sinuMollweide","homolosineRaw","homolosine","interpolateLine","resampled","interrupted","lobe","interpolateSphere","bound","boggs_lobes","interrupted_boggs","homolosine_lobes","interrupted_homolosine","mollweide_lobes","interrupted_mollweide","mollweideHemispheres_lobes","mollweideHemispheres","sinuMollweide_lobes","interrupted_sinuMollweide","sinusoidal_lobes","interrupted_sinusoidal","kavrayskiy7Raw","kavrayskiy7","lagrangeRaw","lagrange","spacing","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","f0","f1","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","larrivee","laskowskiRaw","lambdaPhi","laskowski","littrowRaw","y2_1","littrow","loximuthalRaw","loximuthal","millerRaw","modifiedStereographicRaw","zr","zi","ar","br","bi","deltar","deltai","sinc","gs48","gs50","modifiedStereographic_miller","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarParabolic","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarQuartic","mtFlatPolarSinusoidalRaw","mtFlatPolarSinusoidal","naturalEarthRaw","phi4","naturalEarth","nellHammerRaw","nellHammer","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","patterson","polyconicRaw","polyconic","matrix","subtract","matrix_angle","matrix_length","multiply","polyhedral","root","face","node","recurse","parent","edges","faceEdges","shared","found","sharedEdge","polyhedral_pointEqual","hasInverse","faceInvert","faceDegrees","proj","edge","multiPoint","notPoles","inside","isArray","some","octahedron","polyhedral_octahedron","butterfly","faceProjection","faces","collignonK","polyhedral_collignon","waterman","w5","xyz","waterman_cartesian","hexagon","cornerNormals","parents","normals","cosphi","dot","src_project","Error","projectFeature","projectFeatureCollection","projectGeometry","id","properties","projectGeometryCollection","sinkPoint","sinkLine","sinkPolygon","project_points","polygons","holes","clockwise","hole","yi","pj","xj","yj","quincuncial","projectQuincuncial","quincuncial_gringorten","peirce","quantize","digits","quantizePoint","toFixed","quantizePoints","quantizePolygon","quantizeGeometry","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","rectangularPolyconic","robinson_K","robinsonRaw","i0","di","bx","by","yy","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","satellite","tilt","epsilonInverse","stitch_x0","x0e","stitch_x1","x1e","stitch_y0","y0e","stitch_y1","y1e","normalizePoint","clampPoint","clampPoints","extractFragments","fragments","pointk","xk","yk","fragmentBefore","stitchFeature","stitchGeometry","fragment","startFragment","end","endFragment","fragmentByStart","fragmentByEnd","index","stitchFragments","stitch","timesRaw","twoPoint","raw","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPointEquidistantRaw","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","G","P2","P2_A2","G_P2","Q","x2_y2","c3","m1","theta1","vanDerGrinten","vanDerGrinten2Raw","vanDerGrinten2","vanDerGrinten3Raw","vanDerGrinten3","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","vanDerGrinten4","wagner4_A","wagner4_B","wagner4Raw","wagner4","wagner6Raw","wagner6","wagner7Raw","wagner7","wiechelRaw","sin1_Phi","wiechel","winkel3Raw","F","sinphi","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","topology","src_bbox","bbox","bboxPoint","bboxGeometry","arcs","feature_feature","feature_object","transformPoint","stitchedArcs","emptyIndex","flush","dp","ends","fg","unshift","gf","mesh","meshArcs","geom","geomsByArc","extract0","extract1","extract2","extract3","geoms","extractArcs","merge","mergeArcs","polygonsByArc","groups","extract","planarRingArea","group","neighbors","ki","bisect","lo","hi","mid","src_neighbors","indexesByArc","geometryType","indexes","ij","ik","splice","bb","untransform","ascending","compare","array_array","stop","arrays","replaceStrokeWidth","styles","newStyles","createChoroplethStyles","choroplethValue","actualDimension","baseDimension","resizeFactor","reference","reverseRotation","item","isChildOfType","replace","connectorType","endPoint","expectedType"],"mappings":"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","file":"6.js","sourcesContent":["// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipPolygon from \"./polygon\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport function clipExtent(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    return this._circle = circle(_), this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","import clipBuffer from \"./buffer\";\nimport clipPolygon from \"./polygon\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(rotate, sink) {\n    var line = clipLine(sink),\n        rotatedStart = rotate.invert(start[0], start[1]),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, rotatedStart);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      var point = rotate(lambda, phi);\n      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      var point = rotate(lambda, phi);\n      line.point(point[0], point[1]);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      var point = rotate(lambda, phi);\n      ringSink.point(point[0], point[1]);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius, delta) {\n  var cr = cos(radius),\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nexport function fitExtent(projection, extent, object) {\n  var w = extent[1][0] - extent[0][0],\n      h = extent[1][1] - extent[0][1],\n      clip = projection.clipExtent && projection.clipExtent();\n\n  projection\n      .scale(150)\n      .translate([0, 0]);\n\n  if (clip != null) projection.clipExtent(null);\n\n  geoStream(object, projection.stream(boundsStream));\n\n  var b = boundsStream.result(),\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\n  if (clip != null) projection.clipExtent(clip);\n\n  return projection\n      .scale(k * 150)\n      .translate([x, y]);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {clipExtent} from \"../clip/extent\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, clip = identity, // clip extent\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    }\n  };\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export {default as geoArea} from \"./src/area\";\nexport {default as geoBounds} from \"./src/bounds\";\nexport {default as geoCentroid} from \"./src/centroid\";\nexport {default as geoCircle} from \"./src/circle\";\nexport {default as geoClipExtent} from \"./src/clip/extent\"; // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\nexport {default as geoContains} from \"./src/contains\";\nexport {default as geoDistance} from \"./src/distance\";\nexport {default as geoGraticule, graticule10 as geoGraticule10} from \"./src/graticule\";\nexport {default as geoInterpolate} from \"./src/interpolate\";\nexport {default as geoLength} from \"./src/length\";\nexport {default as geoPath} from \"./src/path/index\";\nexport {default as geoAlbers} from \"./src/projection/albers\";\nexport {default as geoAlbersUsa} from \"./src/projection/albersUsa\";\nexport {default as geoAzimuthalEqualArea, azimuthalEqualAreaRaw as geoAzimuthalEqualAreaRaw} from \"./src/projection/azimuthalEqualArea\";\nexport {default as geoAzimuthalEquidistant, azimuthalEquidistantRaw as geoAzimuthalEquidistantRaw} from \"./src/projection/azimuthalEquidistant\";\nexport {default as geoConicConformal, conicConformalRaw as geoConicConformalRaw} from \"./src/projection/conicConformal\";\nexport {default as geoConicEqualArea, conicEqualAreaRaw as geoConicEqualAreaRaw} from \"./src/projection/conicEqualArea\";\nexport {default as geoConicEquidistant, conicEquidistantRaw as geoConicEquidistantRaw} from \"./src/projection/conicEquidistant\";\nexport {default as geoEquirectangular, equirectangularRaw as geoEquirectangularRaw} from \"./src/projection/equirectangular\";\nexport {default as geoGnomonic, gnomonicRaw as geoGnomonicRaw} from \"./src/projection/gnomonic\";\nexport {default as geoIdentity} from \"./src/projection/identity\";\nexport {default as geoProjection, projectionMutator as geoProjectionMutator} from \"./src/projection/index\";\nexport {default as geoMercator, mercatorRaw as geoMercatorRaw} from \"./src/projection/mercator\";\nexport {default as geoOrthographic, orthographicRaw as geoOrthographicRaw} from \"./src/projection/orthographic\";\nexport {default as geoStereographic, stereographicRaw as geoStereographicRaw} from \"./src/projection/stereographic\";\nexport {default as geoTransverseMercator, transverseMercatorRaw as geoTransverseMercatorRaw} from \"./src/projection/transverseMercator\";\nexport {default as geoRotation} from \"./src/rotation\";\nexport {default as geoStream} from \"./src/stream\";\nexport {default as geoTransform} from \"./src/transform\";\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  scale: 160,\n  xOffset: 0,\n  yOffset: 0,\n  rotation: [0, 0, 0],\n  precision: 0.1\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ComposableMap = require(\"./ComposableMap\");\n\nObject.defineProperty(exports, \"ComposableMap\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ComposableMap).default;\n  }\n});\n\nvar _ZoomableGroup = require(\"./ZoomableGroup\");\n\nObject.defineProperty(exports, \"ZoomableGroup\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ZoomableGroup).default;\n  }\n});\n\nvar _Geographies = require(\"./Geographies\");\n\nObject.defineProperty(exports, \"Geographies\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geographies).default;\n  }\n});\n\nvar _Geography = require(\"./Geography\");\n\nObject.defineProperty(exports, \"Geography\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geography).default;\n  }\n});\n\nvar _Marker = require(\"./Marker\");\n\nObject.defineProperty(exports, \"Marker\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Marker).default;\n  }\n});\n\nvar _Markers = require(\"./Markers\");\n\nObject.defineProperty(exports, \"Markers\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Markers).default;\n  }\n});\n\nvar _Annotation = require(\"./Annotation\");\n\nObject.defineProperty(exports, \"Annotation\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Annotation).default;\n  }\n});\n\nvar _Graticule = require(\"./Graticule\");\n\nObject.defineProperty(exports, \"Graticule\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Graticule).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _projections = require(\"./projections\");\n\nvar _projections2 = _interopRequireDefault(_projections);\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ComposableMap = function (_Component) {\n  _inherits(ComposableMap, _Component);\n\n  function ComposableMap() {\n    _classCallCheck(this, ComposableMap);\n\n    var _this = _possibleConstructorReturn(this, (ComposableMap.__proto__ || Object.getPrototypeOf(ComposableMap)).call(this));\n\n    _this.projection = _this.projection.bind(_this);\n    return _this;\n  }\n\n  _createClass(ComposableMap, [{\n    key: \"projection\",\n    value: function projection() {\n      var _props = this.props,\n          projection = _props.projection,\n          projectionConfig = _props.projectionConfig,\n          width = _props.width,\n          height = _props.height;\n\n\n      return typeof projection !== \"function\" ? (0, _projections2.default)(width, height, projectionConfig, projection) : projection(width, height, projectionConfig);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          style = _props2.style,\n          showCenter = _props2.showCenter,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"svg\",\n        { width: width,\n          height: height,\n          viewBox: \"0 0 \" + width + \" \" + height,\n          className: \"rsm-svg\",\n          style: style },\n        _react2.default.cloneElement(this.props.children, {\n          projection: this.projection,\n          width: width,\n          height: height\n        }),\n        showCenter && _react2.default.createElement(\n          \"g\",\n          null,\n          _react2.default.createElement(\"rect\", { x: width / 2 - 0.5, y: 0, width: 1, height: height, fill: \"#e91e63\" }),\n          _react2.default.createElement(\"rect\", { x: 0, y: height / 2 - 0.5, width: width, height: 1, fill: \"#e91e63\" })\n        )\n      );\n    }\n  }]);\n\n  return ComposableMap;\n}(_react.Component);\n\nComposableMap.defaultProps = {\n  width: 800,\n  height: 450,\n  projection: \"times\",\n  projectionConfig: _projectionConfig2.default\n};\n\nexports.default = ComposableMap;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (width, height, config, projectionName) {\n\n  var scale = config.scale || _projectionConfig2.default.scale;\n  var xOffset = config.xOffset || _projectionConfig2.default.xOffset;\n  var yOffset = config.yOffset || _projectionConfig2.default.yOffset;\n  var rotation = config.rotation || _projectionConfig2.default.rotation;\n  var precision = config.precision || _projectionConfig2.default.precision;\n\n  return projectionReference[projectionName]().scale(scale).translate([xOffset + width / 2, yOffset + height / 2]).rotate(rotation).precision(precision);\n};\n\nvar _d3GeoProjection = require(\"d3-geo-projection\");\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar projectionReference = {\n  mercator: _d3Geo.geoMercator,\n  miller: _d3GeoProjection.geoMiller,\n  times: _d3GeoProjection.geoTimes,\n  robinson: _d3GeoProjection.geoRobinson,\n  winkel3: _d3GeoProjection.geoWinkel3,\n  eckert4: _d3GeoProjection.geoEckert4\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ZoomableGroup = function (_Component) {\n  _inherits(ZoomableGroup, _Component);\n\n  function ZoomableGroup(props) {\n    _classCallCheck(this, ZoomableGroup);\n\n    var _this = _possibleConstructorReturn(this, (ZoomableGroup.__proto__ || Object.getPrototypeOf(ZoomableGroup)).call(this, props));\n\n    var backdropX = props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropY = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n    var backdropWidth = props.projection().rotate([0, 0, 0])([props.backdrop.x[1], 0])[0] - props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropHeight = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[1]])[1] - props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n\n    _this.state = {\n      mouseX: (0, _utils.calculateMousePosition)(\"x\", props.projection, props, props.zoom, 1),\n      mouseY: (0, _utils.calculateMousePosition)(\"y\", props.projection, props, props.zoom, 1),\n      mouseXStart: 0,\n      mouseYStart: 0,\n      isPressed: false,\n      resizeFactorX: 1,\n      resizeFactorY: 1,\n      backdrop: {\n        width: Math.round(backdropWidth),\n        height: Math.round(backdropHeight),\n        x: Math.round(backdropX),\n        y: Math.round(backdropY)\n      }\n    };\n\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleResize = _this.handleResize.bind(_this);\n    return _this;\n  }\n\n  _createClass(ZoomableGroup, [{\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(_ref) {\n      var pageX = _ref.pageX,\n          pageY = _ref.pageY;\n\n      if (this.props.disablePanning) return;\n\n      if (this.state.isPressed) {\n        this.setState({\n          mouseX: pageX - this.state.mouseXStart,\n          mouseY: pageY - this.state.mouseYStart\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      if (this.props.disablePanning) return;\n      if (this.state.isPressed) {\n        this.setState({\n          isPressed: false\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(_ref2) {\n      var pageX = _ref2.pageX,\n          pageY = _ref2.pageY;\n\n      if (this.props.disablePanning) return;\n      this.setState({\n        isPressed: true,\n        mouseXStart: pageX - this.state.mouseX,\n        mouseYStart: pageY - this.state.mouseY\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _state = this.state,\n          mouseX = _state.mouseX,\n          mouseY = _state.mouseY,\n          resizeFactorX = _state.resizeFactorX,\n          resizeFactorY = _state.resizeFactorY;\n      var _props = this.props,\n          projection = _props.projection,\n          center = _props.center,\n          zoom = _props.zoom;\n\n\n      var zoomFactor = nextProps.zoom / zoom;\n      var centerChanged = JSON.stringify(nextProps.center) !== JSON.stringify(center);\n\n      this.setState({\n        zoom: nextProps.zoom,\n        mouseX: centerChanged ? (0, _utils.calculateMousePosition)(\"x\", projection, nextProps, nextProps.zoom, resizeFactorX) : mouseX * zoomFactor,\n        mouseY: centerChanged ? (0, _utils.calculateMousePosition)(\"y\", projection, nextProps, nextProps.zoom, resizeFactorY) : mouseY * zoomFactor\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          projection = _props2.projection,\n          zoom = _props2.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      var xPercentageChange = 1 / resizeFactorX * this.state.resizeFactorX;\n      var yPercentageChange = 1 / resizeFactorY * this.state.resizeFactorY;\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: this.state.mouseX * xPercentageChange,\n        mouseY: this.state.mouseY * yPercentageChange\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props3 = this.props,\n          width = _props3.width,\n          height = _props3.height,\n          projection = _props3.projection,\n          zoom = _props3.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: (0, _utils.calculateMousePosition)(\"x\", projection, this.props, zoom, resizeFactorX),\n        mouseY: (0, _utils.calculateMousePosition)(\"y\", projection, this.props, zoom, resizeFactorY)\n      });\n\n      window.addEventListener(\"resize\", this.handleResize);\n      window.addEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n      window.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          width = _props4.width,\n          height = _props4.height,\n          zoom = _props4.zoom,\n          style = _props4.style,\n          projection = _props4.projection,\n          children = _props4.children;\n      var _state2 = this.state,\n          mouseX = _state2.mouseX,\n          mouseY = _state2.mouseY,\n          resizeFactorX = _state2.resizeFactorX,\n          resizeFactorY = _state2.resizeFactorY;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-zoomable-group\",\n          ref: function ref(zoomableGroupNode) {\n            return _this2.zoomableGroupNode = zoomableGroupNode;\n          },\n          transform: \"\\n           translate(\\n             \" + Math.round((width / 2 + resizeFactorX * mouseX) * 100) / 100 + \"\\n             \" + Math.round((height / 2 + resizeFactorY * mouseY) * 100) / 100 + \"\\n           )\\n           scale(\" + zoom + \")\\n           translate(\" + -width / 2 + \" \" + -height / 2 + \")\\n         \",\n          onMouseMove: this.handleMouseMove,\n          onMouseUp: this.handleMouseUp,\n          onMouseDown: this.handleMouseDown,\n          style: style\n        },\n        _react2.default.createElement(\"rect\", {\n          x: this.state.backdrop.x,\n          y: this.state.backdrop.y,\n          width: this.state.backdrop.width,\n          height: this.state.backdrop.height,\n          fill: \"transparent\",\n          style: { strokeWidth: 0 }\n        }),\n        (0, _utils.createNewChildren)(children, this.props)\n      );\n    }\n  }]);\n\n  return ZoomableGroup;\n}(_react.Component);\n\nZoomableGroup.defaultProps = {\n  center: [0, 0],\n  backdrop: {\n    x: [-179.9, 179.9],\n    y: [89.9, -89.9]\n  },\n  zoom: 1,\n  disablePanning: false\n};\n\nexports.default = ZoomableGroup;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _topojsonClient = require(\"topojson-client\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Geographies = function (_Component) {\n  _inherits(Geographies, _Component);\n\n  function Geographies(props) {\n    _classCallCheck(this, Geographies);\n\n    var _this = _possibleConstructorReturn(this, (Geographies.__proto__ || Object.getPrototypeOf(Geographies)).call(this, props));\n\n    _this.state = {\n      geographyPaths: props.geographyPaths\n    };\n\n    _this.fetchGeographies = _this.fetchGeographies.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geographies, [{\n    key: \"fetchGeographies\",\n    value: function fetchGeographies(geographyUrl) {\n      var _this2 = this;\n\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height;\n\n\n      if (!geographyUrl) return;\n\n      var request = new XMLHttpRequest();\n      request.open(\"GET\", geographyUrl, true);\n\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n          var geographyPaths = JSON.parse(request.responseText);\n          _this2.setState({\n            geographyPaths: (0, _topojsonClient.feature)(geographyPaths, geographyPaths.objects[Object.keys(geographyPaths.objects)[0]]).features\n          }, function () {\n            if (!_this2.props.onGeographiesLoaded) return;\n            _this2.props.onGeographyPathsLoaded(String(request.status));\n          });\n        } else {\n          if (!_this2.props.onGeographiesLoaded) return;\n          _this2.props.onGeographyPathsLoaded(String(request.status));\n        }\n      };\n      request.onerror = function () {\n        console.log(\"There was a connection error...\");\n      };\n      request.send();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      ;\n      if (!nextProps.geographyUrl && !nextProps.geographyPaths.length !== this.props.geographyPaths.length) {\n        this.setState({\n          geographyPaths: nextProps.geographyPaths\n        });\n        return;\n      }\n      if (nextProps.geographyUrl !== this.props.geographyUrl) {\n        this.fetchGeographies(nextProps.geographyUrl);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var geoPathsChanged = nextState.geographyPaths.length !== this.state.geographyPaths.length;\n      var choroplethChanged = JSON.stringify(nextProps.choropleth) !== JSON.stringify(this.props.choropleth);\n      return geoPathsChanged || choroplethChanged || nextProps.disableOptimization;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchGeographies(this.props.geographyUrl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          projection = _props2.projection,\n          style = _props2.style,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-geographies\", style: style },\n        children(this.state.geographyPaths, projection)\n      );\n    }\n  }]);\n\n  return Geographies;\n}(_react.Component);\n\nGeographies.defaultProps = {\n  componentIdentifier: \"Geographies\",\n  disableOptimization: false,\n  geographyUrl: \"\",\n  geographyPaths: []\n};\n\nexports.default = Geographies;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar pathCache = {};\n\nvar renderPath = function renderPath(cacheId, geography, projection, round, precision) {\n  if (pathCache[cacheId]) return pathCache[cacheId];\n\n  var pathString = cacheId ? pathCache[cacheId] ? pathCache[cacheId] : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography) : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography);\n\n  if (cacheId) pathCache[cacheId] = pathString;\n\n  return pathString;\n};\n\nvar Geography = function (_Component) {\n  _inherits(Geography, _Component);\n\n  function Geography() {\n    _classCallCheck(this, Geography);\n\n    var _this = _possibleConstructorReturn(this, (Geography.__proto__ || Object.getPrototypeOf(Geography)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geography, [{\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      evt.persist();\n      var _props = this.props,\n          onClick = _props.onClick,\n          geography = _props.geography;\n\n      return onClick && onClick(geography, evt);\n    }\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props2 = this.props,\n          onMouseEnter = _props2.onMouseEnter,\n          geography = _props2.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props3 = this.props,\n          onMouseMove = _props3.onMouseMove,\n          geography = _props3.geography;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(geography, evt);\n        });\n      } else if (onMouseMove) onMouseMove(geography, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseLeave = _props4.onMouseLeave,\n          geography = _props4.geography;\n\n      this.setState({\n        hover: false,\n        pressed: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseDown = _props5.onMouseDown,\n          geography = _props5.geography;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props6 = this.props,\n          onMouseUp = _props6.onMouseUp,\n          geography = _props6.geography;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          geography = _props7.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          geography = _props8.geography;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(geography, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props9 = this.props,\n          geography = _props9.geography,\n          projection = _props9.projection,\n          round = _props9.round,\n          cacheId = _props9.cacheId,\n          precision = _props9.precision,\n          tabable = _props9.tabable,\n          style = _props9.style;\n      var _state = this.state,\n          hover = _state.hover,\n          pressed = _state.pressed;\n\n\n      var pathString = renderPath(cacheId, geography, projection, round, precision);\n\n      var excludeProps = [\"geography\", \"projection\", \"round\", \"cacheId\", \"precision\", \"tabable\", \"style\", \"onClick\", \"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\"];\n\n      var restProps = Object.keys(this.props).filter(function (key) {\n        return excludeProps.indexOf(key) === -1;\n      }).reduce(function (obj, key) {\n        obj[key] = _this2.props[key];\n        return obj;\n      }, {});\n\n      return _react2.default.createElement(\"path\", _extends({\n        d: pathString,\n        className: \"rsm-geography\" + (pressed ? \" rsm-geography--pressed\" : \"\") + (hover ? \" rsm-geography--hover\" : \"\"),\n        style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n        onClick: this.handleMouseClick,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseMove: this.handleMouseMove,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onFocus: tabable && this.handleFocus,\n        onBlur: tabable && this.handleBlur,\n        tabIndex: tabable ? 0 : -1\n      }, restProps));\n    }\n  }]);\n\n  return Geography;\n}(_react.Component);\n\nGeography.defaultProps = {\n  precision: 0.1,\n  cacheId: null,\n  round: false,\n  tabable: true,\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  }\n};\n\nexports.default = Geography;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Marker = function (_Component) {\n  _inherits(Marker, _Component);\n\n  function Marker() {\n    _classCallCheck(this, Marker);\n\n    var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Marker, [{\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props = this.props,\n          onMouseEnter = _props.onMouseEnter,\n          marker = _props.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props2 = this.props,\n          onMouseMove = _props2.onMouseMove,\n          marker = _props2.marker;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(marker, evt);\n        });\n      } else if (onMouseMove) onMouseMove(marker, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props3 = this.props,\n          onMouseLeave = _props3.onMouseLeave,\n          marker = _props3.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseDown = _props4.onMouseDown,\n          marker = _props4.marker;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseUp = _props5.onMouseUp,\n          marker = _props5.marker;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      if (!this.props.onClick) return;\n      evt.persist();\n      var _props6 = this.props,\n          onClick = _props6.onClick,\n          marker = _props6.marker,\n          projection = _props6.projection;\n\n      return onClick && onClick(marker, projection()(marker.coordinates), evt);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          marker = _props7.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          marker = _props8.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(marker, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props9 = this.props,\n          projection = _props9.projection,\n          marker = _props9.marker,\n          style = _props9.style,\n          tabable = _props9.tabable,\n          children = _props9.children;\n      var _state = this.state,\n          pressed = _state.pressed,\n          hover = _state.hover;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-marker\" + (pressed ? \" rsm-marker--pressed\" : \"\") + (hover ? \" rsm-marker--hover\" : \"\"),\n          transform: \"translate(\\n           \" + projection()(marker.coordinates)[0] + \"\\n           \" + projection()(marker.coordinates)[1] + \"\\n         )\",\n          style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n          onMouseDown: this.handleMouseDown,\n          onMouseUp: this.handleMouseUp,\n          onClick: this.handleMouseClick,\n          onMouseMove: this.handleMouseMove,\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur,\n          tabIndex: tabable ? 0 : -1\n        },\n        children\n      );\n    }\n  }]);\n\n  return Marker;\n}(_react.Component);\n\nMarker.defaultProps = {\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  },\n  marker: {\n    coordinates: [0, 0]\n  },\n  tabable: true\n};\n\nexports.default = Marker;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Markers = function (_Component) {\n  _inherits(Markers, _Component);\n\n  function Markers() {\n    _classCallCheck(this, Markers);\n\n    return _possibleConstructorReturn(this, (Markers.__proto__ || Object.getPrototypeOf(Markers)).apply(this, arguments));\n  }\n\n  _createClass(Markers, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          projection = _props.projection,\n          style = _props.style;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-markers\", style: style },\n        !children ? null : children.length === undefined ? _react2.default.cloneElement(children, {\n          projection: projection\n        }) : children.map(function (child, i) {\n          return !child ? null : _react2.default.cloneElement(child, {\n            key: child.key || \"marker-\" + i,\n            projection: projection\n          });\n        })\n      );\n    }\n  }]);\n\n  return Markers;\n}(_react.Component);\n\nMarkers.defaultProps = {\n  componentIdentifier: \"Markers\"\n};\n\nexports.default = Markers;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Annotation = function (_Component) {\n  _inherits(Annotation, _Component);\n\n  function Annotation() {\n    _classCallCheck(this, Annotation);\n\n    return _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).apply(this, arguments));\n  }\n\n  _createClass(Annotation, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          projection = _props.projection,\n          subject = _props.subject,\n          style = _props.style,\n          dx = _props.dx,\n          dy = _props.dy,\n          zoom = _props.zoom,\n          stroke = _props.stroke,\n          strokeWidth = _props.strokeWidth,\n          children = _props.children;\n\n\n      var connectorPath = (0, _utils.createConnectorPath)(null, [-dx / zoom, -dy / zoom]);\n\n      return _react2.default.createElement(\n        \"g\",\n        {\n          className: \"rsm-annotation\",\n          style: { style: style },\n          transform: \"translate(\\n          \" + (projection()(subject)[0] + dx / zoom) + \"\\n          \" + (projection()(subject)[1] + dy / zoom) + \"\\n        )\",\n          textAnchor: (0, _utils.createTextAnchor)(dx)\n        },\n        children,\n        _react2.default.createElement(\"path\", { d: connectorPath, stroke: stroke, strokeWidth: strokeWidth })\n      );\n    }\n  }]);\n\n  return Annotation;\n}(_react.Component);\n\nAnnotation.defaultProps = {\n  componentIdentifier: \"Annotation\",\n  stroke: \"#000000\",\n  strokeWidth: 1,\n  zoom: 1\n};\n\nexports.default = Annotation;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar computeGraticule = function computeGraticule(projection, step) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().step(step)());\n};\n\nvar computeOutline = function computeOutline(projection) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().outline());\n};\n\nvar Graticule = function (_Component) {\n  _inherits(Graticule, _Component);\n\n  function Graticule() {\n    _classCallCheck(this, Graticule);\n\n    var _this = _possibleConstructorReturn(this, (Graticule.__proto__ || Object.getPrototypeOf(Graticule)).call(this));\n\n    _this.state = {\n      renderGraticule: false,\n      graticulePath: \"\",\n      outlinePath: \"\"\n    };\n    _this.renderGraticule = _this.renderGraticule.bind(_this);\n    return _this;\n  }\n\n  _createClass(Graticule, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderGraticule();\n    }\n  }, {\n    key: \"renderGraticule\",\n    value: function renderGraticule() {\n      var _props = this.props,\n          step = _props.step,\n          projection = _props.projection,\n          round = _props.round,\n          precision = _props.precision;\n\n\n      this.setState({\n        renderGraticule: true,\n        graticulePath: round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n        outlinePath: round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _props2 = this.props,\n          step = _props2.step,\n          projection = _props2.projection,\n          round = _props2.round,\n          precision = _props2.precision;\n\n\n      if (nextProps.round !== round || nextProps.precision !== precision) {\n        this.setState({\n          graticulePath: nextProps.round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n          outlinePath: nextProps.round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.disableOptimization;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          zoom = _props3.zoom,\n          style = _props3.style,\n          outline = _props3.outline,\n          fill = _props3.fill,\n          stroke = _props3.stroke;\n\n\n      return this.state.renderGraticule && _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-graticule\" },\n        _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.graticulePath,\n          style: style\n        }),\n        outline && _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.outlinePath,\n          style: style\n        })\n      );\n    }\n  }]);\n\n  return Graticule;\n}(_react.Component);\n\nGraticule.defaultProps = {\n  componentIdentifier: \"Graticule\",\n  disableOptimization: true,\n  round: true,\n  precision: 0.1,\n  step: [10, 10],\n  outline: true,\n  stroke: \"#DDDDDD\",\n  fill: \"transparent\",\n  style: {\n    pointerEvents: \"none\"\n  }\n};\n\nexports.default = Graticule;","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = tan(z_2),\n          lnsecz_2 = log(1 / cosz_2);\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          α = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(α)) - α;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotα = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotα + s * sqrt(cotα * cotα - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      p = projection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosλ = cos(x);\n    return [x, 2 * atan2(sqrt(cosλ * cosλ + tanPhi0 * tanPhi0 - y * y) - cosλ, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function(_) {\n      return arguments.length ? (projection[name](_), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport {pi} from \"./math\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\nimport {abs, floor, max, min, pi, radians, sqrtPi, tau} from \"./math\";\n\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphere(step) {\n  return {\n    type: \"Polygon\",\n    coordinates: [\n      range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })\n      .concat(range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))\n    ]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, radians} from \"../math\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes) {\n  var sphere = interpolateSphere(lobes);\n\n  lobes = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      return [\n        [l[0][0] * radians, l[0][1] * radians],\n        [l[1][0] * radians, l[1][1] * radians],\n        [l[2][0] * radians, l[2][1] * radians]\n      ];\n    });\n  });\n\n  var bounds = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      var x0 = project(l[0][0], l[0][1])[0],\n          x1 = project(l[2][0], l[2][1])[0],\n          y0 = project(l[1][0], l[0][1])[1],\n          y1 = project(l[1][0], l[1][1])[1],\n          t;\n      if (y0 > y1) t = y0, y0 = y1, y1 = t;\n      return [[x0, y0], [x1, y1]];\n    });\n  });\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  // Assumes mutually exclusive bounding boxes for lobes.\n  if (project.invert) forward.invert = function(x, y) {\n    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n    for (var i = 0, n = bound.length; i < n; ++i) {\n      var b = bound[i];\n      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n        p[0] += lobe[i][1][0];\n        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n      }\n    }\n  };\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((y2_1 - sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1500)\n      .center([-160.908, 62.4864])\n      .clipAngle(25);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function naturalEarthRaw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarthRaw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarthRaw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\nexport default function(root, face, r) {\n\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {transform: [\n    cos(r), sin(r), 0,\n    -sin(r), cos(r), 0\n  ]});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(101.858)\n      .center([0, 45]);\n}\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon\";\nimport {pi, sqrt} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","export default function() {}\n","import {geoStream} from \"d3-geo\";\nimport noop from \"../noop\";\nimport clockwise from \"./clockwise\";\nimport contains from \"./contains\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n","export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n","export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * (x0 + (y > 0 ? 1 : -1) * d),\n          y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {gringortenRaw} from \"../gringorten\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","export default function(o, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(coordinates) {\n    coordinates[0] = +coordinates[0].toFixed(digits);\n    coordinates[1] = +coordinates[1].toFixed(digits);\n  }\n\n  function quantizePoints(coordinates) {\n    coordinates.forEach(quantizePoint);\n  }\n\n  function quantizePolygon(coordinates) {\n    coordinates.forEach(quantizePoints);\n  }\n\n  function quantizeGeometry(o) {\n    if (o) switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": case \"LineString\": quantizePoints(o.coordinates); break;\n      case \"MultiLineString\": case \"Polygon\": quantizePolygon(o.coordinates); break;\n      case \"MultiPolygon\": o.coordinates.forEach(quantizePolygon); break;\n      default: return;\n    }\n  }\n\n  function quantizeFeature(o) {\n    quantizeGeometry(o.geometry);\n  }\n\n  if (o) switch (o.type) {\n    case \"Feature\": quantizeFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(quantizeFeature); break;\n    default: quantizeGeometry(o); break;\n  }\n\n  return o;\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1\n      ? [0, y] // pole\n      : [x0, quantize(y)]; // antimeridian\n}\n\nfunction clampPoint(p) {\n  if (p[0] <= x0e) p[0] = x0;\n  else if (p[0] >= x1e) p[0] = x1;\n  if (p[1] <= y0e) p[1] = y0;\n  else if (p[1] >= y1e) p[1] = y1;\n}\n\nfunction clampPoints(points) {\n  points.forEach(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(polygon, fragments) {\n  for (var j = 0, m = polygon.length; j < m; ++j) {\n    var ring = polygon[j];\n    ring.polygon = polygon;\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push(ring);\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = ring.slice(0, i + 1);\n          fragmentBefore.polygon = polygon;\n          fragmentBefore[fragmentBefore.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push(ring = ring.slice(k - 1));\n        ring[0] = normalizePoint(ring[0][1]);\n        ring.polygon = polygon;\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n  polygon.length = 0;\n}\n\n// Now stitch the fragments back together into rings.\n// TODO remove empty polygons.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment[0];\n    end = fragment[fragment.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment[0];\n      end = fragment[fragment.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment[0]];\n        startFragment.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = startFragment.concat(fragment);\n        fragment.polygon = startFragment.polygon;\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment[endFragment.length - 1]];\n        fragment.pop(); // drop the shared coordinate\n        fragment = fragment.concat(endFragment);\n        fragment.polygon = endFragment.polygon;\n        fragment.index = n++;\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n      } else {\n        fragment.push(fragment[0]); // close ring\n        fragment.polygon.push(fragment);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(o) {\n  stitchGeometry(o.geometry);\n}\n\nfunction stitchGeometry(o) {\n  if (!o) return;\n  var fragments, i, n;\n\n  switch (o.type) {\n    case \"GeometryCollection\": {\n      o.geometries.forEach(stitchGeometry);\n      return;\n    }\n    case \"Point\": {\n      clampPoint(o.coordinates);\n      break;\n    }\n    case \"MultiPoint\":\n    case \"LineString\": {\n      clampPoints(o.coordinates);\n      break;\n    }\n    case \"MultiLineString\": {\n      o.coordinates.forEach(clampPoints);\n      break;\n    }\n    case \"Polygon\": {\n      extractFragments(o.coordinates, fragments = []);\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = o.coordinates.length;\n      while (++i < n) extractFragments(o.coordinates[i], fragments);\n      break;\n    }\n    default: return;\n  }\n\n  stitchFragments(fragments);\n}\n\nexport default function(o) {\n  if (o) switch (o.type) {\n    case \"Feature\": stitchFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(stitchFeature); break;\n    default: stitchGeometry(o); break;\n  }\n  return o;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\n// TODO clip to ellipse\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \"./math\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","export {default as geoAiry, airyRaw as geoAiryRaw} from \"./src/airy\";\nexport {default as geoAitoff, aitoffRaw as geoAitoffRaw} from \"./src/aitoff\";\nexport {default as geoArmadillo, armadilloRaw as geoArmadilloRaw} from \"./src/armadillo\";\nexport {default as geoAugust, augustRaw as geoAugustRaw} from \"./src/august\";\nexport {default as geoBaker, bakerRaw as geoBakerRaw} from \"./src/baker\";\nexport {default as geoBerghaus, berghausRaw as geoBerghausRaw} from \"./src/berghaus\";\nexport {default as geoBoggs, boggsRaw as geoBoggsRaw} from \"./src/boggs\";\nexport {default as geoBonne, bonneRaw as geoBonneRaw} from \"./src/bonne\";\nexport {default as geoBottomley, bottomleyRaw as geoBottomleyRaw} from \"./src/bottomley\";\nexport {default as geoBromley, bromleyRaw as geoBromleyRaw} from \"./src/bromley\";\nexport {default as geoChamberlin, chamberlinRaw as geoChamberlinRaw, chamberlinAfrica as geoChamberlinAfrica} from \"./src/chamberlin\";\nexport {default as geoCollignon, collignonRaw as geoCollignonRaw} from \"./src/collignon\";\nexport {default as geoCraig, craigRaw as geoCraigRaw} from \"./src/craig\";\nexport {default as geoCraster, crasterRaw as geoCrasterRaw} from \"./src/craster\";\nexport {default as geoCylindricalEqualArea, cylindricalEqualAreaRaw as geoCylindricalEqualAreaRaw} from \"./src/cylindricalEqualArea\";\nexport {default as geoCylindricalStereographic, cylindricalStereographicRaw as geoCylindricalStereographicRaw} from \"./src/cylindricalStereographic\";\nexport {default as geoEckert1, eckert1Raw as geoEckert1Raw} from \"./src/eckert1.js\";\nexport {default as geoEckert2, eckert2Raw as geoEckert2Raw} from \"./src/eckert2.js\";\nexport {default as geoEckert3, eckert3Raw as geoEckert3Raw} from \"./src/eckert3.js\";\nexport {default as geoEckert4, eckert4Raw as geoEckert4Raw} from \"./src/eckert4.js\";\nexport {default as geoEckert5, eckert5Raw as geoEckert5Raw} from \"./src/eckert5.js\";\nexport {default as geoEckert6, eckert6Raw as geoEckert6Raw} from \"./src/eckert6.js\";\nexport {default as geoEisenlohr, eisenlohrRaw as geoEisenlohrRaw} from \"./src/eisenlohr.js\";\nexport {default as geoFahey, faheyRaw as geoFaheyRaw} from \"./src/fahey.js\";\nexport {default as geoFoucaut, foucautRaw as geoFoucautRaw} from \"./src/foucaut.js\";\nexport {default as geoGilbert} from \"./src/gilbert.js\";\nexport {default as geoGingery, gingeryRaw as geoGingeryRaw} from \"./src/gingery.js\";\nexport {default as geoGinzburg4, ginzburg4Raw as geoGinzburg4Raw} from \"./src/ginzburg4.js\";\nexport {default as geoGinzburg5, ginzburg5Raw as geoGinzburg5Raw} from \"./src/ginzburg5.js\";\nexport {default as geoGinzburg6, ginzburg6Raw as geoGinzburg6Raw} from \"./src/ginzburg6.js\";\nexport {default as geoGinzburg8, ginzburg8Raw as geoGinzburg8Raw} from \"./src/ginzburg8.js\";\nexport {default as geoGinzburg9, ginzburg9Raw as geoGinzburg9Raw} from \"./src/ginzburg9.js\";\nexport {default as geoGringorten, gringortenRaw as geoGringortenRaw} from \"./src/gringorten.js\";\nexport {default as geoGuyou, guyouRaw as geoGuyouRaw} from \"./src/guyou.js\";\nexport {default as geoHammer, hammerRaw as geoHammerRaw} from \"./src/hammer.js\";\nexport {default as geoHammerRetroazimuthal, hammerRetroazimuthalRaw as geoHammerRetroazimuthalRaw} from \"./src/hammerRetroazimuthal.js\";\nexport {default as geoHealpix, healpixRaw as geoHealpixRaw} from \"./src/healpix.js\";\nexport {default as geoHill, hillRaw as geoHillRaw} from \"./src/hill.js\";\nexport {default as geoHomolosine, homolosineRaw as geoHomolosineRaw} from \"./src/homolosine.js\";\nexport {default as geoInterrupt} from \"./src/interrupted/index\";\nexport {default as geoInterruptedBoggs} from \"./src/interrupted/boggs\";\nexport {default as geoInterruptedHomolosine} from \"./src/interrupted/homolosine\";\nexport {default as geoInterruptedMollweide} from \"./src/interrupted/mollweide\";\nexport {default as geoInterruptedMollweideHemispheres} from \"./src/interrupted/mollweideHemispheres\";\nexport {default as geoInterruptedSinuMollweide} from \"./src/interrupted/sinuMollweide\";\nexport {default as geoInterruptedSinusoidal} from \"./src/interrupted/sinusoidal\";\nexport {default as geoKavrayskiy7, kavrayskiy7Raw as geoKavrayskiy7Raw} from \"./src/kavrayskiy7.js\";\nexport {default as geoLagrange, lagrangeRaw as geoLagrangeRaw} from \"./src/lagrange.js\";\nexport {default as geoLarrivee, larriveeRaw as geoLarriveeRaw} from \"./src/larrivee\";\nexport {default as geoLaskowski, laskowskiRaw as geoLaskowskiRaw} from \"./src/laskowski\";\nexport {default as geoLittrow, littrowRaw as geoLittrowRaw} from \"./src/littrow.js\";\nexport {default as geoLoximuthal, loximuthalRaw as geoLoximuthalRaw} from \"./src/loximuthal.js\";\nexport {default as geoMiller, millerRaw as geoMillerRaw} from \"./src/miller\";\nexport {default as geoModifiedStereographic, modifiedStereographicRaw as geoModifiedStereographicRaw, modifiedStereographicAlaska as geoModifiedStereographicAlaska, modifiedStereographicGs48 as geoModifiedStereographicGs48, modifiedStereographicGs50 as geoModifiedStereographicGs50, modifiedStereographicMiller as geoModifiedStereographicMiller, modifiedStereographicLee as geoModifiedStereographicLee} from \"./src/modifiedStereographic\";\nexport {default as geoMollweide, mollweideRaw as geoMollweideRaw} from \"./src/mollweide\";\nexport {default as geoMtFlatPolarParabolic, mtFlatPolarParabolicRaw as geoMtFlatPolarParabolicRaw} from \"./src/mtFlatPolarParabolic\";\nexport {default as geoMtFlatPolarQuartic, mtFlatPolarQuarticRaw as geoMtFlatPolarQuarticRaw} from \"./src/mtFlatPolarQuartic\";\nexport {default as geoMtFlatPolarSinusoidal, mtFlatPolarSinusoidalRaw as geoMtFlatPolarSinusoidalRaw} from \"./src/mtFlatPolarSinusoidal\";\nexport {default as geoNaturalEarth, naturalEarthRaw as geoNaturalEarthRaw} from \"./src/naturalEarth\";\nexport {default as geoNellHammer, nellHammerRaw as geoNellHammerRaw} from \"./src/nellHammer\";\nexport {default as geoPatterson, pattersonRaw as geoPattersonRaw} from \"./src/patterson\";\nexport {default as geoPolyconic, polyconicRaw as geoPolyconicRaw} from \"./src/polyconic\";\nexport {default as geoPolyhedral} from \"./src/polyhedral/index.js\";\nexport {default as geoPolyhedralButterfly} from \"./src/polyhedral/butterfly.js\";\nexport {default as geoPolyhedralCollignon} from \"./src/polyhedral/collignon.js\";\nexport {default as geoPolyhedralWaterman} from \"./src/polyhedral/waterman.js\";\nexport {default as geoProject} from \"./src/project/index\";\nexport {default as geoGringortenQuincuncial} from \"./src/quincuncial/gringorten.js\";\nexport {default as geoPeirceQuincuncial} from \"./src/quincuncial/peirce.js\";\nexport {default as geoPierceQuincuncial} from \"./src/quincuncial/peirce.js\"; // DEPRECATED misspelling\nexport {default as geoQuantize} from \"./src/quantize\";\nexport {default as geoQuincuncial} from \"./src/quincuncial/index.js\";\nexport {default as geoRectangularPolyconic, rectangularPolyconicRaw as geoRectangularPolyconicRaw} from \"./src/rectangularPolyconic\";\nexport {default as geoRobinson, robinsonRaw as geoRobinsonRaw} from \"./src/robinson\";\nexport {default as geoSatellite, satelliteRaw as geoSatelliteRaw} from \"./src/satellite\";\nexport {default as geoSinuMollweide, sinuMollweideRaw as geoSinuMollweideRaw} from \"./src/sinuMollweide\";\nexport {default as geoSinusoidal, sinusoidalRaw as geoSinusoidalRaw} from \"./src/sinusoidal\";\nexport {default as geoStitch} from \"./src/stitch\";\nexport {default as geoTimes, timesRaw as geoTimesRaw} from \"./src/times\";\nexport {default as geoTwoPointAzimuthal, twoPointAzimuthalRaw as geoTwoPointAzimuthalRaw, twoPointAzimuthalUsa as geoTwoPointAzimuthalUsa} from \"./src/twoPointAzimuthal\";\nexport {default as geoTwoPointEquidistant, twoPointEquidistantRaw as geoTwoPointEquidistantRaw, twoPointEquidistantUsa as geoTwoPointEquidistantUsa} from \"./src/twoPointEquidistant\";\nexport {default as geoVanDerGrinten, vanDerGrintenRaw as geoVanDerGrintenRaw} from \"./src/vanDerGrinten\";\nexport {default as geoVanDerGrinten2, vanDerGrinten2Raw as geoVanDerGrinten2Raw} from \"./src/vanDerGrinten2\";\nexport {default as geoVanDerGrinten3, vanDerGrinten3Raw as geoVanDerGrinten3Raw} from \"./src/vanDerGrinten3\";\nexport {default as geoVanDerGrinten4, vanDerGrinten4Raw as geoVanDerGrinten4Raw} from \"./src/vanDerGrinten4\";\nexport {default as geoWagner4, wagner4Raw as geoWagner4Raw} from \"./src/wagner4.js\";\nexport {default as geoWagner6, wagner6Raw as geoWagner6Raw} from \"./src/wagner6.js\";\nexport {default as geoWagner7, wagner7Raw as geoWagner7Raw} from \"./src/wagner7.js\";\nexport {default as geoWiechel, wiechelRaw as geoWiechelRaw} from \"./src/wiechel.js\";\nexport {default as geoWinkel3, winkel3Raw as geoWinkel3Raw} from \"./src/winkel3\";\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    point[0] = (x0 += point[0]) * kx + dx;\n    point[1] = (y0 += point[1]) * ky + dy;\n    return point;\n  };\n}\n","import transform from \"./transform\";\n\nexport default function(topology) {\n  var bbox = topology.bbox;\n\n  function bboxPoint(p0) {\n    p1[0] = p0[0], p1[1] = p0[1], t(p1);\n    if (p1[0] < x0) x0 = p1[0];\n    if (p1[0] > x1) x1 = p1[0];\n    if (p1[1] < y0) y0 = p1[1];\n    if (p1[1] > y1) y1 = p1[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  if (!bbox) {\n    var t = transform(topology), p0, p1 = new Array(2), name,\n        x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n    topology.arcs.forEach(function(arc) {\n      var i = -1, n = arc.length;\n      while (++i < n) {\n        p0 = arc[i], p1[0] = p0[0], p1[1] = p0[1], t(p1, i);\n        if (p1[0] < x0) x0 = p1[0];\n        if (p1[0] > x1) x1 = p1[0];\n        if (p1[1] < y0) y0 = p1[1];\n        if (p1[1] > y1) y1 = p1[1];\n      }\n    });\n\n    for (name in topology.objects) {\n      bboxGeometry(topology.objects[name]);\n    }\n\n    bbox = topology.bbox = [x0, y0, x1, y1];\n  }\n\n  return bbox;\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k].slice(), k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p.slice());\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0].slice());\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0].slice());\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nexport default function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n}\n\nexport function meshArcs(topology, object, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n","export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n","import bisect from \"./bisect\";\n\nexport default function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n","import bbox from \"./bbox\";\n\nexport default function(topology, n) {\n  if (!((n = Math.floor(n)) >= 2)) throw new Error(\"n must be ≥2\");\n  if (topology.transform) throw new Error(\"already quantized\");\n  var bb = bbox(topology), name,\n      dx = bb[0], kx = (bb[2] - dx) / (n - 1) || 1,\n      dy = bb[1], ky = (bb[3] - dy) / (n - 1) || 1;\n\n  function quantizePoint(p) {\n    p[0] = Math.round((p[0] - dx) / kx);\n    p[1] = Math.round((p[1] - dy) / ky);\n  }\n\n  function quantizeGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(quantizePoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = 1,\n        j = 1,\n        n = arc.length,\n        pi = arc[0],\n        x0 = pi[0] = Math.round((pi[0] - dx) / kx),\n        y0 = pi[1] = Math.round((pi[1] - dy) / ky),\n        pj,\n        x1,\n        y1;\n\n    for (; i < n; ++i) {\n      pi = arc[i];\n      x1 = Math.round((pi[0] - dx) / kx);\n      y1 = Math.round((pi[1] - dy) / ky);\n      if (x1 !== x0 || y1 !== y0) {\n        pj = arc[j++];\n        pj[0] = x1 - x0, x0 = x1;\n        pj[1] = y1 - y0, y0 = y1;\n      }\n    }\n\n    if (j < 2) {\n      pj = arc[j++];\n      pj[0] = 0;\n      pj[1] = 0;\n    }\n\n    arc.length = j;\n  });\n\n  for (name in topology.objects) {\n    quantizeGeometry(topology.objects[name]);\n  }\n\n  topology.transform = {\n    scale: [kx, ky],\n    translate: [dx, dy]\n  };\n\n  return topology;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0, x0 = x1;\n    point[1] = y1 - y0, y0 = y1;\n    return point;\n  };\n}\n","export {default as bbox} from \"./src/bbox\";\nexport {default as feature} from \"./src/feature\";\nexport {default as mesh, meshArcs} from \"./src/mesh\";\nexport {default as merge, mergeArcs} from \"./src/merge\";\nexport {default as neighbors} from \"./src/neighbors\";\nexport {default as quantize} from \"./src/quantize\";\nexport {default as transform} from \"./src/transform\";\nexport {default as untransform} from \"./src/untransform\";\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","export {default as bisect, bisectRight, bisectLeft} from \"./bisect\";\nexport {default as ascending} from \"./ascending\";\nexport {default as bisector} from \"./bisector\";\nexport {default as cross} from \"./cross\";\nexport {default as descending} from \"./descending\";\nexport {default as deviation} from \"./deviation\";\nexport {default as extent} from \"./extent\";\nexport {default as histogram} from \"./histogram\";\nexport {default as thresholdFreedmanDiaconis} from \"./threshold/freedmanDiaconis\";\nexport {default as thresholdScott} from \"./threshold/scott\";\nexport {default as thresholdSturges} from \"./threshold/sturges\";\nexport {default as max} from \"./max\";\nexport {default as mean} from \"./mean\";\nexport {default as median} from \"./median\";\nexport {default as merge} from \"./merge\";\nexport {default as min} from \"./min\";\nexport {default as pairs} from \"./pairs\";\nexport {default as permute} from \"./permute\";\nexport {default as quantile} from \"./quantile\";\nexport {default as range} from \"./range\";\nexport {default as scan} from \"./scan\";\nexport {default as shuffle} from \"./shuffle\";\nexport {default as sum} from \"./sum\";\nexport {default as ticks, tickIncrement, tickStep} from \"./ticks\";\nexport {default as transpose} from \"./transpose\";\nexport {default as variance} from \"./variance\";\nexport {default as zip} from \"./zip\";\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceStrokeWidth = replaceStrokeWidth;\nexports.createChoroplethStyles = createChoroplethStyles;\nexports.calculateResizeFactor = calculateResizeFactor;\nexports.calculateMousePosition = calculateMousePosition;\nexports.isChildOfType = isChildOfType;\nexports.createNewChildren = createNewChildren;\nexports.roundPath = roundPath;\nexports.createConnectorPath = createConnectorPath;\nexports.createTextAnchor = createTextAnchor;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction replaceStrokeWidth(styles) {\n  var newStyles = {};\n  Object.keys(styles).map(function (key, i) {\n    if (key === \"strokeWidth\") newStyles[key] = \"inherit\";else newStyles[key] = styles[key];\n  });\n  return newStyles;\n}\n\nfunction createChoroplethStyles(styles, choroplethValue) {\n  if (choroplethValue) {\n    var newStyles = {};\n    Object.keys(styles).map(function (key, i) {\n      if (key === \"fill\") newStyles[key] = choroplethValue.value;else newStyles[key] = styles[key];\n    });\n    return newStyles;\n  } else {\n    return styles;\n  }\n}\n\nfunction calculateResizeFactor(actualDimension, baseDimension) {\n  return 1 / 100 * (100 / actualDimension * baseDimension);\n}\n\nfunction calculateMousePosition(direction, projection, props, zoom, resizeFactor) {\n  var center = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : props.center;\n  var width = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : props.width;\n  var height = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : props.height;\n\n  var reference = { x: 0, y: 1 };\n  var reverseRotation = projection().rotate().map(function (item) {\n    return -item;\n  });\n  return (projection().rotate(reverseRotation)([-center[0], -center[1]])[reference[direction]] - (reference[direction] === 0 ? width : height) / 2) * zoom * (1 / resizeFactor);\n}\n\nfunction isChildOfType(child, expectedType) {\n  return child.props.componentIdentifier === expectedType;\n}\n\nfunction createNewChildren(children, props) {\n  if (!children) return;\n  if (!children.length) {\n    return isChildOfType(children, \"Geographies\") ? _react2.default.cloneElement(children, {\n      projection: props.projection\n    }) : isChildOfType(children, \"Markers\") || isChildOfType(children, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(children, {\n      projection: props.projection,\n      zoom: props.zoom\n    }) : children;\n  } else {\n    return children.map(function (child, i) {\n      if (!child) return;\n      return isChildOfType(child, \"Geographies\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection\n      }) : isChildOfType(child, \"Markers\") || isChildOfType(child, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection,\n        zoom: props.zoom\n      }) : child;\n    });\n  }\n}\n\nfunction roundPath(path, precision) {\n  if (!path) return;\n  var query = /[\\d\\.-][\\d\\.e-]*/g;\n  return path.replace(query, function (n) {\n    return Math.round(n * (1 / precision)) / (1 / precision);\n  });\n}\n\nfunction createConnectorPath(connectorType, endPoint) {\n  return \"M0,0 L\" + endPoint[0] + \",\" + endPoint[1];\n}\n\nfunction createTextAnchor(dx) {\n  if (dx > 0) return \"start\";else if (dx < 0) return \"end\";else return \"middle\";\n}"],"sourceRoot":""}