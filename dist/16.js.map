{"version":3,"sources":["webpack:///./src/components/Map/Map.jsx","webpack:///./src/components/Map/index.jsx"],"names":["StyledMap","styled","div","_templateObject","colors","dark","primaryMap","fill","secondary","stroke","strokeWidth","outline","cursor","transition","secondaryMap","light","pressedMap","Map","props","data","center","zoom","geoUrl","handleClick","react_default","a","createElement","Map_Map","lib","projectionConfig","scale","width","height","style","geographyUrl","geographies","projection","map","geography","key","properties","NAME","data-country","default","_objectSpread","hover","pressed","onClick","round","Spinner","propTypes","PropTypes","objectOf","object","arrayOf","number","isRequired","string","func","loading","bool","defaultProps"],"mappings":"0dAGA,IAUeA,SAVGC,EAAOC,IAAVC,IACOC,IAAOC,grBCS7B,IAAMC,EAAa,CACjBC,KAAMH,IAAOI,UACbC,OAAQL,IAAOC,KACfK,YAAa,IACbC,QAAS,OACTC,OAAQ,UACRC,WAAY,YAGRC,EAAe,CACnBP,KAAMH,IAAOW,MACbN,OAAQL,IAAOC,KACfK,YAAa,IACbC,QAAS,OACTE,WAAY,YAGRG,EAAa,CACjBT,KAAMH,IAAOW,MACbN,OAAQL,IAAOC,KACfK,YAAa,IACbC,QAAS,OACTC,OAAQ,UACRC,WAAY,YAGRI,EAAM,SAACC,GAAU,IAEnBC,EACED,EADFC,KAAMC,EACJF,EADIE,OAAQC,EACZH,EADYG,KAAMC,EAClBJ,EADkBI,OAAQC,EAC1BL,EAD0BK,YAG9B,OACEC,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,cAAD,CACEC,iBAAkB,CAChBC,MAAO,KAETC,MAAO,IACPC,OAAQ,IACRC,MAAO,CACLF,MAAO,OACPC,OAAQ,SAGTb,EACCK,EAAAC,EAAAC,cAACE,EAAA,cAAD,CAAeR,OAAQA,EAAQC,KAAMA,GACnCG,EAAAC,EAAAC,cAACE,EAAA,YAAD,CAAaM,aAAcZ,GACxB,SAACa,EAAaC,GAAd,OAA6BD,EAAYE,IAAI,SAAAC,GAAS,OACrDd,EAAAC,EAAAC,cAACE,EAAA,UAAD,CACEW,IAAKD,EAAUE,WAAWC,KAC1BH,UAAWA,EACXI,eAAcJ,EAAUE,WAAWC,KACnCL,WAAYA,EACZH,MACEd,EAAKmB,EAAUE,WAAWC,MACtB,CACAE,QAAAC,EAAA,GAActC,GACduC,MAAKD,EAAA,GAAO5B,GACZ8B,QAAOF,EAAA,GAAO5B,IAEd,CACA2B,QAAAC,EAAA,GAAc9B,GACd+B,MAAKD,EAAA,GAAO9B,GACZgC,QAAOF,EAAA,GAAO9B,IAGpBiC,QACE5B,EAAKmB,EAAUE,WAAWC,OAASlB,EAErCyB,OAAK,SAObxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,SAOVhC,EAAIiC,UAAY,CACd/B,KAAMgC,IAAUC,SAASD,IAAUE,QACnCjC,OAAQ+B,IAAUG,QAAQH,IAAUI,QAAQC,WAC5CnC,KAAM8B,IAAUI,OAAOC,WACvBlC,OAAQ6B,IAAUM,OAAOD,WACzBjC,YAAa4B,IAAUO,KAAKF,WAC5BG,QAASR,IAAUS,KAAKJ,YAG1BvC,EAAI4C,aAAe,CACjB1C,KAAM,MAGOF","file":"16.js","sourcesContent":["import styled from 'styled-components';\nimport {colors} from '../../styles/globals';\n\nconst StyledMap = styled.div`\n  border: 2px solid ${colors.dark};\n  border-radius: 2px;\n  width: 60vw;\n  margin: 0 auto;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n`;\n\nexport default StyledMap;\n","import {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from 'react-simple-maps';\n\nimport PropTypes from 'prop-types';\nimport {colors} from '../../styles/globals';\nimport React from \"react\";\nimport StyledMap from \"./Map\";\nimport Spinner from \"../../utils/Spinner\";\n\nconst primaryMap = {\n  fill: colors.secondary,\n  stroke: colors.dark,\n  strokeWidth: 0.65,\n  outline: 'none',\n  cursor: 'pointer',\n  transition: 'fill .5s',\n};\n\nconst secondaryMap = {\n  fill: colors.light,\n  stroke: colors.dark,\n  strokeWidth: 0.65,\n  outline: 'none',\n  transition: 'fill .5s',\n};\n\nconst pressedMap = {\n  fill: colors.light,\n  stroke: colors.dark,\n  strokeWidth: 0.65,\n  outline: 'none',\n  cursor: 'pointer',\n  transition: 'fill .5s',\n};\n\nconst Map = (props) => {\n  const {\n    data, center, zoom, geoUrl, handleClick,\n  } = props;\n\n  return (\n    <StyledMap>\n      <ComposableMap\n        projectionConfig={{\n          scale: 220,\n        }}\n        width={980}\n        height={551}\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      >\n        {data ? (\n          <ZoomableGroup center={center} zoom={zoom}>\n            <Geographies geographyUrl={geoUrl}>\n              {(geographies, projection) => geographies.map(geography => (\n                <Geography\n                  key={geography.properties.NAME}\n                  geography={geography}\n                  data-country={geography.properties.NAME}\n                  projection={projection}\n                  style={\n                    data[geography.properties.NAME]\n                      ? {\n                        default: { ...primaryMap },\n                        hover: { ...pressedMap },\n                        pressed: { ...pressedMap },\n                      }\n                      : {\n                        default: { ...secondaryMap },\n                        hover: { ...secondaryMap },\n                        pressed: { ...secondaryMap },\n                      }\n                  }\n                  onClick={\n                    data[geography.properties.NAME] && handleClick\n                  }\n                  round\n                />\n              ))\n              }\n            </Geographies>\n          </ZoomableGroup>\n        ) : (\n          <Spinner />\n        )}\n      </ComposableMap>\n    </StyledMap>\n  );\n};\n\nMap.propTypes = {\n  data: PropTypes.objectOf(PropTypes.object),\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n  zoom: PropTypes.number.isRequired,\n  geoUrl: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nMap.defaultProps = {\n  data: null,\n};\n\nexport default Map;\n"],"sourceRoot":""}