{"version":3,"sources":["webpack:///./node_modules/react-simple-maps/lib/index.js","webpack:///./node_modules/react-simple-maps/lib/ComposableMap.js","webpack:///./node_modules/react-simple-maps/lib/projections.js","webpack:///./node_modules/react-simple-maps/lib/ZoomableGroup.js","webpack:///./node_modules/react-simple-maps/lib/Geographies.js","webpack:///./node_modules/react-simple-maps/lib/Geography.js","webpack:///./node_modules/react-simple-maps/lib/Marker.js","webpack:///./node_modules/react-simple-maps/lib/Markers.js","webpack:///./node_modules/react-simple-maps/lib/Annotation.js","webpack:///./node_modules/react-simple-maps/lib/Graticule.js","webpack:///./node_modules/d3-geo-projection/src/math.js","webpack:///./node_modules/d3-geo-projection/src/airy.js","webpack:///./node_modules/d3-geo-projection/src/aitoff.js","webpack:///./node_modules/d3-geo-projection/src/armadillo.js","webpack:///./node_modules/d3-geo-projection/src/august.js","webpack:///./node_modules/d3-geo-projection/src/baker.js","webpack:///./node_modules/d3-geo-projection/src/berghaus.js","webpack:///./node_modules/d3-geo-projection/src/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/boggs.js","webpack:///./node_modules/d3-geo-projection/src/parallel1.js","webpack:///./node_modules/d3-geo-projection/src/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/bonne.js","webpack:///./node_modules/d3-geo-projection/src/bottomley.js","webpack:///./node_modules/d3-geo-projection/src/bromley.js","webpack:///./node_modules/d3-geo-projection/src/chamberlin.js","webpack:///./node_modules/d3-geo-projection/src/collignon.js","webpack:///./node_modules/d3-geo-projection/src/craig.js","webpack:///./node_modules/d3-geo-projection/src/craster.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack:///./node_modules/d3-geo-projection/src/eckert1.js","webpack:///./node_modules/d3-geo-projection/src/eckert2.js","webpack:///./node_modules/d3-geo-projection/src/eckert3.js","webpack:///./node_modules/d3-geo-projection/src/eckert4.js","webpack:///./node_modules/d3-geo-projection/src/eckert5.js","webpack:///./node_modules/d3-geo-projection/src/eckert6.js","webpack:///./node_modules/d3-geo-projection/src/eisenlohr.js","webpack:///./node_modules/d3-geo-projection/src/fahey.js","webpack:///./node_modules/d3-geo-projection/src/foucaut.js","webpack:///./node_modules/d3-geo-projection/src/gilbert.js","webpack:///./node_modules/d3-geo-projection/src/gingery.js","webpack:///./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg4.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg5.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg6.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg8.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg9.js","webpack:///./node_modules/d3-geo-projection/src/square.js","webpack:///./node_modules/d3-geo-projection/src/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/elliptic.js","webpack:///./node_modules/d3-geo-projection/src/guyou.js","webpack:///./node_modules/d3-geo-projection/src/hammer.js","webpack:///./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack:///./node_modules/d3-geo-projection/src/healpix.js","webpack:///./node_modules/d3-geo-projection/src/hill.js","webpack:///./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/index.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack:///./node_modules/d3-geo-projection/src/lagrange.js","webpack:///./node_modules/d3-geo-projection/src/larrivee.js","webpack:///./node_modules/d3-geo-projection/src/laskowski.js","webpack:///./node_modules/d3-geo-projection/src/littrow.js","webpack:///./node_modules/d3-geo-projection/src/loximuthal.js","webpack:///./node_modules/d3-geo-projection/src/miller.js","webpack:///./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/naturalEarth.js","webpack:///./node_modules/d3-geo-projection/src/nellHammer.js","webpack:///./node_modules/d3-geo-projection/src/patterson.js","webpack:///./node_modules/d3-geo-projection/src/polyconic.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack:///./node_modules/d3-geo-projection/src/noop.js","webpack:///./node_modules/d3-geo-projection/src/project/index.js","webpack:///./node_modules/d3-geo-projection/src/project/clockwise.js","webpack:///./node_modules/d3-geo-projection/src/project/contains.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack:///./node_modules/d3-geo-projection/src/quantize.js","webpack:///./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/robinson.js","webpack:///./node_modules/d3-geo-projection/src/satellite.js","webpack:///./node_modules/d3-geo-projection/src/stitch.js","webpack:///./node_modules/d3-geo-projection/src/times.js","webpack:///./node_modules/d3-geo-projection/src/twoPoint.js","webpack:///./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack:///./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack:///./node_modules/d3-geo-projection/src/wagner4.js","webpack:///./node_modules/d3-geo-projection/src/wagner6.js","webpack:///./node_modules/d3-geo-projection/src/wagner7.js","webpack:///./node_modules/d3-geo-projection/src/wiechel.js","webpack:///./node_modules/d3-geo-projection/src/winkel3.js","webpack:///./node_modules/d3-geo-projection/index.js","webpack:///./node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson-client/src/bbox.js","webpack:///./node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson-client/src/stitch.js","webpack:///./node_modules/topojson-client/src/mesh.js","webpack:///./node_modules/topojson-client/src/merge.js","webpack:///./node_modules/topojson-client/src/bisect.js","webpack:///./node_modules/topojson-client/src/neighbors.js","webpack:///./node_modules/topojson-client/src/quantize.js","webpack:///./node_modules/topojson-client/src/untransform.js","webpack:///./node_modules/topojson-client/index.js","webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/polygon.js","webpack:///./node_modules/d3-geo/src/clip/extent.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/distance.js","webpack:///./node_modules/d3-geo/src/contains.js","webpack:///./node_modules/d3-geo/src/graticule.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/albersUsa.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/conicConformal.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/identity.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-geo/index.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/cross.js","webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-array/src/threshold/sturges.js","webpack:///./node_modules/d3-array/src/merge.js","webpack:///./node_modules/d3-array/src/index.js","webpack:///./node_modules/react-simple-maps/lib/utils.js","webpack:///./node_modules/react-simple-maps/lib/projectionConfig.js"],"names":["Object","defineProperty","exports","value","_ComposableMap","__webpack_require__","enumerable","get","_interopRequireDefault","default","_ZoomableGroup","_Geographies","_Geography","_Marker","_Markers","_Annotation","_Graticule","obj","__esModule","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_react","_react2","_projections2","_projectionConfig2","ComposableMap","_Component","instance","TypeError","_classCallCheck","this","_this","self","call","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","projection","bind","subClass","superClass","create","constructor","setPrototypeOf","_inherits","Component","_props","projectionConfig","width","height","_props2","style","showCenter","children","createElement","viewBox","className","cloneElement","x","y","fill","defaultProps","config","projectionName","scale","xOffset","yOffset","rotation","precision","projectionReference","translate","rotate","_d3GeoProjection","_d3Geo","_projectionConfig","mercator","geoMercator","miller","geoMiller","times","geoTimes","robinson","geoRobinson","winkel3","geoWinkel3","eckert4","geoEckert4","_utils","ZoomableGroup","backdropX","backdrop","backdropY","backdropWidth","backdropHeight","state","mouseX","calculateMousePosition","zoom","mouseY","mouseXStart","mouseYStart","isPressed","resizeFactorX","resizeFactorY","Math","round","handleMouseMove","handleMouseUp","handleMouseDown","handleResize","_ref","pageX","pageY","disablePanning","setState","_ref2","nextProps","_state","center","zoomFactor","centerChanged","JSON","stringify","calculateResizeFactor","zoomableGroupNode","parentNode","getBoundingClientRect","xPercentageChange","yPercentageChange","_props3","window","addEventListener","removeEventListener","_this2","_props4","_state2","ref","transform","onMouseMove","onMouseUp","onMouseDown","strokeWidth","createNewChildren","_topojsonClient","Geographies","geographyPaths","fetchGeographies","geographyUrl","request","XMLHttpRequest","open","onload","status","parse","responseText","feature","objects","keys","features","onGeographiesLoaded","onGeographyPathsLoaded","String","onerror","console","log","send","nextState","geoPathsChanged","choroplethChanged","choropleth","disableOptimization","componentIdentifier","_extends","assign","arguments","source","hasOwnProperty","pathCache","Geography","hover","pressed","handleMouseEnter","handleMouseLeave","handleMouseClick","handleFocus","handleBlur","evt","persist","onClick","geography","onMouseEnter","onMouseLeave","_props5","_props6","_props7","onFocus","_props8","onBlur","_props9","cacheId","tabable","pathString","roundPath","geoPath","renderPath","excludeProps","restProps","filter","indexOf","reduce","d","tabIndex","Marker","marker","coordinates","Markers","apply","undefined","map","child","Annotation","subject","dx","dy","stroke","connectorPath","createConnectorPath","textAnchor","createTextAnchor","computeGraticule","step","geoGraticule","computeOutline","outline","Graticule","renderGraticule","graticulePath","outlinePath","pointerEvents","abs","atan","atan2","cos","ceil","exp","floor","max","min","pow","sign","sin","tan","math_epsilon","epsilon2","pi","PI","halfPi","quarterPi","sqrt1_2","SQRT1_2","sqrt2","sqrt","sqrtPi","tau","degrees","radians","asin","acos","sinh","cosh","airyRaw","beta","tanBeta_2","b","forward","cosx","cosy","siny","cosz","k","invert","delta","r","z","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","airy","m","d3_geo","p","radius","_","clipAngle","aitoffRaw","sincia","sinci","x1","y1","f","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","c","e","fx","fy","dxdx","dxdy","dydx","dydy","aitoff","armadilloRaw","phi0","sinPhi0","cosPhi0","sPhi0","tanPhi0","lambda","phi","cosPhi","cosLambda","sinLambda","sinPhi","A","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dLambda","dPhi","armadillo","stream_","stream","parallel","rotateStream","sphereStream","sphere","polygonStart","lineStart","point","lineEnd","polygonEnd","augustRaw","tanPhi","x2","y2","s","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","august","sqrt8","baker_phi0","bakerRaw","y0","cosPhi_2","tanPhi_2","baker","berghausRaw","lobes","theta","theta0","α","cotα","berghaus","projectionStream","cr","sr","delta0","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","cx","cy","mollweideRaw","mollweide","boggs_k","boggs_w","boggsRaw","ky","boggs","parallel1","projectAt","sinusoidalRaw","sinusoidal","bonneRaw","cotPhi0","rho","bonne","bottomleyRaw","sinPsi","bottomley","fraction","bromleyRaw","bromley","chamberlin_distance","c1","s1","c2","s2","cosdLambda","sindPhi","sindLambda","angle","a","longitude","chamberlinRaw","p0","p1","p2","points","v","beta0","beta1","beta2","mean","Array","slice","j","pointRadians","chamberlinAfrica","chamberlin","type","R","collignonRaw","alpha","collignon","craigRaw","cosλ","craig","sqrt3","crasterRaw","craster","cylindricalEqualAreaRaw","cylindricalEqualArea","cylindricalStereographicRaw","cylindricalStereographic","eckert1Raw","eckert1","eckert2Raw","eckert2","eckert3Raw","eckert3","eckert4Raw","Infinity","eckert5Raw","eckert5","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","c0","t","_0","_1","cos1","t2","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","deltaLambda","deltaPhi","eisenlohr","faheyK","faheyRaw","fahey","foucautRaw","cosk","foucaut","gilbertForward","gilbertInvert","src_gilbert","projectionType","equirectangular","gilbert","property","name","gingeryRaw","n","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","y_","h","gingery","cRho","sRho","ginzburgPolyconic","g","phi2","xB","yB","q","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg4","ginzburg5Raw","ginzburg5","ginzburg6Raw","ginzburg6","ginzburg8Raw","lambda2","lambda4","ginzburg8","ginzburg9Raw","ginzburg9","square","project","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","lambda1","x0","g2","zetaMug","f2","df","gringortenHexadecant","sx","sy","gringortenHexadecantInvert","gringorten","ellipticJ","u","ai","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","tn","guyouComplexDivide","guyou","hammerRaw","B","hammerQuarticAuthalicRaw","hammer","coefficient","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","hammerRetroazimuthal","rotate_","circle","ring","healpixParallel","healpixLambert","healpixRaw","H","dy1","w","healpix","src","concat","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","hill","ratio","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","sinuMollweide","homolosineRaw","homolosine","pointEqual","interpolateLine","resampled","push","interrupted","lobe","lambda0","phi1","interpolateSphere","bounds","l","bound","boggs_lobes","interrupted_boggs","homolosine_lobes","interrupted_homolosine","mollweide_lobes","interrupted_mollweide","mollweideHemispheres_lobes","mollweideHemispheres","sinuMollweide_lobes","interrupted_sinuMollweide","sinusoidal_lobes","interrupted_sinusoidal","kavrayskiy7Raw","kavrayskiy7","lagrangeRaw","lagrange","spacing","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","f0","f1","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","larrivee","laskowskiRaw","lambdaPhi","laskowski","littrowRaw","y2_1","littrow","loximuthalRaw","loximuthal","millerRaw","modifiedStereographicRaw","zr","zi","ar","br","bi","deltar","deltai","sinc","alaska","gs48","gs50","modifiedStereographic_miller","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarParabolic","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarQuartic","mtFlatPolarSinusoidalRaw","mtFlatPolarSinusoidal","naturalEarthRaw","phi4","naturalEarth","nellHammerRaw","nellHammer","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","patterson","polyconicRaw","polyconic","matrix","subtract","matrix_angle","matrix_length","multiply","polyhedral","root","face","node","recurse","parent","edges","faceEdges","shared","found","sharedEdge","polyhedral_pointEqual","forEach","hasInverse","faceInvert","faceDegrees","proj","edge","multiPoint","notPoles","inside","isArray","some","octahedron","polyhedral_octahedron","butterfly","faceProjection","faces","kx","collignonK","polyhedral_collignon","waterman","w5","xyz","waterman_cartesian","hexagon","spherical","cornerNormals","parents","normals","cosphi","dot","cartesian","noop","src_project","object","Error","projectFeature","projectFeatureCollection","projectGeometry","o","id","properties","geometry","geometries","projectGeometryCollection","sink","sinkPoint","sinkLine","sinkPolygon","result","project_points","lines","polygons","holes","area","clockwise","hole","polygon","contains","yi","pj","xj","yj","quincuncial","projectQuincuncial","quincuncial_gringorten","peirce","quantize","digits","quantizePoint","toFixed","quantizePoints","quantizePolygon","quantizeGeometry","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","rectangularPolyconic","robinson_K","robinsonRaw","i0","di","ax","ay","bx","by","yy","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","satellite","distance","tilt","epsilonInverse","stitch_x0","x0e","stitch_x1","x1e","stitch_y0","y0e","stitch_y1","y1e","normalizePoint","clampPoint","clampPoints","extractFragments","fragments","pointk","xk","yk","fragmentBefore","pop","stitchFeature","stitchGeometry","fragment","start","startFragment","end","endFragment","fragmentByStart","fragmentByEnd","index","stitchFragments","stitch","timesRaw","twoPoint","raw","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPointEquidistantRaw","z0","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","G","P2","P2_A2","G_P2","Q","x2_y2","c3","a1","m1","theta1","vanDerGrinten","vanDerGrinten2Raw","vanDerGrinten2","vanDerGrinten3Raw","vanDerGrinten3","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","vanDerGrinten4","wagner4_A","wagner4_B","wagner4Raw","wagner4","wagner6Raw","wagner6","wagner7Raw","t1","wagner7","wiechelRaw","sin1_Phi","wiechel","winkel3Raw","F","sinphi","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","__webpack_exports__","identity","src_transform","topology","src_bbox","bbox","bboxPoint","bboxGeometry","arcs","arc","reverse","array","feature_feature","feature_object","transformPoint","line","stitchedArcs","emptyIndex","flush","dp","ends","fg","unshift","gf","mesh","meshArcs","geom","geomsByArc","extract0","extract1","extract2","extract3","geoms","extractArcs","merge","mergeArcs","polygonsByArc","groups","extract","planarRingArea","group","neighbors","ki","bisect","lo","hi","mid","src_neighbors","indexesByArc","geometryType","LineString","MultiLineString","Polygon","MultiPolygon","indexes","ij","ik","splice","bb","untransform","adder","Adder","reset","add","temp","valueOf","bv","av","epsilon","math_sign","haversin","streamGeometry","streamGeometryType","streamObjectType","Feature","FeatureCollection","Sphere","Point","MultiPoint","streamLine","streamPolygon","GeometryCollection","closed","coordinate","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","sdLambda","adLambda","src_area","cartesian_spherical","cartesian_cartesian","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","range","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","bounds_linePoint","normal","inflection","phii","lambdai","antimeridian","bounds_angle","rangeCompare","rangeContains","W0","W1","centroid_X0","centroid_Y0","Z0","centroid_X1","centroid_Y1","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","merged","deltaMax","sort","NaN","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","centroidRingPointFirst","centroidRingPoint","cz","centroid","constant","compose","rotationIdentity","rotateRadians","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","circleStream","direction","t0","cosRadius","sinRadius","circleRadius","src_circle","buffer","rejoin","shift","clip_line","Intersection","other","entry","clip_polygon","segments","compareIntersection","startInside","interpolate","clip","segment","polygon_link","current","isSubject","clipMax","clipMin","extent_clipExtent","visible","from","to","corner","comparePoint","ca","cb","x__","y__","v__","x_","v_","first","clean","activeStream","bufferStream","clipStream","linePoint","winding","a0","b0","b1","polygonInside","cleanInside","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","extent","sum","polygonContains","point0","sinPhi1","cosPhi1","point1","absDelta","intersection","phiArc","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ab","ringRadians","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","src_path","contextStream","path","src_clip","pointVisible","clipLine","rotatedStart","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","ringSegments","validSegment","clip_antimeridian","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","clip_circle","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","n1xn2","uu","polar","q1","code","v0","v00","point2","methods","transformer","TransformStream","fitExtent","clipExtent","fitSize","size","maxDepth","cosMinDistance","resample","delta2","resampleLineTo","depth","d2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","projection_projection","projectionMutator","projectRotate","preclip","postclip","projectResample","projectTransform","recenter","conicProjection","parallels","conicEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","hawaii","pointStream","albersUsa","streams","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercatorRaw","mercatorProjection","reclip","tany","conicConformalRaw","conicConformal","equirectangularRaw","conicEquidistantRaw","gy","nx","conicEquidistant","gnomonicRaw","gnomonic","scaleTranslate","tx","ty","projection_identity","reflectX","reflectY","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","transverseMercator","ascending","compare","array_array","stop","arrays","replaceStrokeWidth","styles","newStyles","createChoroplethStyles","choroplethValue","actualDimension","baseDimension","resizeFactor","reference","reverseRotation","item","isChildOfType","replace","connectorType","endPoint","expectedType"],"mappings":"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","file":"4.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ComposableMap = require(\"./ComposableMap\");\n\nObject.defineProperty(exports, \"ComposableMap\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ComposableMap).default;\n  }\n});\n\nvar _ZoomableGroup = require(\"./ZoomableGroup\");\n\nObject.defineProperty(exports, \"ZoomableGroup\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ZoomableGroup).default;\n  }\n});\n\nvar _Geographies = require(\"./Geographies\");\n\nObject.defineProperty(exports, \"Geographies\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geographies).default;\n  }\n});\n\nvar _Geography = require(\"./Geography\");\n\nObject.defineProperty(exports, \"Geography\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geography).default;\n  }\n});\n\nvar _Marker = require(\"./Marker\");\n\nObject.defineProperty(exports, \"Marker\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Marker).default;\n  }\n});\n\nvar _Markers = require(\"./Markers\");\n\nObject.defineProperty(exports, \"Markers\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Markers).default;\n  }\n});\n\nvar _Annotation = require(\"./Annotation\");\n\nObject.defineProperty(exports, \"Annotation\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Annotation).default;\n  }\n});\n\nvar _Graticule = require(\"./Graticule\");\n\nObject.defineProperty(exports, \"Graticule\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Graticule).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _projections = require(\"./projections\");\n\nvar _projections2 = _interopRequireDefault(_projections);\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ComposableMap = function (_Component) {\n  _inherits(ComposableMap, _Component);\n\n  function ComposableMap() {\n    _classCallCheck(this, ComposableMap);\n\n    var _this = _possibleConstructorReturn(this, (ComposableMap.__proto__ || Object.getPrototypeOf(ComposableMap)).call(this));\n\n    _this.projection = _this.projection.bind(_this);\n    return _this;\n  }\n\n  _createClass(ComposableMap, [{\n    key: \"projection\",\n    value: function projection() {\n      var _props = this.props,\n          projection = _props.projection,\n          projectionConfig = _props.projectionConfig,\n          width = _props.width,\n          height = _props.height;\n\n\n      return typeof projection !== \"function\" ? (0, _projections2.default)(width, height, projectionConfig, projection) : projection(width, height, projectionConfig);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          style = _props2.style,\n          showCenter = _props2.showCenter,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"svg\",\n        { width: width,\n          height: height,\n          viewBox: \"0 0 \" + width + \" \" + height,\n          className: \"rsm-svg\",\n          style: style },\n        _react2.default.cloneElement(this.props.children, {\n          projection: this.projection,\n          width: width,\n          height: height\n        }),\n        showCenter && _react2.default.createElement(\n          \"g\",\n          null,\n          _react2.default.createElement(\"rect\", { x: width / 2 - 0.5, y: 0, width: 1, height: height, fill: \"#e91e63\" }),\n          _react2.default.createElement(\"rect\", { x: 0, y: height / 2 - 0.5, width: width, height: 1, fill: \"#e91e63\" })\n        )\n      );\n    }\n  }]);\n\n  return ComposableMap;\n}(_react.Component);\n\nComposableMap.defaultProps = {\n  width: 800,\n  height: 450,\n  projection: \"times\",\n  projectionConfig: _projectionConfig2.default\n};\n\nexports.default = ComposableMap;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (width, height, config, projectionName) {\n\n  var scale = config.scale || _projectionConfig2.default.scale;\n  var xOffset = config.xOffset || _projectionConfig2.default.xOffset;\n  var yOffset = config.yOffset || _projectionConfig2.default.yOffset;\n  var rotation = config.rotation || _projectionConfig2.default.rotation;\n  var precision = config.precision || _projectionConfig2.default.precision;\n\n  return projectionReference[projectionName]().scale(scale).translate([xOffset + width / 2, yOffset + height / 2]).rotate(rotation).precision(precision);\n};\n\nvar _d3GeoProjection = require(\"d3-geo-projection\");\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar projectionReference = {\n  mercator: _d3Geo.geoMercator,\n  miller: _d3GeoProjection.geoMiller,\n  times: _d3GeoProjection.geoTimes,\n  robinson: _d3GeoProjection.geoRobinson,\n  winkel3: _d3GeoProjection.geoWinkel3,\n  eckert4: _d3GeoProjection.geoEckert4\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ZoomableGroup = function (_Component) {\n  _inherits(ZoomableGroup, _Component);\n\n  function ZoomableGroup(props) {\n    _classCallCheck(this, ZoomableGroup);\n\n    var _this = _possibleConstructorReturn(this, (ZoomableGroup.__proto__ || Object.getPrototypeOf(ZoomableGroup)).call(this, props));\n\n    var backdropX = props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropY = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n    var backdropWidth = props.projection().rotate([0, 0, 0])([props.backdrop.x[1], 0])[0] - props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropHeight = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[1]])[1] - props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n\n    _this.state = {\n      mouseX: (0, _utils.calculateMousePosition)(\"x\", props.projection, props, props.zoom, 1),\n      mouseY: (0, _utils.calculateMousePosition)(\"y\", props.projection, props, props.zoom, 1),\n      mouseXStart: 0,\n      mouseYStart: 0,\n      isPressed: false,\n      resizeFactorX: 1,\n      resizeFactorY: 1,\n      backdrop: {\n        width: Math.round(backdropWidth),\n        height: Math.round(backdropHeight),\n        x: Math.round(backdropX),\n        y: Math.round(backdropY)\n      }\n    };\n\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleResize = _this.handleResize.bind(_this);\n    return _this;\n  }\n\n  _createClass(ZoomableGroup, [{\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(_ref) {\n      var pageX = _ref.pageX,\n          pageY = _ref.pageY;\n\n      if (this.props.disablePanning) return;\n\n      if (this.state.isPressed) {\n        this.setState({\n          mouseX: pageX - this.state.mouseXStart,\n          mouseY: pageY - this.state.mouseYStart\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      if (this.props.disablePanning) return;\n      if (this.state.isPressed) {\n        this.setState({\n          isPressed: false\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(_ref2) {\n      var pageX = _ref2.pageX,\n          pageY = _ref2.pageY;\n\n      if (this.props.disablePanning) return;\n      this.setState({\n        isPressed: true,\n        mouseXStart: pageX - this.state.mouseX,\n        mouseYStart: pageY - this.state.mouseY\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _state = this.state,\n          mouseX = _state.mouseX,\n          mouseY = _state.mouseY,\n          resizeFactorX = _state.resizeFactorX,\n          resizeFactorY = _state.resizeFactorY;\n      var _props = this.props,\n          projection = _props.projection,\n          center = _props.center,\n          zoom = _props.zoom;\n\n\n      var zoomFactor = nextProps.zoom / zoom;\n      var centerChanged = JSON.stringify(nextProps.center) !== JSON.stringify(center);\n\n      this.setState({\n        zoom: nextProps.zoom,\n        mouseX: centerChanged ? (0, _utils.calculateMousePosition)(\"x\", projection, nextProps, nextProps.zoom, resizeFactorX) : mouseX * zoomFactor,\n        mouseY: centerChanged ? (0, _utils.calculateMousePosition)(\"y\", projection, nextProps, nextProps.zoom, resizeFactorY) : mouseY * zoomFactor\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          projection = _props2.projection,\n          zoom = _props2.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      var xPercentageChange = 1 / resizeFactorX * this.state.resizeFactorX;\n      var yPercentageChange = 1 / resizeFactorY * this.state.resizeFactorY;\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: this.state.mouseX * xPercentageChange,\n        mouseY: this.state.mouseY * yPercentageChange\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props3 = this.props,\n          width = _props3.width,\n          height = _props3.height,\n          projection = _props3.projection,\n          zoom = _props3.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: (0, _utils.calculateMousePosition)(\"x\", projection, this.props, zoom, resizeFactorX),\n        mouseY: (0, _utils.calculateMousePosition)(\"y\", projection, this.props, zoom, resizeFactorY)\n      });\n\n      window.addEventListener(\"resize\", this.handleResize);\n      window.addEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n      window.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          width = _props4.width,\n          height = _props4.height,\n          zoom = _props4.zoom,\n          style = _props4.style,\n          projection = _props4.projection,\n          children = _props4.children;\n      var _state2 = this.state,\n          mouseX = _state2.mouseX,\n          mouseY = _state2.mouseY,\n          resizeFactorX = _state2.resizeFactorX,\n          resizeFactorY = _state2.resizeFactorY;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-zoomable-group\",\n          ref: function ref(zoomableGroupNode) {\n            return _this2.zoomableGroupNode = zoomableGroupNode;\n          },\n          transform: \"\\n           translate(\\n             \" + Math.round((width / 2 + resizeFactorX * mouseX) * 100) / 100 + \"\\n             \" + Math.round((height / 2 + resizeFactorY * mouseY) * 100) / 100 + \"\\n           )\\n           scale(\" + zoom + \")\\n           translate(\" + -width / 2 + \" \" + -height / 2 + \")\\n         \",\n          onMouseMove: this.handleMouseMove,\n          onMouseUp: this.handleMouseUp,\n          onMouseDown: this.handleMouseDown,\n          style: style\n        },\n        _react2.default.createElement(\"rect\", {\n          x: this.state.backdrop.x,\n          y: this.state.backdrop.y,\n          width: this.state.backdrop.width,\n          height: this.state.backdrop.height,\n          fill: \"transparent\",\n          style: { strokeWidth: 0 }\n        }),\n        (0, _utils.createNewChildren)(children, this.props)\n      );\n    }\n  }]);\n\n  return ZoomableGroup;\n}(_react.Component);\n\nZoomableGroup.defaultProps = {\n  center: [0, 0],\n  backdrop: {\n    x: [-179.9, 179.9],\n    y: [89.9, -89.9]\n  },\n  zoom: 1,\n  disablePanning: false\n};\n\nexports.default = ZoomableGroup;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _topojsonClient = require(\"topojson-client\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Geographies = function (_Component) {\n  _inherits(Geographies, _Component);\n\n  function Geographies(props) {\n    _classCallCheck(this, Geographies);\n\n    var _this = _possibleConstructorReturn(this, (Geographies.__proto__ || Object.getPrototypeOf(Geographies)).call(this, props));\n\n    _this.state = {\n      geographyPaths: props.geographyPaths\n    };\n\n    _this.fetchGeographies = _this.fetchGeographies.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geographies, [{\n    key: \"fetchGeographies\",\n    value: function fetchGeographies(geographyUrl) {\n      var _this2 = this;\n\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height;\n\n\n      if (!geographyUrl) return;\n\n      var request = new XMLHttpRequest();\n      request.open(\"GET\", geographyUrl, true);\n\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n          var geographyPaths = JSON.parse(request.responseText);\n          _this2.setState({\n            geographyPaths: (0, _topojsonClient.feature)(geographyPaths, geographyPaths.objects[Object.keys(geographyPaths.objects)[0]]).features\n          }, function () {\n            if (!_this2.props.onGeographiesLoaded) return;\n            _this2.props.onGeographyPathsLoaded(String(request.status));\n          });\n        } else {\n          if (!_this2.props.onGeographiesLoaded) return;\n          _this2.props.onGeographyPathsLoaded(String(request.status));\n        }\n      };\n      request.onerror = function () {\n        console.log(\"There was a connection error...\");\n      };\n      request.send();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      ;\n      if (!nextProps.geographyUrl && !nextProps.geographyPaths.length !== this.props.geographyPaths.length) {\n        this.setState({\n          geographyPaths: nextProps.geographyPaths\n        });\n        return;\n      }\n      if (nextProps.geographyUrl !== this.props.geographyUrl) {\n        this.fetchGeographies(nextProps.geographyUrl);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var geoPathsChanged = nextState.geographyPaths.length !== this.state.geographyPaths.length;\n      var choroplethChanged = JSON.stringify(nextProps.choropleth) !== JSON.stringify(this.props.choropleth);\n      return geoPathsChanged || choroplethChanged || nextProps.disableOptimization;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchGeographies(this.props.geographyUrl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          projection = _props2.projection,\n          style = _props2.style,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-geographies\", style: style },\n        children(this.state.geographyPaths, projection)\n      );\n    }\n  }]);\n\n  return Geographies;\n}(_react.Component);\n\nGeographies.defaultProps = {\n  componentIdentifier: \"Geographies\",\n  disableOptimization: false,\n  geographyUrl: \"\",\n  geographyPaths: []\n};\n\nexports.default = Geographies;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar pathCache = {};\n\nvar renderPath = function renderPath(cacheId, geography, projection, round, precision) {\n  if (pathCache[cacheId]) return pathCache[cacheId];\n\n  var pathString = cacheId ? pathCache[cacheId] ? pathCache[cacheId] : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography) : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography);\n\n  if (cacheId) pathCache[cacheId] = pathString;\n\n  return pathString;\n};\n\nvar Geography = function (_Component) {\n  _inherits(Geography, _Component);\n\n  function Geography() {\n    _classCallCheck(this, Geography);\n\n    var _this = _possibleConstructorReturn(this, (Geography.__proto__ || Object.getPrototypeOf(Geography)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geography, [{\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      evt.persist();\n      var _props = this.props,\n          onClick = _props.onClick,\n          geography = _props.geography;\n\n      return onClick && onClick(geography, evt);\n    }\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props2 = this.props,\n          onMouseEnter = _props2.onMouseEnter,\n          geography = _props2.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props3 = this.props,\n          onMouseMove = _props3.onMouseMove,\n          geography = _props3.geography;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(geography, evt);\n        });\n      } else if (onMouseMove) onMouseMove(geography, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseLeave = _props4.onMouseLeave,\n          geography = _props4.geography;\n\n      this.setState({\n        hover: false,\n        pressed: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseDown = _props5.onMouseDown,\n          geography = _props5.geography;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props6 = this.props,\n          onMouseUp = _props6.onMouseUp,\n          geography = _props6.geography;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          geography = _props7.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          geography = _props8.geography;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(geography, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props9 = this.props,\n          geography = _props9.geography,\n          projection = _props9.projection,\n          round = _props9.round,\n          cacheId = _props9.cacheId,\n          precision = _props9.precision,\n          tabable = _props9.tabable,\n          style = _props9.style;\n      var _state = this.state,\n          hover = _state.hover,\n          pressed = _state.pressed;\n\n\n      var pathString = renderPath(cacheId, geography, projection, round, precision);\n\n      var excludeProps = [\"geography\", \"projection\", \"round\", \"cacheId\", \"precision\", \"tabable\", \"style\", \"onClick\", \"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\"];\n\n      var restProps = Object.keys(this.props).filter(function (key) {\n        return excludeProps.indexOf(key) === -1;\n      }).reduce(function (obj, key) {\n        obj[key] = _this2.props[key];\n        return obj;\n      }, {});\n\n      return _react2.default.createElement(\"path\", _extends({\n        d: pathString,\n        className: \"rsm-geography\" + (pressed ? \" rsm-geography--pressed\" : \"\") + (hover ? \" rsm-geography--hover\" : \"\"),\n        style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n        onClick: this.handleMouseClick,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseMove: this.handleMouseMove,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onFocus: tabable && this.handleFocus,\n        onBlur: tabable && this.handleBlur,\n        tabIndex: tabable ? 0 : -1\n      }, restProps));\n    }\n  }]);\n\n  return Geography;\n}(_react.Component);\n\nGeography.defaultProps = {\n  precision: 0.1,\n  cacheId: null,\n  round: false,\n  tabable: true,\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  }\n};\n\nexports.default = Geography;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Marker = function (_Component) {\n  _inherits(Marker, _Component);\n\n  function Marker() {\n    _classCallCheck(this, Marker);\n\n    var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Marker, [{\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props = this.props,\n          onMouseEnter = _props.onMouseEnter,\n          marker = _props.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props2 = this.props,\n          onMouseMove = _props2.onMouseMove,\n          marker = _props2.marker;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(marker, evt);\n        });\n      } else if (onMouseMove) onMouseMove(marker, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props3 = this.props,\n          onMouseLeave = _props3.onMouseLeave,\n          marker = _props3.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseDown = _props4.onMouseDown,\n          marker = _props4.marker;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseUp = _props5.onMouseUp,\n          marker = _props5.marker;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      if (!this.props.onClick) return;\n      evt.persist();\n      var _props6 = this.props,\n          onClick = _props6.onClick,\n          marker = _props6.marker,\n          projection = _props6.projection;\n\n      return onClick && onClick(marker, projection()(marker.coordinates), evt);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          marker = _props7.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          marker = _props8.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(marker, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props9 = this.props,\n          projection = _props9.projection,\n          marker = _props9.marker,\n          style = _props9.style,\n          tabable = _props9.tabable,\n          children = _props9.children;\n      var _state = this.state,\n          pressed = _state.pressed,\n          hover = _state.hover;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-marker\" + (pressed ? \" rsm-marker--pressed\" : \"\") + (hover ? \" rsm-marker--hover\" : \"\"),\n          transform: \"translate(\\n           \" + projection()(marker.coordinates)[0] + \"\\n           \" + projection()(marker.coordinates)[1] + \"\\n         )\",\n          style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n          onMouseDown: this.handleMouseDown,\n          onMouseUp: this.handleMouseUp,\n          onClick: this.handleMouseClick,\n          onMouseMove: this.handleMouseMove,\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur,\n          tabIndex: tabable ? 0 : -1\n        },\n        children\n      );\n    }\n  }]);\n\n  return Marker;\n}(_react.Component);\n\nMarker.defaultProps = {\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  },\n  marker: {\n    coordinates: [0, 0]\n  },\n  tabable: true\n};\n\nexports.default = Marker;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Markers = function (_Component) {\n  _inherits(Markers, _Component);\n\n  function Markers() {\n    _classCallCheck(this, Markers);\n\n    return _possibleConstructorReturn(this, (Markers.__proto__ || Object.getPrototypeOf(Markers)).apply(this, arguments));\n  }\n\n  _createClass(Markers, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          projection = _props.projection,\n          style = _props.style;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-markers\", style: style },\n        !children ? null : children.length === undefined ? _react2.default.cloneElement(children, {\n          projection: projection\n        }) : children.map(function (child, i) {\n          return !child ? null : _react2.default.cloneElement(child, {\n            key: child.key || \"marker-\" + i,\n            projection: projection\n          });\n        })\n      );\n    }\n  }]);\n\n  return Markers;\n}(_react.Component);\n\nMarkers.defaultProps = {\n  componentIdentifier: \"Markers\"\n};\n\nexports.default = Markers;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Annotation = function (_Component) {\n  _inherits(Annotation, _Component);\n\n  function Annotation() {\n    _classCallCheck(this, Annotation);\n\n    return _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).apply(this, arguments));\n  }\n\n  _createClass(Annotation, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          projection = _props.projection,\n          subject = _props.subject,\n          style = _props.style,\n          dx = _props.dx,\n          dy = _props.dy,\n          zoom = _props.zoom,\n          stroke = _props.stroke,\n          strokeWidth = _props.strokeWidth,\n          children = _props.children;\n\n\n      var connectorPath = (0, _utils.createConnectorPath)(null, [-dx / zoom, -dy / zoom]);\n\n      return _react2.default.createElement(\n        \"g\",\n        {\n          className: \"rsm-annotation\",\n          style: { style: style },\n          transform: \"translate(\\n          \" + (projection()(subject)[0] + dx / zoom) + \"\\n          \" + (projection()(subject)[1] + dy / zoom) + \"\\n        )\",\n          textAnchor: (0, _utils.createTextAnchor)(dx)\n        },\n        children,\n        _react2.default.createElement(\"path\", { d: connectorPath, stroke: stroke, strokeWidth: strokeWidth })\n      );\n    }\n  }]);\n\n  return Annotation;\n}(_react.Component);\n\nAnnotation.defaultProps = {\n  componentIdentifier: \"Annotation\",\n  stroke: \"#000000\",\n  strokeWidth: 1,\n  zoom: 1\n};\n\nexports.default = Annotation;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar computeGraticule = function computeGraticule(projection, step) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().step(step)());\n};\n\nvar computeOutline = function computeOutline(projection) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().outline());\n};\n\nvar Graticule = function (_Component) {\n  _inherits(Graticule, _Component);\n\n  function Graticule() {\n    _classCallCheck(this, Graticule);\n\n    var _this = _possibleConstructorReturn(this, (Graticule.__proto__ || Object.getPrototypeOf(Graticule)).call(this));\n\n    _this.state = {\n      renderGraticule: false,\n      graticulePath: \"\",\n      outlinePath: \"\"\n    };\n    _this.renderGraticule = _this.renderGraticule.bind(_this);\n    return _this;\n  }\n\n  _createClass(Graticule, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderGraticule();\n    }\n  }, {\n    key: \"renderGraticule\",\n    value: function renderGraticule() {\n      var _props = this.props,\n          step = _props.step,\n          projection = _props.projection,\n          round = _props.round,\n          precision = _props.precision;\n\n\n      this.setState({\n        renderGraticule: true,\n        graticulePath: round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n        outlinePath: round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _props2 = this.props,\n          step = _props2.step,\n          projection = _props2.projection,\n          round = _props2.round,\n          precision = _props2.precision;\n\n\n      if (nextProps.round !== round || nextProps.precision !== precision) {\n        this.setState({\n          graticulePath: nextProps.round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n          outlinePath: nextProps.round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.disableOptimization;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          zoom = _props3.zoom,\n          style = _props3.style,\n          outline = _props3.outline,\n          fill = _props3.fill,\n          stroke = _props3.stroke;\n\n\n      return this.state.renderGraticule && _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-graticule\" },\n        _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.graticulePath,\n          style: style\n        }),\n        outline && _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.outlinePath,\n          style: style\n        })\n      );\n    }\n  }]);\n\n  return Graticule;\n}(_react.Component);\n\nGraticule.defaultProps = {\n  componentIdentifier: \"Graticule\",\n  disableOptimization: true,\n  round: true,\n  precision: 0.1,\n  step: [10, 10],\n  outline: true,\n  stroke: \"#DDDDDD\",\n  fill: \"transparent\",\n  style: {\n    pointerEvents: \"none\"\n  }\n};\n\nexports.default = Graticule;","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = tan(z_2),\n          lnsecz_2 = log(1 / cosz_2);\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          α = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(α)) - α;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotα = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotα + s * sqrt(cotα * cotα - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      p = projection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosλ = cos(x);\n    return [x, 2 * atan2(sqrt(cosλ * cosλ + tanPhi0 * tanPhi0 - y * y) - cosλ, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function(_) {\n      return arguments.length ? (projection[name](_), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport {pi} from \"./math\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\nimport {abs, floor, max, min, pi, radians, sqrtPi, tau} from \"./math\";\n\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphere(step) {\n  return {\n    type: \"Polygon\",\n    coordinates: [\n      range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })\n      .concat(range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))\n    ]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, radians} from \"../math\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes) {\n  var sphere = interpolateSphere(lobes);\n\n  lobes = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      return [\n        [l[0][0] * radians, l[0][1] * radians],\n        [l[1][0] * radians, l[1][1] * radians],\n        [l[2][0] * radians, l[2][1] * radians]\n      ];\n    });\n  });\n\n  var bounds = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      var x0 = project(l[0][0], l[0][1])[0],\n          x1 = project(l[2][0], l[2][1])[0],\n          y0 = project(l[1][0], l[0][1])[1],\n          y1 = project(l[1][0], l[1][1])[1],\n          t;\n      if (y0 > y1) t = y0, y0 = y1, y1 = t;\n      return [[x0, y0], [x1, y1]];\n    });\n  });\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  // Assumes mutually exclusive bounding boxes for lobes.\n  if (project.invert) forward.invert = function(x, y) {\n    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n    for (var i = 0, n = bound.length; i < n; ++i) {\n      var b = bound[i];\n      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n        p[0] += lobe[i][1][0];\n        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n      }\n    }\n  };\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((y2_1 - sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1500)\n      .center([-160.908, 62.4864])\n      .clipAngle(25);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function naturalEarthRaw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarthRaw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarthRaw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\nexport default function(root, face, r) {\n\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {transform: [\n    cos(r), sin(r), 0,\n    -sin(r), cos(r), 0\n  ]});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(101.858)\n      .center([0, 45]);\n}\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon\";\nimport {pi, sqrt} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","export default function() {}\n","import {geoStream} from \"d3-geo\";\nimport noop from \"../noop\";\nimport clockwise from \"./clockwise\";\nimport contains from \"./contains\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n","export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n","export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * (x0 + (y > 0 ? 1 : -1) * d),\n          y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {gringortenRaw} from \"../gringorten\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","export default function(o, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(coordinates) {\n    coordinates[0] = +coordinates[0].toFixed(digits);\n    coordinates[1] = +coordinates[1].toFixed(digits);\n  }\n\n  function quantizePoints(coordinates) {\n    coordinates.forEach(quantizePoint);\n  }\n\n  function quantizePolygon(coordinates) {\n    coordinates.forEach(quantizePoints);\n  }\n\n  function quantizeGeometry(o) {\n    if (o) switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": case \"LineString\": quantizePoints(o.coordinates); break;\n      case \"MultiLineString\": case \"Polygon\": quantizePolygon(o.coordinates); break;\n      case \"MultiPolygon\": o.coordinates.forEach(quantizePolygon); break;\n      default: return;\n    }\n  }\n\n  function quantizeFeature(o) {\n    quantizeGeometry(o.geometry);\n  }\n\n  if (o) switch (o.type) {\n    case \"Feature\": quantizeFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(quantizeFeature); break;\n    default: quantizeGeometry(o); break;\n  }\n\n  return o;\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1\n      ? [0, y] // pole\n      : [x0, quantize(y)]; // antimeridian\n}\n\nfunction clampPoint(p) {\n  if (p[0] <= x0e) p[0] = x0;\n  else if (p[0] >= x1e) p[0] = x1;\n  if (p[1] <= y0e) p[1] = y0;\n  else if (p[1] >= y1e) p[1] = y1;\n}\n\nfunction clampPoints(points) {\n  points.forEach(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(polygon, fragments) {\n  for (var j = 0, m = polygon.length; j < m; ++j) {\n    var ring = polygon[j];\n    ring.polygon = polygon;\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push(ring);\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = ring.slice(0, i + 1);\n          fragmentBefore.polygon = polygon;\n          fragmentBefore[fragmentBefore.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push(ring = ring.slice(k - 1));\n        ring[0] = normalizePoint(ring[0][1]);\n        ring.polygon = polygon;\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n  polygon.length = 0;\n}\n\n// Now stitch the fragments back together into rings.\n// TODO remove empty polygons.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment[0];\n    end = fragment[fragment.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment[0];\n      end = fragment[fragment.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment[0]];\n        startFragment.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = startFragment.concat(fragment);\n        fragment.polygon = startFragment.polygon;\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment[endFragment.length - 1]];\n        fragment.pop(); // drop the shared coordinate\n        fragment = fragment.concat(endFragment);\n        fragment.polygon = endFragment.polygon;\n        fragment.index = n++;\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n      } else {\n        fragment.push(fragment[0]); // close ring\n        fragment.polygon.push(fragment);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(o) {\n  stitchGeometry(o.geometry);\n}\n\nfunction stitchGeometry(o) {\n  if (!o) return;\n  var fragments, i, n;\n\n  switch (o.type) {\n    case \"GeometryCollection\": {\n      o.geometries.forEach(stitchGeometry);\n      return;\n    }\n    case \"Point\": {\n      clampPoint(o.coordinates);\n      break;\n    }\n    case \"MultiPoint\":\n    case \"LineString\": {\n      clampPoints(o.coordinates);\n      break;\n    }\n    case \"MultiLineString\": {\n      o.coordinates.forEach(clampPoints);\n      break;\n    }\n    case \"Polygon\": {\n      extractFragments(o.coordinates, fragments = []);\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = o.coordinates.length;\n      while (++i < n) extractFragments(o.coordinates[i], fragments);\n      break;\n    }\n    default: return;\n  }\n\n  stitchFragments(fragments);\n}\n\nexport default function(o) {\n  if (o) switch (o.type) {\n    case \"Feature\": stitchFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(stitchFeature); break;\n    default: stitchGeometry(o); break;\n  }\n  return o;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\n// TODO clip to ellipse\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \"./math\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","export {default as geoAiry, airyRaw as geoAiryRaw} from \"./src/airy\";\nexport {default as geoAitoff, aitoffRaw as geoAitoffRaw} from \"./src/aitoff\";\nexport {default as geoArmadillo, armadilloRaw as geoArmadilloRaw} from \"./src/armadillo\";\nexport {default as geoAugust, augustRaw as geoAugustRaw} from \"./src/august\";\nexport {default as geoBaker, bakerRaw as geoBakerRaw} from \"./src/baker\";\nexport {default as geoBerghaus, berghausRaw as geoBerghausRaw} from \"./src/berghaus\";\nexport {default as geoBoggs, boggsRaw as geoBoggsRaw} from \"./src/boggs\";\nexport {default as geoBonne, bonneRaw as geoBonneRaw} from \"./src/bonne\";\nexport {default as geoBottomley, bottomleyRaw as geoBottomleyRaw} from \"./src/bottomley\";\nexport {default as geoBromley, bromleyRaw as geoBromleyRaw} from \"./src/bromley\";\nexport {default as geoChamberlin, chamberlinRaw as geoChamberlinRaw, chamberlinAfrica as geoChamberlinAfrica} from \"./src/chamberlin\";\nexport {default as geoCollignon, collignonRaw as geoCollignonRaw} from \"./src/collignon\";\nexport {default as geoCraig, craigRaw as geoCraigRaw} from \"./src/craig\";\nexport {default as geoCraster, crasterRaw as geoCrasterRaw} from \"./src/craster\";\nexport {default as geoCylindricalEqualArea, cylindricalEqualAreaRaw as geoCylindricalEqualAreaRaw} from \"./src/cylindricalEqualArea\";\nexport {default as geoCylindricalStereographic, cylindricalStereographicRaw as geoCylindricalStereographicRaw} from \"./src/cylindricalStereographic\";\nexport {default as geoEckert1, eckert1Raw as geoEckert1Raw} from \"./src/eckert1.js\";\nexport {default as geoEckert2, eckert2Raw as geoEckert2Raw} from \"./src/eckert2.js\";\nexport {default as geoEckert3, eckert3Raw as geoEckert3Raw} from \"./src/eckert3.js\";\nexport {default as geoEckert4, eckert4Raw as geoEckert4Raw} from \"./src/eckert4.js\";\nexport {default as geoEckert5, eckert5Raw as geoEckert5Raw} from \"./src/eckert5.js\";\nexport {default as geoEckert6, eckert6Raw as geoEckert6Raw} from \"./src/eckert6.js\";\nexport {default as geoEisenlohr, eisenlohrRaw as geoEisenlohrRaw} from \"./src/eisenlohr.js\";\nexport {default as geoFahey, faheyRaw as geoFaheyRaw} from \"./src/fahey.js\";\nexport {default as geoFoucaut, foucautRaw as geoFoucautRaw} from \"./src/foucaut.js\";\nexport {default as geoGilbert} from \"./src/gilbert.js\";\nexport {default as geoGingery, gingeryRaw as geoGingeryRaw} from \"./src/gingery.js\";\nexport {default as geoGinzburg4, ginzburg4Raw as geoGinzburg4Raw} from \"./src/ginzburg4.js\";\nexport {default as geoGinzburg5, ginzburg5Raw as geoGinzburg5Raw} from \"./src/ginzburg5.js\";\nexport {default as geoGinzburg6, ginzburg6Raw as geoGinzburg6Raw} from \"./src/ginzburg6.js\";\nexport {default as geoGinzburg8, ginzburg8Raw as geoGinzburg8Raw} from \"./src/ginzburg8.js\";\nexport {default as geoGinzburg9, ginzburg9Raw as geoGinzburg9Raw} from \"./src/ginzburg9.js\";\nexport {default as geoGringorten, gringortenRaw as geoGringortenRaw} from \"./src/gringorten.js\";\nexport {default as geoGuyou, guyouRaw as geoGuyouRaw} from \"./src/guyou.js\";\nexport {default as geoHammer, hammerRaw as geoHammerRaw} from \"./src/hammer.js\";\nexport {default as geoHammerRetroazimuthal, hammerRetroazimuthalRaw as geoHammerRetroazimuthalRaw} from \"./src/hammerRetroazimuthal.js\";\nexport {default as geoHealpix, healpixRaw as geoHealpixRaw} from \"./src/healpix.js\";\nexport {default as geoHill, hillRaw as geoHillRaw} from \"./src/hill.js\";\nexport {default as geoHomolosine, homolosineRaw as geoHomolosineRaw} from \"./src/homolosine.js\";\nexport {default as geoInterrupt} from \"./src/interrupted/index\";\nexport {default as geoInterruptedBoggs} from \"./src/interrupted/boggs\";\nexport {default as geoInterruptedHomolosine} from \"./src/interrupted/homolosine\";\nexport {default as geoInterruptedMollweide} from \"./src/interrupted/mollweide\";\nexport {default as geoInterruptedMollweideHemispheres} from \"./src/interrupted/mollweideHemispheres\";\nexport {default as geoInterruptedSinuMollweide} from \"./src/interrupted/sinuMollweide\";\nexport {default as geoInterruptedSinusoidal} from \"./src/interrupted/sinusoidal\";\nexport {default as geoKavrayskiy7, kavrayskiy7Raw as geoKavrayskiy7Raw} from \"./src/kavrayskiy7.js\";\nexport {default as geoLagrange, lagrangeRaw as geoLagrangeRaw} from \"./src/lagrange.js\";\nexport {default as geoLarrivee, larriveeRaw as geoLarriveeRaw} from \"./src/larrivee\";\nexport {default as geoLaskowski, laskowskiRaw as geoLaskowskiRaw} from \"./src/laskowski\";\nexport {default as geoLittrow, littrowRaw as geoLittrowRaw} from \"./src/littrow.js\";\nexport {default as geoLoximuthal, loximuthalRaw as geoLoximuthalRaw} from \"./src/loximuthal.js\";\nexport {default as geoMiller, millerRaw as geoMillerRaw} from \"./src/miller\";\nexport {default as geoModifiedStereographic, modifiedStereographicRaw as geoModifiedStereographicRaw, modifiedStereographicAlaska as geoModifiedStereographicAlaska, modifiedStereographicGs48 as geoModifiedStereographicGs48, modifiedStereographicGs50 as geoModifiedStereographicGs50, modifiedStereographicMiller as geoModifiedStereographicMiller, modifiedStereographicLee as geoModifiedStereographicLee} from \"./src/modifiedStereographic\";\nexport {default as geoMollweide, mollweideRaw as geoMollweideRaw} from \"./src/mollweide\";\nexport {default as geoMtFlatPolarParabolic, mtFlatPolarParabolicRaw as geoMtFlatPolarParabolicRaw} from \"./src/mtFlatPolarParabolic\";\nexport {default as geoMtFlatPolarQuartic, mtFlatPolarQuarticRaw as geoMtFlatPolarQuarticRaw} from \"./src/mtFlatPolarQuartic\";\nexport {default as geoMtFlatPolarSinusoidal, mtFlatPolarSinusoidalRaw as geoMtFlatPolarSinusoidalRaw} from \"./src/mtFlatPolarSinusoidal\";\nexport {default as geoNaturalEarth, naturalEarthRaw as geoNaturalEarthRaw} from \"./src/naturalEarth\";\nexport {default as geoNellHammer, nellHammerRaw as geoNellHammerRaw} from \"./src/nellHammer\";\nexport {default as geoPatterson, pattersonRaw as geoPattersonRaw} from \"./src/patterson\";\nexport {default as geoPolyconic, polyconicRaw as geoPolyconicRaw} from \"./src/polyconic\";\nexport {default as geoPolyhedral} from \"./src/polyhedral/index.js\";\nexport {default as geoPolyhedralButterfly} from \"./src/polyhedral/butterfly.js\";\nexport {default as geoPolyhedralCollignon} from \"./src/polyhedral/collignon.js\";\nexport {default as geoPolyhedralWaterman} from \"./src/polyhedral/waterman.js\";\nexport {default as geoProject} from \"./src/project/index\";\nexport {default as geoGringortenQuincuncial} from \"./src/quincuncial/gringorten.js\";\nexport {default as geoPeirceQuincuncial} from \"./src/quincuncial/peirce.js\";\nexport {default as geoPierceQuincuncial} from \"./src/quincuncial/peirce.js\"; // DEPRECATED misspelling\nexport {default as geoQuantize} from \"./src/quantize\";\nexport {default as geoQuincuncial} from \"./src/quincuncial/index.js\";\nexport {default as geoRectangularPolyconic, rectangularPolyconicRaw as geoRectangularPolyconicRaw} from \"./src/rectangularPolyconic\";\nexport {default as geoRobinson, robinsonRaw as geoRobinsonRaw} from \"./src/robinson\";\nexport {default as geoSatellite, satelliteRaw as geoSatelliteRaw} from \"./src/satellite\";\nexport {default as geoSinuMollweide, sinuMollweideRaw as geoSinuMollweideRaw} from \"./src/sinuMollweide\";\nexport {default as geoSinusoidal, sinusoidalRaw as geoSinusoidalRaw} from \"./src/sinusoidal\";\nexport {default as geoStitch} from \"./src/stitch\";\nexport {default as geoTimes, timesRaw as geoTimesRaw} from \"./src/times\";\nexport {default as geoTwoPointAzimuthal, twoPointAzimuthalRaw as geoTwoPointAzimuthalRaw, twoPointAzimuthalUsa as geoTwoPointAzimuthalUsa} from \"./src/twoPointAzimuthal\";\nexport {default as geoTwoPointEquidistant, twoPointEquidistantRaw as geoTwoPointEquidistantRaw, twoPointEquidistantUsa as geoTwoPointEquidistantUsa} from \"./src/twoPointEquidistant\";\nexport {default as geoVanDerGrinten, vanDerGrintenRaw as geoVanDerGrintenRaw} from \"./src/vanDerGrinten\";\nexport {default as geoVanDerGrinten2, vanDerGrinten2Raw as geoVanDerGrinten2Raw} from \"./src/vanDerGrinten2\";\nexport {default as geoVanDerGrinten3, vanDerGrinten3Raw as geoVanDerGrinten3Raw} from \"./src/vanDerGrinten3\";\nexport {default as geoVanDerGrinten4, vanDerGrinten4Raw as geoVanDerGrinten4Raw} from \"./src/vanDerGrinten4\";\nexport {default as geoWagner4, wagner4Raw as geoWagner4Raw} from \"./src/wagner4.js\";\nexport {default as geoWagner6, wagner6Raw as geoWagner6Raw} from \"./src/wagner6.js\";\nexport {default as geoWagner7, wagner7Raw as geoWagner7Raw} from \"./src/wagner7.js\";\nexport {default as geoWiechel, wiechelRaw as geoWiechelRaw} from \"./src/wiechel.js\";\nexport {default as geoWinkel3, winkel3Raw as geoWinkel3Raw} from \"./src/winkel3\";\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    point[0] = (x0 += point[0]) * kx + dx;\n    point[1] = (y0 += point[1]) * ky + dy;\n    return point;\n  };\n}\n","import transform from \"./transform\";\n\nexport default function(topology) {\n  var bbox = topology.bbox;\n\n  function bboxPoint(p0) {\n    p1[0] = p0[0], p1[1] = p0[1], t(p1);\n    if (p1[0] < x0) x0 = p1[0];\n    if (p1[0] > x1) x1 = p1[0];\n    if (p1[1] < y0) y0 = p1[1];\n    if (p1[1] > y1) y1 = p1[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  if (!bbox) {\n    var t = transform(topology), p0, p1 = new Array(2), name,\n        x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n    topology.arcs.forEach(function(arc) {\n      var i = -1, n = arc.length;\n      while (++i < n) {\n        p0 = arc[i], p1[0] = p0[0], p1[1] = p0[1], t(p1, i);\n        if (p1[0] < x0) x0 = p1[0];\n        if (p1[0] > x1) x1 = p1[0];\n        if (p1[1] < y0) y0 = p1[1];\n        if (p1[1] > y1) y1 = p1[1];\n      }\n    });\n\n    for (name in topology.objects) {\n      bboxGeometry(topology.objects[name]);\n    }\n\n    bbox = topology.bbox = [x0, y0, x1, y1];\n  }\n\n  return bbox;\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k].slice(), k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p.slice());\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0].slice());\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0].slice());\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nexport default function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n}\n\nexport function meshArcs(topology, object, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n","export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n","import bisect from \"./bisect\";\n\nexport default function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n","import bbox from \"./bbox\";\n\nexport default function(topology, n) {\n  if (!((n = Math.floor(n)) >= 2)) throw new Error(\"n must be ≥2\");\n  if (topology.transform) throw new Error(\"already quantized\");\n  var bb = bbox(topology), name,\n      dx = bb[0], kx = (bb[2] - dx) / (n - 1) || 1,\n      dy = bb[1], ky = (bb[3] - dy) / (n - 1) || 1;\n\n  function quantizePoint(p) {\n    p[0] = Math.round((p[0] - dx) / kx);\n    p[1] = Math.round((p[1] - dy) / ky);\n  }\n\n  function quantizeGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(quantizePoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = 1,\n        j = 1,\n        n = arc.length,\n        pi = arc[0],\n        x0 = pi[0] = Math.round((pi[0] - dx) / kx),\n        y0 = pi[1] = Math.round((pi[1] - dy) / ky),\n        pj,\n        x1,\n        y1;\n\n    for (; i < n; ++i) {\n      pi = arc[i];\n      x1 = Math.round((pi[0] - dx) / kx);\n      y1 = Math.round((pi[1] - dy) / ky);\n      if (x1 !== x0 || y1 !== y0) {\n        pj = arc[j++];\n        pj[0] = x1 - x0, x0 = x1;\n        pj[1] = y1 - y0, y0 = y1;\n      }\n    }\n\n    if (j < 2) {\n      pj = arc[j++];\n      pj[0] = 0;\n      pj[1] = 0;\n    }\n\n    arc.length = j;\n  });\n\n  for (name in topology.objects) {\n    quantizeGeometry(topology.objects[name]);\n  }\n\n  topology.transform = {\n    scale: [kx, ky],\n    translate: [dx, dy]\n  };\n\n  return topology;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0, x0 = x1;\n    point[1] = y1 - y0, y0 = y1;\n    return point;\n  };\n}\n","export {default as bbox} from \"./src/bbox\";\nexport {default as feature} from \"./src/feature\";\nexport {default as mesh, meshArcs} from \"./src/mesh\";\nexport {default as merge, mergeArcs} from \"./src/merge\";\nexport {default as neighbors} from \"./src/neighbors\";\nexport {default as quantize} from \"./src/quantize\";\nexport {default as transform} from \"./src/transform\";\nexport {default as untransform} from \"./src/untransform\";\n","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipPolygon from \"./polygon\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport function clipExtent(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    return this._circle = circle(_), this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","import clipBuffer from \"./buffer\";\nimport clipPolygon from \"./polygon\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(rotate, sink) {\n    var line = clipLine(sink),\n        rotatedStart = rotate.invert(start[0], start[1]),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, rotatedStart);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      var point = rotate(lambda, phi);\n      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      var point = rotate(lambda, phi);\n      line.point(point[0], point[1]);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      var point = rotate(lambda, phi);\n      ringSink.point(point[0], point[1]);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius, delta) {\n  var cr = cos(radius),\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nexport function fitExtent(projection, extent, object) {\n  var w = extent[1][0] - extent[0][0],\n      h = extent[1][1] - extent[0][1],\n      clip = projection.clipExtent && projection.clipExtent();\n\n  projection\n      .scale(150)\n      .translate([0, 0]);\n\n  if (clip != null) projection.clipExtent(null);\n\n  geoStream(object, projection.stream(boundsStream));\n\n  var b = boundsStream.result(),\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\n  if (clip != null) projection.clipExtent(clip);\n\n  return projection\n      .scale(k * 150)\n      .translate([x, y]);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {clipExtent} from \"../clip/extent\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, clip = identity, // clip extent\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    }\n  };\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export {default as geoArea} from \"./src/area\";\nexport {default as geoBounds} from \"./src/bounds\";\nexport {default as geoCentroid} from \"./src/centroid\";\nexport {default as geoCircle} from \"./src/circle\";\nexport {default as geoClipExtent} from \"./src/clip/extent\"; // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\nexport {default as geoContains} from \"./src/contains\";\nexport {default as geoDistance} from \"./src/distance\";\nexport {default as geoGraticule, graticule10 as geoGraticule10} from \"./src/graticule\";\nexport {default as geoInterpolate} from \"./src/interpolate\";\nexport {default as geoLength} from \"./src/length\";\nexport {default as geoPath} from \"./src/path/index\";\nexport {default as geoAlbers} from \"./src/projection/albers\";\nexport {default as geoAlbersUsa} from \"./src/projection/albersUsa\";\nexport {default as geoAzimuthalEqualArea, azimuthalEqualAreaRaw as geoAzimuthalEqualAreaRaw} from \"./src/projection/azimuthalEqualArea\";\nexport {default as geoAzimuthalEquidistant, azimuthalEquidistantRaw as geoAzimuthalEquidistantRaw} from \"./src/projection/azimuthalEquidistant\";\nexport {default as geoConicConformal, conicConformalRaw as geoConicConformalRaw} from \"./src/projection/conicConformal\";\nexport {default as geoConicEqualArea, conicEqualAreaRaw as geoConicEqualAreaRaw} from \"./src/projection/conicEqualArea\";\nexport {default as geoConicEquidistant, conicEquidistantRaw as geoConicEquidistantRaw} from \"./src/projection/conicEquidistant\";\nexport {default as geoEquirectangular, equirectangularRaw as geoEquirectangularRaw} from \"./src/projection/equirectangular\";\nexport {default as geoGnomonic, gnomonicRaw as geoGnomonicRaw} from \"./src/projection/gnomonic\";\nexport {default as geoIdentity} from \"./src/projection/identity\";\nexport {default as geoProjection, projectionMutator as geoProjectionMutator} from \"./src/projection/index\";\nexport {default as geoMercator, mercatorRaw as geoMercatorRaw} from \"./src/projection/mercator\";\nexport {default as geoOrthographic, orthographicRaw as geoOrthographicRaw} from \"./src/projection/orthographic\";\nexport {default as geoStereographic, stereographicRaw as geoStereographicRaw} from \"./src/projection/stereographic\";\nexport {default as geoTransverseMercator, transverseMercatorRaw as geoTransverseMercatorRaw} from \"./src/projection/transverseMercator\";\nexport {default as geoRotation} from \"./src/rotation\";\nexport {default as geoStream} from \"./src/stream\";\nexport {default as geoTransform} from \"./src/transform\";\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","export {default as bisect, bisectRight, bisectLeft} from \"./bisect\";\nexport {default as ascending} from \"./ascending\";\nexport {default as bisector} from \"./bisector\";\nexport {default as cross} from \"./cross\";\nexport {default as descending} from \"./descending\";\nexport {default as deviation} from \"./deviation\";\nexport {default as extent} from \"./extent\";\nexport {default as histogram} from \"./histogram\";\nexport {default as thresholdFreedmanDiaconis} from \"./threshold/freedmanDiaconis\";\nexport {default as thresholdScott} from \"./threshold/scott\";\nexport {default as thresholdSturges} from \"./threshold/sturges\";\nexport {default as max} from \"./max\";\nexport {default as mean} from \"./mean\";\nexport {default as median} from \"./median\";\nexport {default as merge} from \"./merge\";\nexport {default as min} from \"./min\";\nexport {default as pairs} from \"./pairs\";\nexport {default as permute} from \"./permute\";\nexport {default as quantile} from \"./quantile\";\nexport {default as range} from \"./range\";\nexport {default as scan} from \"./scan\";\nexport {default as shuffle} from \"./shuffle\";\nexport {default as sum} from \"./sum\";\nexport {default as ticks, tickIncrement, tickStep} from \"./ticks\";\nexport {default as transpose} from \"./transpose\";\nexport {default as variance} from \"./variance\";\nexport {default as zip} from \"./zip\";\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceStrokeWidth = replaceStrokeWidth;\nexports.createChoroplethStyles = createChoroplethStyles;\nexports.calculateResizeFactor = calculateResizeFactor;\nexports.calculateMousePosition = calculateMousePosition;\nexports.isChildOfType = isChildOfType;\nexports.createNewChildren = createNewChildren;\nexports.roundPath = roundPath;\nexports.createConnectorPath = createConnectorPath;\nexports.createTextAnchor = createTextAnchor;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction replaceStrokeWidth(styles) {\n  var newStyles = {};\n  Object.keys(styles).map(function (key, i) {\n    if (key === \"strokeWidth\") newStyles[key] = \"inherit\";else newStyles[key] = styles[key];\n  });\n  return newStyles;\n}\n\nfunction createChoroplethStyles(styles, choroplethValue) {\n  if (choroplethValue) {\n    var newStyles = {};\n    Object.keys(styles).map(function (key, i) {\n      if (key === \"fill\") newStyles[key] = choroplethValue.value;else newStyles[key] = styles[key];\n    });\n    return newStyles;\n  } else {\n    return styles;\n  }\n}\n\nfunction calculateResizeFactor(actualDimension, baseDimension) {\n  return 1 / 100 * (100 / actualDimension * baseDimension);\n}\n\nfunction calculateMousePosition(direction, projection, props, zoom, resizeFactor) {\n  var center = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : props.center;\n  var width = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : props.width;\n  var height = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : props.height;\n\n  var reference = { x: 0, y: 1 };\n  var reverseRotation = projection().rotate().map(function (item) {\n    return -item;\n  });\n  return (projection().rotate(reverseRotation)([-center[0], -center[1]])[reference[direction]] - (reference[direction] === 0 ? width : height) / 2) * zoom * (1 / resizeFactor);\n}\n\nfunction isChildOfType(child, expectedType) {\n  return child.props.componentIdentifier === expectedType;\n}\n\nfunction createNewChildren(children, props) {\n  if (!children) return;\n  if (!children.length) {\n    return isChildOfType(children, \"Geographies\") ? _react2.default.cloneElement(children, {\n      projection: props.projection\n    }) : isChildOfType(children, \"Markers\") || isChildOfType(children, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(children, {\n      projection: props.projection,\n      zoom: props.zoom\n    }) : children;\n  } else {\n    return children.map(function (child, i) {\n      if (!child) return;\n      return isChildOfType(child, \"Geographies\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection\n      }) : isChildOfType(child, \"Markers\") || isChildOfType(child, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection,\n        zoom: props.zoom\n      }) : child;\n    });\n  }\n}\n\nfunction roundPath(path, precision) {\n  if (!path) return;\n  var query = /[\\d\\.-][\\d\\.e-]*/g;\n  return path.replace(query, function (n) {\n    return Math.round(n * (1 / precision)) / (1 / precision);\n  });\n}\n\nfunction createConnectorPath(connectorType, endPoint) {\n  return \"M0,0 L\" + endPoint[0] + \",\" + endPoint[1];\n}\n\nfunction createTextAnchor(dx) {\n  if (dx > 0) return \"start\";else if (dx < 0) return \"end\";else return \"middle\";\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  scale: 160,\n  xOffset: 0,\n  yOffset: 0,\n  rotation: [0, 0, 0],\n  precision: 0.1\n};"],"sourceRoot":""}