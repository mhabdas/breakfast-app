{"version":3,"sources":["webpack:///./node_modules/react-simple-maps/lib/projectionConfig.js","webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/polygon.js","webpack:///./node_modules/d3-geo/src/clip/extent.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/distance.js","webpack:///./node_modules/d3-geo/src/contains.js","webpack:///./node_modules/d3-geo/src/graticule.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/albersUsa.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/conicConformal.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/identity.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-geo/index.js","webpack:///./node_modules/react-simple-maps/lib/index.js","webpack:///./node_modules/react-simple-maps/lib/ComposableMap.js","webpack:///./node_modules/react-simple-maps/lib/projections.js","webpack:///./node_modules/react-simple-maps/lib/ZoomableGroup.js","webpack:///./node_modules/react-simple-maps/lib/Geographies.js","webpack:///./node_modules/react-simple-maps/lib/Geography.js","webpack:///./node_modules/react-simple-maps/lib/Marker.js","webpack:///./node_modules/react-simple-maps/lib/Markers.js","webpack:///./node_modules/react-simple-maps/lib/Annotation.js","webpack:///./node_modules/react-simple-maps/lib/Graticule.js","webpack:///./node_modules/d3-geo-projection/src/math.js","webpack:///./node_modules/d3-geo-projection/src/airy.js","webpack:///./node_modules/d3-geo-projection/src/aitoff.js","webpack:///./node_modules/d3-geo-projection/src/armadillo.js","webpack:///./node_modules/d3-geo-projection/src/august.js","webpack:///./node_modules/d3-geo-projection/src/baker.js","webpack:///./node_modules/d3-geo-projection/src/berghaus.js","webpack:///./node_modules/d3-geo-projection/src/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/boggs.js","webpack:///./node_modules/d3-geo-projection/src/parallel1.js","webpack:///./node_modules/d3-geo-projection/src/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/bonne.js","webpack:///./node_modules/d3-geo-projection/src/bottomley.js","webpack:///./node_modules/d3-geo-projection/src/bromley.js","webpack:///./node_modules/d3-geo-projection/src/chamberlin.js","webpack:///./node_modules/d3-geo-projection/src/collignon.js","webpack:///./node_modules/d3-geo-projection/src/craig.js","webpack:///./node_modules/d3-geo-projection/src/craster.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack:///./node_modules/d3-geo-projection/src/eckert1.js","webpack:///./node_modules/d3-geo-projection/src/eckert2.js","webpack:///./node_modules/d3-geo-projection/src/eckert3.js","webpack:///./node_modules/d3-geo-projection/src/eckert4.js","webpack:///./node_modules/d3-geo-projection/src/eckert5.js","webpack:///./node_modules/d3-geo-projection/src/eckert6.js","webpack:///./node_modules/d3-geo-projection/src/eisenlohr.js","webpack:///./node_modules/d3-geo-projection/src/fahey.js","webpack:///./node_modules/d3-geo-projection/src/foucaut.js","webpack:///./node_modules/d3-geo-projection/src/gilbert.js","webpack:///./node_modules/d3-geo-projection/src/gingery.js","webpack:///./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg4.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg5.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg6.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg8.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg9.js","webpack:///./node_modules/d3-geo-projection/src/square.js","webpack:///./node_modules/d3-geo-projection/src/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/elliptic.js","webpack:///./node_modules/d3-geo-projection/src/guyou.js","webpack:///./node_modules/d3-geo-projection/src/hammer.js","webpack:///./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack:///./node_modules/d3-geo-projection/src/healpix.js","webpack:///./node_modules/d3-geo-projection/src/hill.js","webpack:///./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/index.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack:///./node_modules/d3-geo-projection/src/lagrange.js","webpack:///./node_modules/d3-geo-projection/src/larrivee.js","webpack:///./node_modules/d3-geo-projection/src/laskowski.js","webpack:///./node_modules/d3-geo-projection/src/littrow.js","webpack:///./node_modules/d3-geo-projection/src/loximuthal.js","webpack:///./node_modules/d3-geo-projection/src/miller.js","webpack:///./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/naturalEarth.js","webpack:///./node_modules/d3-geo-projection/src/nellHammer.js","webpack:///./node_modules/d3-geo-projection/src/patterson.js","webpack:///./node_modules/d3-geo-projection/src/polyconic.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack:///./node_modules/d3-geo-projection/src/noop.js","webpack:///./node_modules/d3-geo-projection/src/project/index.js","webpack:///./node_modules/d3-geo-projection/src/project/clockwise.js","webpack:///./node_modules/d3-geo-projection/src/project/contains.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack:///./node_modules/d3-geo-projection/src/quantize.js","webpack:///./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/robinson.js","webpack:///./node_modules/d3-geo-projection/src/satellite.js","webpack:///./node_modules/d3-geo-projection/src/stitch.js","webpack:///./node_modules/d3-geo-projection/src/times.js","webpack:///./node_modules/d3-geo-projection/src/twoPoint.js","webpack:///./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack:///./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack:///./node_modules/d3-geo-projection/src/wagner4.js","webpack:///./node_modules/d3-geo-projection/src/wagner6.js","webpack:///./node_modules/d3-geo-projection/src/wagner7.js","webpack:///./node_modules/d3-geo-projection/src/wiechel.js","webpack:///./node_modules/d3-geo-projection/src/winkel3.js","webpack:///./node_modules/d3-geo-projection/index.js","webpack:///./node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson-client/src/bbox.js","webpack:///./node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson-client/src/stitch.js","webpack:///./node_modules/topojson-client/src/mesh.js","webpack:///./node_modules/topojson-client/src/merge.js","webpack:///./node_modules/topojson-client/src/bisect.js","webpack:///./node_modules/topojson-client/src/neighbors.js","webpack:///./node_modules/topojson-client/src/quantize.js","webpack:///./node_modules/topojson-client/src/untransform.js","webpack:///./node_modules/topojson-client/index.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/cross.js","webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-array/src/threshold/sturges.js","webpack:///./node_modules/d3-array/src/merge.js","webpack:///./node_modules/d3-array/src/index.js","webpack:///./node_modules/react-simple-maps/lib/utils.js"],"names":["Object","defineProperty","exports","value","default","scale","xOffset","yOffset","rotation","precision","adder","Adder","this","reset","prototype","constructor","s","t","add","y","temp","valueOf","a","b","x","bv","av","epsilon","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","ceil","exp","log","floor","pow","sin","math_sign","sign","sqrt","tan","acos","asin","haversin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","i","n","length","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","src_area","cartesian_spherical","cartesian","cartesian_cartesian","spherical","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","d","l","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","range","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","push","bounds_linePoint","p","normal","inflection","phii","delta","lambdai","antimeridian","bounds_angle","lambda0","lambda1","rangeCompare","rangeContains","W0","W1","centroid_X0","centroid_Y0","Z0","centroid_X1","centroid_Y1","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","z0","bounds","feature","merged","deltaMax","Infinity","sort","NaN","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","z","centroidLinePointFirst","centroidLinePoint","w","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","m","centroid","constant","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","rotate","forward","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","step","circleRadius","src_circle","ring","center","circle","c","apply","arguments","r","_","buffer","line","lines","rejoin","pop","concat","shift","result","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","pointEqual","Intersection","points","other","entry","o","e","clip_polygon","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","polygon_link","start","current","isSubject","array","clipMax","clipMin","extent_clipExtent","visible","from","to","a1","corner","comparePoint","ca","cb","polygon","x__","y__","v__","x_","y_","v_","first","clean","activeStream","bufferStream","clipStream","linePoint","winding","a0","j","b0","b1","polygonInside","cleanInside","src","max","min","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","extent","sum","polygonContains","angle","point0","phi0","sinPhi0","cosPhi0","sinPhi1","cosPhi1","point1","phi1","absDelta","arc","intersection","phiArc","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","distance","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ab","map","ringRadians","pointRadians","contains","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","filter","outline","slice","reverse","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","A","identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","src_path","projection","projectionStream","contextStream","path","src_clip","pointVisible","clipLine","sink","rotatedStart","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","ringSegments","validSegment","clip_antimeridian","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","clip_circle","cr","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","q","polar","q1","code","c0","v0","v00","point2","src_transform","methods","transformer","TransformStream","key","fitExtent","h","clipExtent","translate","fitSize","size","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","projection_projection","projectionMutator","projectAt","projectRotate","theta","preclip","postclip","projectResample","projectTransform","recenter","clipAngle","conicProjection","parallels","conicEqualAreaRaw","cylindricalEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercatorRaw","mercator","mercatorProjection","reclip","tany","conicConformalRaw","f","fy","conicConformal","equirectangularRaw","equirectangular","conicEquidistantRaw","g","gy","nx","conicEquidistant","gnomonicRaw","gnomonic","scaleTranslate","kx","ky","tx","ty","projection_identity","sx","sy","transform","reflectX","reflectY","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","transverseMercator","__webpack_require__","__webpack_exports__","_ComposableMap","enumerable","get","_interopRequireDefault","_ZoomableGroup","_Geographies","_Geography","_Marker","_Markers","_Annotation","_Graticule","obj","__esModule","_createClass","defineProperties","target","props","descriptor","configurable","writable","Constructor","protoProps","staticProps","_react","_react2","_projections2","_projectionConfig2","ComposableMap","_Component","instance","TypeError","_classCallCheck","_this","self","call","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","bind","subClass","superClass","create","setPrototypeOf","_inherits","Component","_props","projectionConfig","width","height","_props2","style","showCenter","children","createElement","viewBox","className","cloneElement","fill","defaultProps","config","projectionName","projectionReference","_d3GeoProjection","_d3Geo","_projectionConfig","geoMercator","miller","geoMiller","times","geoTimes","robinson","geoRobinson","winkel3","geoWinkel3","eckert4","geoEckert4","_utils","ZoomableGroup","backdropX","backdrop","backdropY","backdropWidth","backdropHeight","state","mouseX","calculateMousePosition","zoom","mouseY","mouseXStart","mouseYStart","isPressed","resizeFactorX","resizeFactorY","round","handleMouseMove","handleMouseUp","handleMouseDown","handleResize","_ref","pageX","pageY","disablePanning","setState","_ref2","nextProps","_state","zoomFactor","centerChanged","JSON","stringify","calculateResizeFactor","zoomableGroupNode","parentNode","getBoundingClientRect","xPercentageChange","yPercentageChange","_props3","window","addEventListener","removeEventListener","_this2","_props4","_state2","ref","onMouseMove","onMouseUp","onMouseDown","strokeWidth","createNewChildren","_topojsonClient","Geographies","geographyPaths","fetchGeographies","geographyUrl","request","XMLHttpRequest","open","onload","status","parse","responseText","objects","keys","onGeographiesLoaded","onGeographyPathsLoaded","String","onerror","console","send","nextState","geoPathsChanged","choroplethChanged","choropleth","disableOptimization","componentIdentifier","_extends","assign","source","pathCache","Geography","hover","pressed","handleMouseEnter","handleMouseLeave","handleMouseClick","handleFocus","handleBlur","evt","persist","onClick","geography","onMouseEnter","onMouseLeave","_props5","_props6","_props7","onFocus","_props8","onBlur","_props9","cacheId","tabable","pathString","roundPath","geoPath","renderPath","excludeProps","restProps","indexOf","reduce","tabIndex","Marker","marker","Markers","undefined","child","Annotation","stroke","connectorPath","createConnectorPath","textAnchor","createTextAnchor","computeGraticule","geoGraticule","computeOutline","Graticule","renderGraticule","graticulePath","outlinePath","pointerEvents","math_epsilon","epsilon2","sqrt1_2","SQRT1_2","sqrt2","sqrtPi","sinh","cosh","airyRaw","beta","tanBeta_2","cosx","cosy","siny","cosz","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","airy","d3_geo","aitoffRaw","sincia","sinci","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","fx","dxdx","dxdy","dydx","dydy","aitoff","armadilloRaw","sPhi0","tanPhi0","cosLambda","sinLambda","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dPhi","armadillo","stream_","parallel","rotateStream","sphereStream","augustRaw","tanPhi","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","august","sqrt8","baker_phi0","bakerRaw","cosPhi_2","tanPhi_2","baker","berghausRaw","lobes","theta0","α","cotα","berghaus","sr","delta0","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","mollweideRaw","mollweide","boggs_k","boggs_w","boggsRaw","boggs","parallel1","sinusoidalRaw","sinusoidal","bonneRaw","cotPhi0","rho","bonne","bottomleyRaw","sinPsi","bottomley","fraction","bromleyRaw","bromley","chamberlin_distance","s1","s2","cosdLambda","sindPhi","sindLambda","longitude","chamberlinRaw","p2","beta0","beta1","beta2","mean","Array","chamberlinAfrica","chamberlin","R","collignonRaw","alpha","collignon","craigRaw","cosλ","craig","sqrt3","crasterRaw","craster","cylindricalEqualArea","cylindricalStereographicRaw","cylindricalStereographic","eckert1Raw","eckert1","eckert2Raw","eckert2","eckert3Raw","eckert3","eckert4Raw","eckert5Raw","eckert5","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","_0","_1","cos1","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","eisenlohr","faheyK","faheyRaw","fahey","foucautRaw","cosk","foucaut","gilbertForward","gilbertInvert","src_gilbert","projectionType","gilbert","property","name","gingeryRaw","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","gingery","cRho","sRho","ginzburgPolyconic","xB","yB","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg4","ginzburg5Raw","ginzburg5","ginzburg6Raw","ginzburg6","ginzburg8Raw","lambda4","ginzburg8","ginzburg9Raw","ginzburg9","square","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","g2","zetaMug","f2","df","gringortenHexadecant","gringortenHexadecantInvert","gringorten","ellipticJ","ai","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","tn","guyouComplexDivide","guyou","hammerRaw","hammerQuarticAuthalicRaw","hammer","coefficient","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","hammerRetroazimuthal","rotate_","healpixParallel","healpixLambert","healpixRaw","H","dy1","healpix","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","hill","ratio","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","sinuMollweide","homolosineRaw","homolosine","interpolateLine","resampled","interrupted","lobe","interpolateSphere","bound","boggs_lobes","interrupted_boggs","homolosine_lobes","interrupted_homolosine","mollweide_lobes","interrupted_mollweide","mollweideHemispheres_lobes","mollweideHemispheres","sinuMollweide_lobes","interrupted_sinuMollweide","sinusoidal_lobes","interrupted_sinusoidal","kavrayskiy7Raw","kavrayskiy7","lagrangeRaw","lagrange","spacing","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","f0","f1","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","larrivee","laskowskiRaw","lambdaPhi","laskowski","littrowRaw","y2_1","littrow","loximuthalRaw","loximuthal","millerRaw","modifiedStereographicRaw","zr","zi","ar","br","bi","deltar","deltai","sinc","gs48","gs50","modifiedStereographic_miller","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarParabolic","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarQuartic","mtFlatPolarSinusoidalRaw","mtFlatPolarSinusoidal","naturalEarthRaw","phi4","naturalEarth","nellHammerRaw","nellHammer","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","patterson","polyconicRaw","polyconic","matrix","subtract","matrix_angle","matrix_length","multiply","polyhedral","root","face","node","recurse","parent","edges","faceEdges","shared","found","sharedEdge","polyhedral_pointEqual","hasInverse","faceInvert","faceDegrees","proj","edge","multiPoint","notPoles","inside","isArray","some","octahedron","polyhedral_octahedron","butterfly","faceProjection","faces","collignonK","polyhedral_collignon","waterman","w5","xyz","waterman_cartesian","hexagon","cornerNormals","parents","normals","cosphi","dot","src_project","Error","projectFeature","projectFeatureCollection","projectGeometry","id","properties","projectGeometryCollection","sinkPoint","sinkLine","sinkPolygon","project_points","polygons","holes","clockwise","hole","yi","pj","xj","yj","quincuncial","projectQuincuncial","quincuncial_gringorten","peirce","quantize","digits","quantizePoint","toFixed","quantizePoints","quantizePolygon","quantizeGeometry","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","rectangularPolyconic","robinson_K","robinsonRaw","i0","di","bx","by","yy","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","satellite","tilt","epsilonInverse","stitch_x0","x0e","stitch_x1","x1e","stitch_y0","y0e","stitch_y1","y1e","normalizePoint","clampPoint","clampPoints","extractFragments","fragments","pointk","xk","yk","fragmentBefore","stitchFeature","stitchGeometry","fragment","startFragment","end","endFragment","fragmentByStart","fragmentByEnd","index","stitchFragments","stitch","timesRaw","twoPoint","raw","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPointEquidistantRaw","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","G","P2","P2_A2","G_P2","Q","x2_y2","c3","m1","theta1","vanDerGrinten","vanDerGrinten2Raw","vanDerGrinten2","vanDerGrinten3Raw","vanDerGrinten3","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","vanDerGrinten4","wagner4_A","wagner4_B","wagner4Raw","wagner4","wagner6Raw","wagner6","wagner7Raw","wagner7","wiechelRaw","sin1_Phi","wiechel","winkel3Raw","F","sinphi","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","topology","src_bbox","bbox","bboxPoint","bboxGeometry","arcs","feature_feature","feature_object","transformPoint","stitchedArcs","emptyIndex","flush","dp","ends","fg","unshift","gf","mesh","meshArcs","geom","geomsByArc","extract0","extract1","extract2","extract3","geoms","extractArcs","merge","mergeArcs","polygonsByArc","groups","extract","planarRingArea","group","neighbors","ki","bisect","lo","hi","mid","src_neighbors","indexesByArc","geometryType","indexes","ij","ik","splice","bb","untransform","ascending","compare","array_array","stop","arrays","replaceStrokeWidth","styles","newStyles","createChoroplethStyles","choroplethValue","actualDimension","baseDimension","resizeFactor","reference","reverseRotation","item","isChildOfType","replace","connectorType","endPoint","expectedType"],"mappings":"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","file":"4.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  scale: 160,\n  xOffset: 0,\n  yOffset: 0,\n  rotation: [0, 0, 0],\n  precision: 0.1\n};","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipPolygon from \"./polygon\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport function clipExtent(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    return this._circle = circle(_), this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","import clipBuffer from \"./buffer\";\nimport clipPolygon from \"./polygon\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(rotate, sink) {\n    var line = clipLine(sink),\n        rotatedStart = rotate.invert(start[0], start[1]),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, rotatedStart);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      var point = rotate(lambda, phi);\n      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      var point = rotate(lambda, phi);\n      line.point(point[0], point[1]);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      var point = rotate(lambda, phi);\n      ringSink.point(point[0], point[1]);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius, delta) {\n  var cr = cos(radius),\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nexport function fitExtent(projection, extent, object) {\n  var w = extent[1][0] - extent[0][0],\n      h = extent[1][1] - extent[0][1],\n      clip = projection.clipExtent && projection.clipExtent();\n\n  projection\n      .scale(150)\n      .translate([0, 0]);\n\n  if (clip != null) projection.clipExtent(null);\n\n  geoStream(object, projection.stream(boundsStream));\n\n  var b = boundsStream.result(),\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\n  if (clip != null) projection.clipExtent(clip);\n\n  return projection\n      .scale(k * 150)\n      .translate([x, y]);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {clipExtent} from \"../clip/extent\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, clip = identity, // clip extent\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    }\n  };\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export {default as geoArea} from \"./src/area\";\nexport {default as geoBounds} from \"./src/bounds\";\nexport {default as geoCentroid} from \"./src/centroid\";\nexport {default as geoCircle} from \"./src/circle\";\nexport {default as geoClipExtent} from \"./src/clip/extent\"; // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\nexport {default as geoContains} from \"./src/contains\";\nexport {default as geoDistance} from \"./src/distance\";\nexport {default as geoGraticule, graticule10 as geoGraticule10} from \"./src/graticule\";\nexport {default as geoInterpolate} from \"./src/interpolate\";\nexport {default as geoLength} from \"./src/length\";\nexport {default as geoPath} from \"./src/path/index\";\nexport {default as geoAlbers} from \"./src/projection/albers\";\nexport {default as geoAlbersUsa} from \"./src/projection/albersUsa\";\nexport {default as geoAzimuthalEqualArea, azimuthalEqualAreaRaw as geoAzimuthalEqualAreaRaw} from \"./src/projection/azimuthalEqualArea\";\nexport {default as geoAzimuthalEquidistant, azimuthalEquidistantRaw as geoAzimuthalEquidistantRaw} from \"./src/projection/azimuthalEquidistant\";\nexport {default as geoConicConformal, conicConformalRaw as geoConicConformalRaw} from \"./src/projection/conicConformal\";\nexport {default as geoConicEqualArea, conicEqualAreaRaw as geoConicEqualAreaRaw} from \"./src/projection/conicEqualArea\";\nexport {default as geoConicEquidistant, conicEquidistantRaw as geoConicEquidistantRaw} from \"./src/projection/conicEquidistant\";\nexport {default as geoEquirectangular, equirectangularRaw as geoEquirectangularRaw} from \"./src/projection/equirectangular\";\nexport {default as geoGnomonic, gnomonicRaw as geoGnomonicRaw} from \"./src/projection/gnomonic\";\nexport {default as geoIdentity} from \"./src/projection/identity\";\nexport {default as geoProjection, projectionMutator as geoProjectionMutator} from \"./src/projection/index\";\nexport {default as geoMercator, mercatorRaw as geoMercatorRaw} from \"./src/projection/mercator\";\nexport {default as geoOrthographic, orthographicRaw as geoOrthographicRaw} from \"./src/projection/orthographic\";\nexport {default as geoStereographic, stereographicRaw as geoStereographicRaw} from \"./src/projection/stereographic\";\nexport {default as geoTransverseMercator, transverseMercatorRaw as geoTransverseMercatorRaw} from \"./src/projection/transverseMercator\";\nexport {default as geoRotation} from \"./src/rotation\";\nexport {default as geoStream} from \"./src/stream\";\nexport {default as geoTransform} from \"./src/transform\";\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ComposableMap = require(\"./ComposableMap\");\n\nObject.defineProperty(exports, \"ComposableMap\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ComposableMap).default;\n  }\n});\n\nvar _ZoomableGroup = require(\"./ZoomableGroup\");\n\nObject.defineProperty(exports, \"ZoomableGroup\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ZoomableGroup).default;\n  }\n});\n\nvar _Geographies = require(\"./Geographies\");\n\nObject.defineProperty(exports, \"Geographies\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geographies).default;\n  }\n});\n\nvar _Geography = require(\"./Geography\");\n\nObject.defineProperty(exports, \"Geography\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geography).default;\n  }\n});\n\nvar _Marker = require(\"./Marker\");\n\nObject.defineProperty(exports, \"Marker\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Marker).default;\n  }\n});\n\nvar _Markers = require(\"./Markers\");\n\nObject.defineProperty(exports, \"Markers\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Markers).default;\n  }\n});\n\nvar _Annotation = require(\"./Annotation\");\n\nObject.defineProperty(exports, \"Annotation\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Annotation).default;\n  }\n});\n\nvar _Graticule = require(\"./Graticule\");\n\nObject.defineProperty(exports, \"Graticule\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Graticule).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _projections = require(\"./projections\");\n\nvar _projections2 = _interopRequireDefault(_projections);\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ComposableMap = function (_Component) {\n  _inherits(ComposableMap, _Component);\n\n  function ComposableMap() {\n    _classCallCheck(this, ComposableMap);\n\n    var _this = _possibleConstructorReturn(this, (ComposableMap.__proto__ || Object.getPrototypeOf(ComposableMap)).call(this));\n\n    _this.projection = _this.projection.bind(_this);\n    return _this;\n  }\n\n  _createClass(ComposableMap, [{\n    key: \"projection\",\n    value: function projection() {\n      var _props = this.props,\n          projection = _props.projection,\n          projectionConfig = _props.projectionConfig,\n          width = _props.width,\n          height = _props.height;\n\n\n      return typeof projection !== \"function\" ? (0, _projections2.default)(width, height, projectionConfig, projection) : projection(width, height, projectionConfig);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          style = _props2.style,\n          showCenter = _props2.showCenter,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"svg\",\n        { width: width,\n          height: height,\n          viewBox: \"0 0 \" + width + \" \" + height,\n          className: \"rsm-svg\",\n          style: style },\n        _react2.default.cloneElement(this.props.children, {\n          projection: this.projection,\n          width: width,\n          height: height\n        }),\n        showCenter && _react2.default.createElement(\n          \"g\",\n          null,\n          _react2.default.createElement(\"rect\", { x: width / 2 - 0.5, y: 0, width: 1, height: height, fill: \"#e91e63\" }),\n          _react2.default.createElement(\"rect\", { x: 0, y: height / 2 - 0.5, width: width, height: 1, fill: \"#e91e63\" })\n        )\n      );\n    }\n  }]);\n\n  return ComposableMap;\n}(_react.Component);\n\nComposableMap.defaultProps = {\n  width: 800,\n  height: 450,\n  projection: \"times\",\n  projectionConfig: _projectionConfig2.default\n};\n\nexports.default = ComposableMap;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (width, height, config, projectionName) {\n\n  var scale = config.scale || _projectionConfig2.default.scale;\n  var xOffset = config.xOffset || _projectionConfig2.default.xOffset;\n  var yOffset = config.yOffset || _projectionConfig2.default.yOffset;\n  var rotation = config.rotation || _projectionConfig2.default.rotation;\n  var precision = config.precision || _projectionConfig2.default.precision;\n\n  return projectionReference[projectionName]().scale(scale).translate([xOffset + width / 2, yOffset + height / 2]).rotate(rotation).precision(precision);\n};\n\nvar _d3GeoProjection = require(\"d3-geo-projection\");\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar projectionReference = {\n  mercator: _d3Geo.geoMercator,\n  miller: _d3GeoProjection.geoMiller,\n  times: _d3GeoProjection.geoTimes,\n  robinson: _d3GeoProjection.geoRobinson,\n  winkel3: _d3GeoProjection.geoWinkel3,\n  eckert4: _d3GeoProjection.geoEckert4\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ZoomableGroup = function (_Component) {\n  _inherits(ZoomableGroup, _Component);\n\n  function ZoomableGroup(props) {\n    _classCallCheck(this, ZoomableGroup);\n\n    var _this = _possibleConstructorReturn(this, (ZoomableGroup.__proto__ || Object.getPrototypeOf(ZoomableGroup)).call(this, props));\n\n    var backdropX = props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropY = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n    var backdropWidth = props.projection().rotate([0, 0, 0])([props.backdrop.x[1], 0])[0] - props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\n    var backdropHeight = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[1]])[1] - props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\n\n    _this.state = {\n      mouseX: (0, _utils.calculateMousePosition)(\"x\", props.projection, props, props.zoom, 1),\n      mouseY: (0, _utils.calculateMousePosition)(\"y\", props.projection, props, props.zoom, 1),\n      mouseXStart: 0,\n      mouseYStart: 0,\n      isPressed: false,\n      resizeFactorX: 1,\n      resizeFactorY: 1,\n      backdrop: {\n        width: Math.round(backdropWidth),\n        height: Math.round(backdropHeight),\n        x: Math.round(backdropX),\n        y: Math.round(backdropY)\n      }\n    };\n\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleResize = _this.handleResize.bind(_this);\n    return _this;\n  }\n\n  _createClass(ZoomableGroup, [{\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(_ref) {\n      var pageX = _ref.pageX,\n          pageY = _ref.pageY;\n\n      if (this.props.disablePanning) return;\n\n      if (this.state.isPressed) {\n        this.setState({\n          mouseX: pageX - this.state.mouseXStart,\n          mouseY: pageY - this.state.mouseYStart\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      if (this.props.disablePanning) return;\n      if (this.state.isPressed) {\n        this.setState({\n          isPressed: false\n        });\n      }\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(_ref2) {\n      var pageX = _ref2.pageX,\n          pageY = _ref2.pageY;\n\n      if (this.props.disablePanning) return;\n      this.setState({\n        isPressed: true,\n        mouseXStart: pageX - this.state.mouseX,\n        mouseYStart: pageY - this.state.mouseY\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _state = this.state,\n          mouseX = _state.mouseX,\n          mouseY = _state.mouseY,\n          resizeFactorX = _state.resizeFactorX,\n          resizeFactorY = _state.resizeFactorY;\n      var _props = this.props,\n          projection = _props.projection,\n          center = _props.center,\n          zoom = _props.zoom;\n\n\n      var zoomFactor = nextProps.zoom / zoom;\n      var centerChanged = JSON.stringify(nextProps.center) !== JSON.stringify(center);\n\n      this.setState({\n        zoom: nextProps.zoom,\n        mouseX: centerChanged ? (0, _utils.calculateMousePosition)(\"x\", projection, nextProps, nextProps.zoom, resizeFactorX) : mouseX * zoomFactor,\n        mouseY: centerChanged ? (0, _utils.calculateMousePosition)(\"y\", projection, nextProps, nextProps.zoom, resizeFactorY) : mouseY * zoomFactor\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          projection = _props2.projection,\n          zoom = _props2.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      var xPercentageChange = 1 / resizeFactorX * this.state.resizeFactorX;\n      var yPercentageChange = 1 / resizeFactorY * this.state.resizeFactorY;\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: this.state.mouseX * xPercentageChange,\n        mouseY: this.state.mouseY * yPercentageChange\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props3 = this.props,\n          width = _props3.width,\n          height = _props3.height,\n          projection = _props3.projection,\n          zoom = _props3.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: (0, _utils.calculateMousePosition)(\"x\", projection, this.props, zoom, resizeFactorX),\n        mouseY: (0, _utils.calculateMousePosition)(\"y\", projection, this.props, zoom, resizeFactorY)\n      });\n\n      window.addEventListener(\"resize\", this.handleResize);\n      window.addEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n      window.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          width = _props4.width,\n          height = _props4.height,\n          zoom = _props4.zoom,\n          style = _props4.style,\n          projection = _props4.projection,\n          children = _props4.children;\n      var _state2 = this.state,\n          mouseX = _state2.mouseX,\n          mouseY = _state2.mouseY,\n          resizeFactorX = _state2.resizeFactorX,\n          resizeFactorY = _state2.resizeFactorY;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-zoomable-group\",\n          ref: function ref(zoomableGroupNode) {\n            return _this2.zoomableGroupNode = zoomableGroupNode;\n          },\n          transform: \"\\n           translate(\\n             \" + Math.round((width / 2 + resizeFactorX * mouseX) * 100) / 100 + \"\\n             \" + Math.round((height / 2 + resizeFactorY * mouseY) * 100) / 100 + \"\\n           )\\n           scale(\" + zoom + \")\\n           translate(\" + -width / 2 + \" \" + -height / 2 + \")\\n         \",\n          onMouseMove: this.handleMouseMove,\n          onMouseUp: this.handleMouseUp,\n          onMouseDown: this.handleMouseDown,\n          style: style\n        },\n        _react2.default.createElement(\"rect\", {\n          x: this.state.backdrop.x,\n          y: this.state.backdrop.y,\n          width: this.state.backdrop.width,\n          height: this.state.backdrop.height,\n          fill: \"transparent\",\n          style: { strokeWidth: 0 }\n        }),\n        (0, _utils.createNewChildren)(children, this.props)\n      );\n    }\n  }]);\n\n  return ZoomableGroup;\n}(_react.Component);\n\nZoomableGroup.defaultProps = {\n  center: [0, 0],\n  backdrop: {\n    x: [-179.9, 179.9],\n    y: [89.9, -89.9]\n  },\n  zoom: 1,\n  disablePanning: false\n};\n\nexports.default = ZoomableGroup;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _topojsonClient = require(\"topojson-client\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Geographies = function (_Component) {\n  _inherits(Geographies, _Component);\n\n  function Geographies(props) {\n    _classCallCheck(this, Geographies);\n\n    var _this = _possibleConstructorReturn(this, (Geographies.__proto__ || Object.getPrototypeOf(Geographies)).call(this, props));\n\n    _this.state = {\n      geographyPaths: props.geographyPaths\n    };\n\n    _this.fetchGeographies = _this.fetchGeographies.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geographies, [{\n    key: \"fetchGeographies\",\n    value: function fetchGeographies(geographyUrl) {\n      var _this2 = this;\n\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height;\n\n\n      if (!geographyUrl) return;\n\n      var request = new XMLHttpRequest();\n      request.open(\"GET\", geographyUrl, true);\n\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n          var geographyPaths = JSON.parse(request.responseText);\n          _this2.setState({\n            geographyPaths: (0, _topojsonClient.feature)(geographyPaths, geographyPaths.objects[Object.keys(geographyPaths.objects)[0]]).features\n          }, function () {\n            if (!_this2.props.onGeographiesLoaded) return;\n            _this2.props.onGeographyPathsLoaded(String(request.status));\n          });\n        } else {\n          if (!_this2.props.onGeographiesLoaded) return;\n          _this2.props.onGeographyPathsLoaded(String(request.status));\n        }\n      };\n      request.onerror = function () {\n        console.log(\"There was a connection error...\");\n      };\n      request.send();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      ;\n      if (!nextProps.geographyUrl && !nextProps.geographyPaths.length !== this.props.geographyPaths.length) {\n        this.setState({\n          geographyPaths: nextProps.geographyPaths\n        });\n        return;\n      }\n      if (nextProps.geographyUrl !== this.props.geographyUrl) {\n        this.fetchGeographies(nextProps.geographyUrl);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var geoPathsChanged = nextState.geographyPaths.length !== this.state.geographyPaths.length;\n      var choroplethChanged = JSON.stringify(nextProps.choropleth) !== JSON.stringify(this.props.choropleth);\n      return geoPathsChanged || choroplethChanged || nextProps.disableOptimization;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchGeographies(this.props.geographyUrl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          projection = _props2.projection,\n          style = _props2.style,\n          children = _props2.children;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-geographies\", style: style },\n        children(this.state.geographyPaths, projection)\n      );\n    }\n  }]);\n\n  return Geographies;\n}(_react.Component);\n\nGeographies.defaultProps = {\n  componentIdentifier: \"Geographies\",\n  disableOptimization: false,\n  geographyUrl: \"\",\n  geographyPaths: []\n};\n\nexports.default = Geographies;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar pathCache = {};\n\nvar renderPath = function renderPath(cacheId, geography, projection, round, precision) {\n  if (pathCache[cacheId]) return pathCache[cacheId];\n\n  var pathString = cacheId ? pathCache[cacheId] ? pathCache[cacheId] : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography) : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography);\n\n  if (cacheId) pathCache[cacheId] = pathString;\n\n  return pathString;\n};\n\nvar Geography = function (_Component) {\n  _inherits(Geography, _Component);\n\n  function Geography() {\n    _classCallCheck(this, Geography);\n\n    var _this = _possibleConstructorReturn(this, (Geography.__proto__ || Object.getPrototypeOf(Geography)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geography, [{\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      evt.persist();\n      var _props = this.props,\n          onClick = _props.onClick,\n          geography = _props.geography;\n\n      return onClick && onClick(geography, evt);\n    }\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props2 = this.props,\n          onMouseEnter = _props2.onMouseEnter,\n          geography = _props2.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props3 = this.props,\n          onMouseMove = _props3.onMouseMove,\n          geography = _props3.geography;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(geography, evt);\n        });\n      } else if (onMouseMove) onMouseMove(geography, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseLeave = _props4.onMouseLeave,\n          geography = _props4.geography;\n\n      this.setState({\n        hover: false,\n        pressed: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseDown = _props5.onMouseDown,\n          geography = _props5.geography;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props6 = this.props,\n          onMouseUp = _props6.onMouseUp,\n          geography = _props6.geography;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          geography = _props7.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          geography = _props8.geography;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(geography, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props9 = this.props,\n          geography = _props9.geography,\n          projection = _props9.projection,\n          round = _props9.round,\n          cacheId = _props9.cacheId,\n          precision = _props9.precision,\n          tabable = _props9.tabable,\n          style = _props9.style;\n      var _state = this.state,\n          hover = _state.hover,\n          pressed = _state.pressed;\n\n\n      var pathString = renderPath(cacheId, geography, projection, round, precision);\n\n      var excludeProps = [\"geography\", \"projection\", \"round\", \"cacheId\", \"precision\", \"tabable\", \"style\", \"onClick\", \"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\"];\n\n      var restProps = Object.keys(this.props).filter(function (key) {\n        return excludeProps.indexOf(key) === -1;\n      }).reduce(function (obj, key) {\n        obj[key] = _this2.props[key];\n        return obj;\n      }, {});\n\n      return _react2.default.createElement(\"path\", _extends({\n        d: pathString,\n        className: \"rsm-geography\" + (pressed ? \" rsm-geography--pressed\" : \"\") + (hover ? \" rsm-geography--hover\" : \"\"),\n        style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n        onClick: this.handleMouseClick,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseMove: this.handleMouseMove,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onFocus: tabable && this.handleFocus,\n        onBlur: tabable && this.handleBlur,\n        tabIndex: tabable ? 0 : -1\n      }, restProps));\n    }\n  }]);\n\n  return Geography;\n}(_react.Component);\n\nGeography.defaultProps = {\n  precision: 0.1,\n  cacheId: null,\n  round: false,\n  tabable: true,\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  }\n};\n\nexports.default = Geography;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Marker = function (_Component) {\n  _inherits(Marker, _Component);\n\n  function Marker() {\n    _classCallCheck(this, Marker);\n\n    var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Marker, [{\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props = this.props,\n          onMouseEnter = _props.onMouseEnter,\n          marker = _props.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props2 = this.props,\n          onMouseMove = _props2.onMouseMove,\n          marker = _props2.marker;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(marker, evt);\n        });\n      } else if (onMouseMove) onMouseMove(marker, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props3 = this.props,\n          onMouseLeave = _props3.onMouseLeave,\n          marker = _props3.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseDown = _props4.onMouseDown,\n          marker = _props4.marker;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseUp = _props5.onMouseUp,\n          marker = _props5.marker;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      if (!this.props.onClick) return;\n      evt.persist();\n      var _props6 = this.props,\n          onClick = _props6.onClick,\n          marker = _props6.marker,\n          projection = _props6.projection;\n\n      return onClick && onClick(marker, projection()(marker.coordinates), evt);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          marker = _props7.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          marker = _props8.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(marker, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props9 = this.props,\n          projection = _props9.projection,\n          marker = _props9.marker,\n          style = _props9.style,\n          tabable = _props9.tabable,\n          children = _props9.children;\n      var _state = this.state,\n          pressed = _state.pressed,\n          hover = _state.hover;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-marker\" + (pressed ? \" rsm-marker--pressed\" : \"\") + (hover ? \" rsm-marker--hover\" : \"\"),\n          transform: \"translate(\\n           \" + projection()(marker.coordinates)[0] + \"\\n           \" + projection()(marker.coordinates)[1] + \"\\n         )\",\n          style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n          onMouseDown: this.handleMouseDown,\n          onMouseUp: this.handleMouseUp,\n          onClick: this.handleMouseClick,\n          onMouseMove: this.handleMouseMove,\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur,\n          tabIndex: tabable ? 0 : -1\n        },\n        children\n      );\n    }\n  }]);\n\n  return Marker;\n}(_react.Component);\n\nMarker.defaultProps = {\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  },\n  marker: {\n    coordinates: [0, 0]\n  },\n  tabable: true\n};\n\nexports.default = Marker;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Markers = function (_Component) {\n  _inherits(Markers, _Component);\n\n  function Markers() {\n    _classCallCheck(this, Markers);\n\n    return _possibleConstructorReturn(this, (Markers.__proto__ || Object.getPrototypeOf(Markers)).apply(this, arguments));\n  }\n\n  _createClass(Markers, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          projection = _props.projection,\n          style = _props.style;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-markers\", style: style },\n        !children ? null : children.length === undefined ? _react2.default.cloneElement(children, {\n          projection: projection\n        }) : children.map(function (child, i) {\n          return !child ? null : _react2.default.cloneElement(child, {\n            key: child.key || \"marker-\" + i,\n            projection: projection\n          });\n        })\n      );\n    }\n  }]);\n\n  return Markers;\n}(_react.Component);\n\nMarkers.defaultProps = {\n  componentIdentifier: \"Markers\"\n};\n\nexports.default = Markers;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Annotation = function (_Component) {\n  _inherits(Annotation, _Component);\n\n  function Annotation() {\n    _classCallCheck(this, Annotation);\n\n    return _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).apply(this, arguments));\n  }\n\n  _createClass(Annotation, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          projection = _props.projection,\n          subject = _props.subject,\n          style = _props.style,\n          dx = _props.dx,\n          dy = _props.dy,\n          zoom = _props.zoom,\n          stroke = _props.stroke,\n          strokeWidth = _props.strokeWidth,\n          children = _props.children;\n\n\n      var connectorPath = (0, _utils.createConnectorPath)(null, [-dx / zoom, -dy / zoom]);\n\n      return _react2.default.createElement(\n        \"g\",\n        {\n          className: \"rsm-annotation\",\n          style: { style: style },\n          transform: \"translate(\\n          \" + (projection()(subject)[0] + dx / zoom) + \"\\n          \" + (projection()(subject)[1] + dy / zoom) + \"\\n        )\",\n          textAnchor: (0, _utils.createTextAnchor)(dx)\n        },\n        children,\n        _react2.default.createElement(\"path\", { d: connectorPath, stroke: stroke, strokeWidth: strokeWidth })\n      );\n    }\n  }]);\n\n  return Annotation;\n}(_react.Component);\n\nAnnotation.defaultProps = {\n  componentIdentifier: \"Annotation\",\n  stroke: \"#000000\",\n  strokeWidth: 1,\n  zoom: 1\n};\n\nexports.default = Annotation;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar computeGraticule = function computeGraticule(projection, step) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().step(step)());\n};\n\nvar computeOutline = function computeOutline(projection) {\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().outline());\n};\n\nvar Graticule = function (_Component) {\n  _inherits(Graticule, _Component);\n\n  function Graticule() {\n    _classCallCheck(this, Graticule);\n\n    var _this = _possibleConstructorReturn(this, (Graticule.__proto__ || Object.getPrototypeOf(Graticule)).call(this));\n\n    _this.state = {\n      renderGraticule: false,\n      graticulePath: \"\",\n      outlinePath: \"\"\n    };\n    _this.renderGraticule = _this.renderGraticule.bind(_this);\n    return _this;\n  }\n\n  _createClass(Graticule, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderGraticule();\n    }\n  }, {\n    key: \"renderGraticule\",\n    value: function renderGraticule() {\n      var _props = this.props,\n          step = _props.step,\n          projection = _props.projection,\n          round = _props.round,\n          precision = _props.precision;\n\n\n      this.setState({\n        renderGraticule: true,\n        graticulePath: round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n        outlinePath: round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _props2 = this.props,\n          step = _props2.step,\n          projection = _props2.projection,\n          round = _props2.round,\n          precision = _props2.precision;\n\n\n      if (nextProps.round !== round || nextProps.precision !== precision) {\n        this.setState({\n          graticulePath: nextProps.round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n          outlinePath: nextProps.round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.disableOptimization;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          zoom = _props3.zoom,\n          style = _props3.style,\n          outline = _props3.outline,\n          fill = _props3.fill,\n          stroke = _props3.stroke;\n\n\n      return this.state.renderGraticule && _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-graticule\" },\n        _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.graticulePath,\n          style: style\n        }),\n        outline && _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.outlinePath,\n          style: style\n        })\n      );\n    }\n  }]);\n\n  return Graticule;\n}(_react.Component);\n\nGraticule.defaultProps = {\n  componentIdentifier: \"Graticule\",\n  disableOptimization: true,\n  round: true,\n  precision: 0.1,\n  step: [10, 10],\n  outline: true,\n  stroke: \"#DDDDDD\",\n  fill: \"transparent\",\n  style: {\n    pointerEvents: \"none\"\n  }\n};\n\nexports.default = Graticule;","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = tan(z_2),\n          lnsecz_2 = log(1 / cosz_2);\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          α = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(α)) - α;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotα = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotα + s * sqrt(cotα * cotα - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      p = projection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosλ = cos(x);\n    return [x, 2 * atan2(sqrt(cosλ * cosλ + tanPhi0 * tanPhi0 - y * y) - cosλ, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function(_) {\n      return arguments.length ? (projection[name](_), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport {pi} from \"./math\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\nimport {abs, floor, max, min, pi, radians, sqrtPi, tau} from \"./math\";\n\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphere(step) {\n  return {\n    type: \"Polygon\",\n    coordinates: [\n      range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })\n      .concat(range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))\n    ]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, radians} from \"../math\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes) {\n  var sphere = interpolateSphere(lobes);\n\n  lobes = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      return [\n        [l[0][0] * radians, l[0][1] * radians],\n        [l[1][0] * radians, l[1][1] * radians],\n        [l[2][0] * radians, l[2][1] * radians]\n      ];\n    });\n  });\n\n  var bounds = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      var x0 = project(l[0][0], l[0][1])[0],\n          x1 = project(l[2][0], l[2][1])[0],\n          y0 = project(l[1][0], l[0][1])[1],\n          y1 = project(l[1][0], l[1][1])[1],\n          t;\n      if (y0 > y1) t = y0, y0 = y1, y1 = t;\n      return [[x0, y0], [x1, y1]];\n    });\n  });\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  // Assumes mutually exclusive bounding boxes for lobes.\n  if (project.invert) forward.invert = function(x, y) {\n    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n    for (var i = 0, n = bound.length; i < n; ++i) {\n      var b = bound[i];\n      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n        p[0] += lobe[i][1][0];\n        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n      }\n    }\n  };\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((y2_1 - sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1500)\n      .center([-160.908, 62.4864])\n      .clipAngle(25);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function naturalEarthRaw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarthRaw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarthRaw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\nexport default function(root, face, r) {\n\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {transform: [\n    cos(r), sin(r), 0,\n    -sin(r), cos(r), 0\n  ]});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(101.858)\n      .center([0, 45]);\n}\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon\";\nimport {pi, sqrt} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","export default function() {}\n","import {geoStream} from \"d3-geo\";\nimport noop from \"../noop\";\nimport clockwise from \"./clockwise\";\nimport contains from \"./contains\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n","export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n","export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * (x0 + (y > 0 ? 1 : -1) * d),\n          y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {gringortenRaw} from \"../gringorten\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","export default function(o, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(coordinates) {\n    coordinates[0] = +coordinates[0].toFixed(digits);\n    coordinates[1] = +coordinates[1].toFixed(digits);\n  }\n\n  function quantizePoints(coordinates) {\n    coordinates.forEach(quantizePoint);\n  }\n\n  function quantizePolygon(coordinates) {\n    coordinates.forEach(quantizePoints);\n  }\n\n  function quantizeGeometry(o) {\n    if (o) switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": case \"LineString\": quantizePoints(o.coordinates); break;\n      case \"MultiLineString\": case \"Polygon\": quantizePolygon(o.coordinates); break;\n      case \"MultiPolygon\": o.coordinates.forEach(quantizePolygon); break;\n      default: return;\n    }\n  }\n\n  function quantizeFeature(o) {\n    quantizeGeometry(o.geometry);\n  }\n\n  if (o) switch (o.type) {\n    case \"Feature\": quantizeFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(quantizeFeature); break;\n    default: quantizeGeometry(o); break;\n  }\n\n  return o;\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1\n      ? [0, y] // pole\n      : [x0, quantize(y)]; // antimeridian\n}\n\nfunction clampPoint(p) {\n  if (p[0] <= x0e) p[0] = x0;\n  else if (p[0] >= x1e) p[0] = x1;\n  if (p[1] <= y0e) p[1] = y0;\n  else if (p[1] >= y1e) p[1] = y1;\n}\n\nfunction clampPoints(points) {\n  points.forEach(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(polygon, fragments) {\n  for (var j = 0, m = polygon.length; j < m; ++j) {\n    var ring = polygon[j];\n    ring.polygon = polygon;\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push(ring);\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = ring.slice(0, i + 1);\n          fragmentBefore.polygon = polygon;\n          fragmentBefore[fragmentBefore.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push(ring = ring.slice(k - 1));\n        ring[0] = normalizePoint(ring[0][1]);\n        ring.polygon = polygon;\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n  polygon.length = 0;\n}\n\n// Now stitch the fragments back together into rings.\n// TODO remove empty polygons.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment[0];\n    end = fragment[fragment.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment[0];\n      end = fragment[fragment.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment[0]];\n        startFragment.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = startFragment.concat(fragment);\n        fragment.polygon = startFragment.polygon;\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment[endFragment.length - 1]];\n        fragment.pop(); // drop the shared coordinate\n        fragment = fragment.concat(endFragment);\n        fragment.polygon = endFragment.polygon;\n        fragment.index = n++;\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n      } else {\n        fragment.push(fragment[0]); // close ring\n        fragment.polygon.push(fragment);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(o) {\n  stitchGeometry(o.geometry);\n}\n\nfunction stitchGeometry(o) {\n  if (!o) return;\n  var fragments, i, n;\n\n  switch (o.type) {\n    case \"GeometryCollection\": {\n      o.geometries.forEach(stitchGeometry);\n      return;\n    }\n    case \"Point\": {\n      clampPoint(o.coordinates);\n      break;\n    }\n    case \"MultiPoint\":\n    case \"LineString\": {\n      clampPoints(o.coordinates);\n      break;\n    }\n    case \"MultiLineString\": {\n      o.coordinates.forEach(clampPoints);\n      break;\n    }\n    case \"Polygon\": {\n      extractFragments(o.coordinates, fragments = []);\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = o.coordinates.length;\n      while (++i < n) extractFragments(o.coordinates[i], fragments);\n      break;\n    }\n    default: return;\n  }\n\n  stitchFragments(fragments);\n}\n\nexport default function(o) {\n  if (o) switch (o.type) {\n    case \"Feature\": stitchFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(stitchFeature); break;\n    default: stitchGeometry(o); break;\n  }\n  return o;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\n// TODO clip to ellipse\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \"./math\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","export {default as geoAiry, airyRaw as geoAiryRaw} from \"./src/airy\";\nexport {default as geoAitoff, aitoffRaw as geoAitoffRaw} from \"./src/aitoff\";\nexport {default as geoArmadillo, armadilloRaw as geoArmadilloRaw} from \"./src/armadillo\";\nexport {default as geoAugust, augustRaw as geoAugustRaw} from \"./src/august\";\nexport {default as geoBaker, bakerRaw as geoBakerRaw} from \"./src/baker\";\nexport {default as geoBerghaus, berghausRaw as geoBerghausRaw} from \"./src/berghaus\";\nexport {default as geoBoggs, boggsRaw as geoBoggsRaw} from \"./src/boggs\";\nexport {default as geoBonne, bonneRaw as geoBonneRaw} from \"./src/bonne\";\nexport {default as geoBottomley, bottomleyRaw as geoBottomleyRaw} from \"./src/bottomley\";\nexport {default as geoBromley, bromleyRaw as geoBromleyRaw} from \"./src/bromley\";\nexport {default as geoChamberlin, chamberlinRaw as geoChamberlinRaw, chamberlinAfrica as geoChamberlinAfrica} from \"./src/chamberlin\";\nexport {default as geoCollignon, collignonRaw as geoCollignonRaw} from \"./src/collignon\";\nexport {default as geoCraig, craigRaw as geoCraigRaw} from \"./src/craig\";\nexport {default as geoCraster, crasterRaw as geoCrasterRaw} from \"./src/craster\";\nexport {default as geoCylindricalEqualArea, cylindricalEqualAreaRaw as geoCylindricalEqualAreaRaw} from \"./src/cylindricalEqualArea\";\nexport {default as geoCylindricalStereographic, cylindricalStereographicRaw as geoCylindricalStereographicRaw} from \"./src/cylindricalStereographic\";\nexport {default as geoEckert1, eckert1Raw as geoEckert1Raw} from \"./src/eckert1.js\";\nexport {default as geoEckert2, eckert2Raw as geoEckert2Raw} from \"./src/eckert2.js\";\nexport {default as geoEckert3, eckert3Raw as geoEckert3Raw} from \"./src/eckert3.js\";\nexport {default as geoEckert4, eckert4Raw as geoEckert4Raw} from \"./src/eckert4.js\";\nexport {default as geoEckert5, eckert5Raw as geoEckert5Raw} from \"./src/eckert5.js\";\nexport {default as geoEckert6, eckert6Raw as geoEckert6Raw} from \"./src/eckert6.js\";\nexport {default as geoEisenlohr, eisenlohrRaw as geoEisenlohrRaw} from \"./src/eisenlohr.js\";\nexport {default as geoFahey, faheyRaw as geoFaheyRaw} from \"./src/fahey.js\";\nexport {default as geoFoucaut, foucautRaw as geoFoucautRaw} from \"./src/foucaut.js\";\nexport {default as geoGilbert} from \"./src/gilbert.js\";\nexport {default as geoGingery, gingeryRaw as geoGingeryRaw} from \"./src/gingery.js\";\nexport {default as geoGinzburg4, ginzburg4Raw as geoGinzburg4Raw} from \"./src/ginzburg4.js\";\nexport {default as geoGinzburg5, ginzburg5Raw as geoGinzburg5Raw} from \"./src/ginzburg5.js\";\nexport {default as geoGinzburg6, ginzburg6Raw as geoGinzburg6Raw} from \"./src/ginzburg6.js\";\nexport {default as geoGinzburg8, ginzburg8Raw as geoGinzburg8Raw} from \"./src/ginzburg8.js\";\nexport {default as geoGinzburg9, ginzburg9Raw as geoGinzburg9Raw} from \"./src/ginzburg9.js\";\nexport {default as geoGringorten, gringortenRaw as geoGringortenRaw} from \"./src/gringorten.js\";\nexport {default as geoGuyou, guyouRaw as geoGuyouRaw} from \"./src/guyou.js\";\nexport {default as geoHammer, hammerRaw as geoHammerRaw} from \"./src/hammer.js\";\nexport {default as geoHammerRetroazimuthal, hammerRetroazimuthalRaw as geoHammerRetroazimuthalRaw} from \"./src/hammerRetroazimuthal.js\";\nexport {default as geoHealpix, healpixRaw as geoHealpixRaw} from \"./src/healpix.js\";\nexport {default as geoHill, hillRaw as geoHillRaw} from \"./src/hill.js\";\nexport {default as geoHomolosine, homolosineRaw as geoHomolosineRaw} from \"./src/homolosine.js\";\nexport {default as geoInterrupt} from \"./src/interrupted/index\";\nexport {default as geoInterruptedBoggs} from \"./src/interrupted/boggs\";\nexport {default as geoInterruptedHomolosine} from \"./src/interrupted/homolosine\";\nexport {default as geoInterruptedMollweide} from \"./src/interrupted/mollweide\";\nexport {default as geoInterruptedMollweideHemispheres} from \"./src/interrupted/mollweideHemispheres\";\nexport {default as geoInterruptedSinuMollweide} from \"./src/interrupted/sinuMollweide\";\nexport {default as geoInterruptedSinusoidal} from \"./src/interrupted/sinusoidal\";\nexport {default as geoKavrayskiy7, kavrayskiy7Raw as geoKavrayskiy7Raw} from \"./src/kavrayskiy7.js\";\nexport {default as geoLagrange, lagrangeRaw as geoLagrangeRaw} from \"./src/lagrange.js\";\nexport {default as geoLarrivee, larriveeRaw as geoLarriveeRaw} from \"./src/larrivee\";\nexport {default as geoLaskowski, laskowskiRaw as geoLaskowskiRaw} from \"./src/laskowski\";\nexport {default as geoLittrow, littrowRaw as geoLittrowRaw} from \"./src/littrow.js\";\nexport {default as geoLoximuthal, loximuthalRaw as geoLoximuthalRaw} from \"./src/loximuthal.js\";\nexport {default as geoMiller, millerRaw as geoMillerRaw} from \"./src/miller\";\nexport {default as geoModifiedStereographic, modifiedStereographicRaw as geoModifiedStereographicRaw, modifiedStereographicAlaska as geoModifiedStereographicAlaska, modifiedStereographicGs48 as geoModifiedStereographicGs48, modifiedStereographicGs50 as geoModifiedStereographicGs50, modifiedStereographicMiller as geoModifiedStereographicMiller, modifiedStereographicLee as geoModifiedStereographicLee} from \"./src/modifiedStereographic\";\nexport {default as geoMollweide, mollweideRaw as geoMollweideRaw} from \"./src/mollweide\";\nexport {default as geoMtFlatPolarParabolic, mtFlatPolarParabolicRaw as geoMtFlatPolarParabolicRaw} from \"./src/mtFlatPolarParabolic\";\nexport {default as geoMtFlatPolarQuartic, mtFlatPolarQuarticRaw as geoMtFlatPolarQuarticRaw} from \"./src/mtFlatPolarQuartic\";\nexport {default as geoMtFlatPolarSinusoidal, mtFlatPolarSinusoidalRaw as geoMtFlatPolarSinusoidalRaw} from \"./src/mtFlatPolarSinusoidal\";\nexport {default as geoNaturalEarth, naturalEarthRaw as geoNaturalEarthRaw} from \"./src/naturalEarth\";\nexport {default as geoNellHammer, nellHammerRaw as geoNellHammerRaw} from \"./src/nellHammer\";\nexport {default as geoPatterson, pattersonRaw as geoPattersonRaw} from \"./src/patterson\";\nexport {default as geoPolyconic, polyconicRaw as geoPolyconicRaw} from \"./src/polyconic\";\nexport {default as geoPolyhedral} from \"./src/polyhedral/index.js\";\nexport {default as geoPolyhedralButterfly} from \"./src/polyhedral/butterfly.js\";\nexport {default as geoPolyhedralCollignon} from \"./src/polyhedral/collignon.js\";\nexport {default as geoPolyhedralWaterman} from \"./src/polyhedral/waterman.js\";\nexport {default as geoProject} from \"./src/project/index\";\nexport {default as geoGringortenQuincuncial} from \"./src/quincuncial/gringorten.js\";\nexport {default as geoPeirceQuincuncial} from \"./src/quincuncial/peirce.js\";\nexport {default as geoPierceQuincuncial} from \"./src/quincuncial/peirce.js\"; // DEPRECATED misspelling\nexport {default as geoQuantize} from \"./src/quantize\";\nexport {default as geoQuincuncial} from \"./src/quincuncial/index.js\";\nexport {default as geoRectangularPolyconic, rectangularPolyconicRaw as geoRectangularPolyconicRaw} from \"./src/rectangularPolyconic\";\nexport {default as geoRobinson, robinsonRaw as geoRobinsonRaw} from \"./src/robinson\";\nexport {default as geoSatellite, satelliteRaw as geoSatelliteRaw} from \"./src/satellite\";\nexport {default as geoSinuMollweide, sinuMollweideRaw as geoSinuMollweideRaw} from \"./src/sinuMollweide\";\nexport {default as geoSinusoidal, sinusoidalRaw as geoSinusoidalRaw} from \"./src/sinusoidal\";\nexport {default as geoStitch} from \"./src/stitch\";\nexport {default as geoTimes, timesRaw as geoTimesRaw} from \"./src/times\";\nexport {default as geoTwoPointAzimuthal, twoPointAzimuthalRaw as geoTwoPointAzimuthalRaw, twoPointAzimuthalUsa as geoTwoPointAzimuthalUsa} from \"./src/twoPointAzimuthal\";\nexport {default as geoTwoPointEquidistant, twoPointEquidistantRaw as geoTwoPointEquidistantRaw, twoPointEquidistantUsa as geoTwoPointEquidistantUsa} from \"./src/twoPointEquidistant\";\nexport {default as geoVanDerGrinten, vanDerGrintenRaw as geoVanDerGrintenRaw} from \"./src/vanDerGrinten\";\nexport {default as geoVanDerGrinten2, vanDerGrinten2Raw as geoVanDerGrinten2Raw} from \"./src/vanDerGrinten2\";\nexport {default as geoVanDerGrinten3, vanDerGrinten3Raw as geoVanDerGrinten3Raw} from \"./src/vanDerGrinten3\";\nexport {default as geoVanDerGrinten4, vanDerGrinten4Raw as geoVanDerGrinten4Raw} from \"./src/vanDerGrinten4\";\nexport {default as geoWagner4, wagner4Raw as geoWagner4Raw} from \"./src/wagner4.js\";\nexport {default as geoWagner6, wagner6Raw as geoWagner6Raw} from \"./src/wagner6.js\";\nexport {default as geoWagner7, wagner7Raw as geoWagner7Raw} from \"./src/wagner7.js\";\nexport {default as geoWiechel, wiechelRaw as geoWiechelRaw} from \"./src/wiechel.js\";\nexport {default as geoWinkel3, winkel3Raw as geoWinkel3Raw} from \"./src/winkel3\";\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    point[0] = (x0 += point[0]) * kx + dx;\n    point[1] = (y0 += point[1]) * ky + dy;\n    return point;\n  };\n}\n","import transform from \"./transform\";\n\nexport default function(topology) {\n  var bbox = topology.bbox;\n\n  function bboxPoint(p0) {\n    p1[0] = p0[0], p1[1] = p0[1], t(p1);\n    if (p1[0] < x0) x0 = p1[0];\n    if (p1[0] > x1) x1 = p1[0];\n    if (p1[1] < y0) y0 = p1[1];\n    if (p1[1] > y1) y1 = p1[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  if (!bbox) {\n    var t = transform(topology), p0, p1 = new Array(2), name,\n        x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n    topology.arcs.forEach(function(arc) {\n      var i = -1, n = arc.length;\n      while (++i < n) {\n        p0 = arc[i], p1[0] = p0[0], p1[1] = p0[1], t(p1, i);\n        if (p1[0] < x0) x0 = p1[0];\n        if (p1[0] > x1) x1 = p1[0];\n        if (p1[1] < y0) y0 = p1[1];\n        if (p1[1] > y1) y1 = p1[1];\n      }\n    });\n\n    for (name in topology.objects) {\n      bboxGeometry(topology.objects[name]);\n    }\n\n    bbox = topology.bbox = [x0, y0, x1, y1];\n  }\n\n  return bbox;\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k].slice(), k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p.slice());\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0].slice());\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0].slice());\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nexport default function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n}\n\nexport function meshArcs(topology, object, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n","export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n","import bisect from \"./bisect\";\n\nexport default function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n","import bbox from \"./bbox\";\n\nexport default function(topology, n) {\n  if (!((n = Math.floor(n)) >= 2)) throw new Error(\"n must be ≥2\");\n  if (topology.transform) throw new Error(\"already quantized\");\n  var bb = bbox(topology), name,\n      dx = bb[0], kx = (bb[2] - dx) / (n - 1) || 1,\n      dy = bb[1], ky = (bb[3] - dy) / (n - 1) || 1;\n\n  function quantizePoint(p) {\n    p[0] = Math.round((p[0] - dx) / kx);\n    p[1] = Math.round((p[1] - dy) / ky);\n  }\n\n  function quantizeGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(quantizePoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = 1,\n        j = 1,\n        n = arc.length,\n        pi = arc[0],\n        x0 = pi[0] = Math.round((pi[0] - dx) / kx),\n        y0 = pi[1] = Math.round((pi[1] - dy) / ky),\n        pj,\n        x1,\n        y1;\n\n    for (; i < n; ++i) {\n      pi = arc[i];\n      x1 = Math.round((pi[0] - dx) / kx);\n      y1 = Math.round((pi[1] - dy) / ky);\n      if (x1 !== x0 || y1 !== y0) {\n        pj = arc[j++];\n        pj[0] = x1 - x0, x0 = x1;\n        pj[1] = y1 - y0, y0 = y1;\n      }\n    }\n\n    if (j < 2) {\n      pj = arc[j++];\n      pj[0] = 0;\n      pj[1] = 0;\n    }\n\n    arc.length = j;\n  });\n\n  for (name in topology.objects) {\n    quantizeGeometry(topology.objects[name]);\n  }\n\n  topology.transform = {\n    scale: [kx, ky],\n    translate: [dx, dy]\n  };\n\n  return topology;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0, x0 = x1;\n    point[1] = y1 - y0, y0 = y1;\n    return point;\n  };\n}\n","export {default as bbox} from \"./src/bbox\";\nexport {default as feature} from \"./src/feature\";\nexport {default as mesh, meshArcs} from \"./src/mesh\";\nexport {default as merge, mergeArcs} from \"./src/merge\";\nexport {default as neighbors} from \"./src/neighbors\";\nexport {default as quantize} from \"./src/quantize\";\nexport {default as transform} from \"./src/transform\";\nexport {default as untransform} from \"./src/untransform\";\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","export {default as bisect, bisectRight, bisectLeft} from \"./bisect\";\nexport {default as ascending} from \"./ascending\";\nexport {default as bisector} from \"./bisector\";\nexport {default as cross} from \"./cross\";\nexport {default as descending} from \"./descending\";\nexport {default as deviation} from \"./deviation\";\nexport {default as extent} from \"./extent\";\nexport {default as histogram} from \"./histogram\";\nexport {default as thresholdFreedmanDiaconis} from \"./threshold/freedmanDiaconis\";\nexport {default as thresholdScott} from \"./threshold/scott\";\nexport {default as thresholdSturges} from \"./threshold/sturges\";\nexport {default as max} from \"./max\";\nexport {default as mean} from \"./mean\";\nexport {default as median} from \"./median\";\nexport {default as merge} from \"./merge\";\nexport {default as min} from \"./min\";\nexport {default as pairs} from \"./pairs\";\nexport {default as permute} from \"./permute\";\nexport {default as quantile} from \"./quantile\";\nexport {default as range} from \"./range\";\nexport {default as scan} from \"./scan\";\nexport {default as shuffle} from \"./shuffle\";\nexport {default as sum} from \"./sum\";\nexport {default as ticks, tickIncrement, tickStep} from \"./ticks\";\nexport {default as transpose} from \"./transpose\";\nexport {default as variance} from \"./variance\";\nexport {default as zip} from \"./zip\";\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceStrokeWidth = replaceStrokeWidth;\nexports.createChoroplethStyles = createChoroplethStyles;\nexports.calculateResizeFactor = calculateResizeFactor;\nexports.calculateMousePosition = calculateMousePosition;\nexports.isChildOfType = isChildOfType;\nexports.createNewChildren = createNewChildren;\nexports.roundPath = roundPath;\nexports.createConnectorPath = createConnectorPath;\nexports.createTextAnchor = createTextAnchor;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction replaceStrokeWidth(styles) {\n  var newStyles = {};\n  Object.keys(styles).map(function (key, i) {\n    if (key === \"strokeWidth\") newStyles[key] = \"inherit\";else newStyles[key] = styles[key];\n  });\n  return newStyles;\n}\n\nfunction createChoroplethStyles(styles, choroplethValue) {\n  if (choroplethValue) {\n    var newStyles = {};\n    Object.keys(styles).map(function (key, i) {\n      if (key === \"fill\") newStyles[key] = choroplethValue.value;else newStyles[key] = styles[key];\n    });\n    return newStyles;\n  } else {\n    return styles;\n  }\n}\n\nfunction calculateResizeFactor(actualDimension, baseDimension) {\n  return 1 / 100 * (100 / actualDimension * baseDimension);\n}\n\nfunction calculateMousePosition(direction, projection, props, zoom, resizeFactor) {\n  var center = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : props.center;\n  var width = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : props.width;\n  var height = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : props.height;\n\n  var reference = { x: 0, y: 1 };\n  var reverseRotation = projection().rotate().map(function (item) {\n    return -item;\n  });\n  return (projection().rotate(reverseRotation)([-center[0], -center[1]])[reference[direction]] - (reference[direction] === 0 ? width : height) / 2) * zoom * (1 / resizeFactor);\n}\n\nfunction isChildOfType(child, expectedType) {\n  return child.props.componentIdentifier === expectedType;\n}\n\nfunction createNewChildren(children, props) {\n  if (!children) return;\n  if (!children.length) {\n    return isChildOfType(children, \"Geographies\") ? _react2.default.cloneElement(children, {\n      projection: props.projection\n    }) : isChildOfType(children, \"Markers\") || isChildOfType(children, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(children, {\n      projection: props.projection,\n      zoom: props.zoom\n    }) : children;\n  } else {\n    return children.map(function (child, i) {\n      if (!child) return;\n      return isChildOfType(child, \"Geographies\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection\n      }) : isChildOfType(child, \"Markers\") || isChildOfType(child, \"Annotation\") || isChildOfType(child, \"Graticule\") ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection,\n        zoom: props.zoom\n      }) : child;\n    });\n  }\n}\n\nfunction roundPath(path, precision) {\n  if (!path) return;\n  var query = /[\\d\\.-][\\d\\.e-]*/g;\n  return path.replace(query, function (n) {\n    return Math.round(n * (1 / precision)) / (1 / precision);\n  });\n}\n\nfunction createConnectorPath(connectorType, endPoint) {\n  return \"M0,0 L\" + endPoint[0] + \",\" + endPoint[1];\n}\n\nfunction createTextAnchor(dx) {\n  if (dx > 0) return \"start\";else if (dx < 0) return \"end\";else return \"middle\";\n}"],"sourceRoot":""}