{"version":3,"sources":["webpack:///./src/utils/Button/ButtonList.jsx","webpack:///./src/components/MapContainer/MapContainer.jsx"],"names":["ButtonList","styled","div","_templateObject","Button","React","lazy","__webpack_require__","e","then","bind","Map","Promise","all","MainSection","BreakfastModal","initialState","breakfastName","description","img","attr","alt","info","initialZoom","center","zoom","MapContainer","withFirebase","props","_useState2","_slicedToArray","useState","data","setData","_useState4","loading","setLoading","continents","name","coordinates","_useState8","visible","setVisible","_useState10","country","setCountry","_useState12","_objectSpread","breakfastByCountry","setBreakfastByCountry","_useState14","setZoom","useEffect","firebase","breakfast","on","snapshot","val","getBreakfastData","handleToggle","handleZoom","contId","target","getAttribute","cont","react_default","a","createElement","react","fallback","handleClose","geoUrl","handleClick","geography","countryName","properties","NAME","Button_ButtonList","map","i","key","action","dataAttr","title","keys","Object","Math","floor","random","length"],"mappings":"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","file":"12.js","sourcesContent":["import styled from \"styled-components\";\n\nconst ButtonList = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding-bottom: 1rem;\n`;\n\nexport default ButtonList;\n","import React, { useState, useEffect, Suspense } from \"react\";\nconst Button = React.lazy(() => import(\"../../utils/Button\"));\nconst Map = React.lazy(() => import(\"../Map\"));\nconst MainSection = React.lazy(() => import(\"../MainSection\"));\nconst BreakfastModal = React.lazy(() => import(\"../BreakfastModal/BreakfastModal\"));\nimport { withFirebase } from \"../Firebase/context\";\nimport ButtonList from \"../../utils/Button/ButtonList\";\nimport geoUrl from \"../../utils/world-50m-simplified.json\"\n\n\nconst initialState = {\n  breakfastName: \"\",\n  description: \"\",\n  img: \"\",\n  attr: \"\",\n  alt: \"\",\n  info:\n    \"Sorry. This content is not yet available. Try a different or random country.\"\n};\n\nconst initialZoom = {\n  center: [0, 20],\n  zoom: 1\n};\n\nconst MapContainerBase = props => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [continents] = useState([\n    { name: \"Asia\", coordinates: [103.8198, 15.3521] },\n    { name: \"Africa\", coordinates: [3.3792, 6.5244] },\n    { name: \"Australia\", coordinates: [151.2093, -33.8688] },\n    { name: \"Europe\", coordinates: [8.5417, 52.3769] },\n    { name: \"North America\", coordinates: [-122.4194, 37.7749] },\n    { name: \"South America\", coordinates: [-58.3816, -18.6037] }\n  ]);\n  const [visible, setVisible] = useState(false);\n  const [country, setCountry] = useState(\"\");\n  const [breakfastByCountry, setBreakfastByCountry] = useState({\n    ...initialState\n  });\n  const [zoom, setZoom] = useState({ ...initialZoom });\n\n  useEffect(() => {\n    props.firebase.breakfast().on(\"value\", snapshot => {\n      setLoading(true);\n      setData(snapshot.val());\n      setLoading(false);\n    });\n  }, [props.firebase]);\n\n  const getBreakfastData = (country) => {\n    setBreakfastByCountry(data[country]);\n  };\n\n  const handleToggle = () => {\n    setVisible(!visible);\n  };\n\n  const handleZoom = e => {\n    const contId = e.target.getAttribute(\"data-attr\");\n    const cont = continents[contId];\n    if (cont.name === \"Europe\") {\n      setZoom({\n        center: cont.coordinates,\n        zoom: 3.5\n      });\n    } else {\n      setZoom({\n        center: cont.coordinates,\n        zoom: 2\n      });\n    }\n  };\n\n  const handleReset = () => {\n    setZoom({ ...initialZoom });\n  };\n\n  const handleClick = geography => {\n    const countryName = geography.properties.NAME;\n    setCountry(countryName);\n    getBreakfastData(countryName);\n    handleToggle();\n  };\n\n  const handleClose = () => {\n    handleToggle();\n    setBreakfastByCountry({ ...initialState });\n    setCountry(\"\");\n  };\n\n  const handleRandom = () => {\n    const keys = data && Object.keys(data);\n    const countryName =  keys &&\n      keys[Math.floor(Math.random() * keys.length)];\n    setCountry(countryName);\n    getBreakfastData(countryName);\n    handleToggle();\n  };\n\n  return (\n    <MainSection>\n      <Suspense fallback={<div />}>\n      <BreakfastModal\n        breakfastByCountry={breakfastByCountry}\n        visible={visible}\n        handleClose={handleClose}\n        country={country}\n      />\n      </Suspense>\n        <Map\n        data={data}\n        center={zoom.center}\n        geoUrl={geoUrl}\n        zoom={zoom.zoom}\n        handleClick={handleClick}\n        loading={loading}\n      />\n      <Suspense fallback={<div />}>\n      <ButtonList>\n        {continents.map((cont, i) => (\n          <Button\n            key={cont.name}\n            action={handleZoom}\n            dataAttr={i}\n            title={cont.name}\n          />\n        ))}\n        <Button action={handleReset} title=\"Reset\" />\n        <Button action={handleRandom} title=\"Random\" />\n      </ButtonList>\n      </Suspense>\n    </MainSection>\n  );\n};\n\nconst MapContainer = withFirebase(MapContainerBase);\n\nexport default MapContainer;\n"],"sourceRoot":""}