{"map":"{\"version\":3,\"sources\":[\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/adder.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/math.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/noop.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/stream.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/area.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/cartesian.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/bounds.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/centroid.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/constant.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/compose.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/rotation.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/circle.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/clip/buffer.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/clip/line.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/pointEqual.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/clip/polygon.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/clip/extent.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/length.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/polygonContains.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/distance.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/contains.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/graticule.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/interpolate.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/path/area.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/identity.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/path/bounds.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/path/centroid.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/path/context.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/path/measure.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/path/string.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/path/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/clip/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/clip/antimeridian.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/clip/circle.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/transform.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/fit.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/resample.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/conic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/conicEqualArea.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/cylindricalEqualArea.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/albers.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/albersUsa.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/azimuthal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/azimuthalEqualArea.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/azimuthalEquidistant.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/mercator.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/conicConformal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/equirectangular.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/conicEquidistant.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/gnomonic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/identity.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/orthographic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/stereographic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/src/projection/transverseMercator.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/ascending.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/bisect.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/bisector.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/cross.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/array.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/range.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/ticks.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/threshold/sturges.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/merge.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-array/src/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/utils.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/projectionConfig.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/ComposableMap.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/projections.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/ZoomableGroup.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/Geographies.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/Geography.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/Marker.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/Markers.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/Annotation.js\",\"/Users/marta/inne/breakfast-app/node_modules/react-simple-maps/lib/Graticule.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/math.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/airy.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/aitoff.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/armadillo.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/august.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/baker.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/berghaus.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/mollweide.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/boggs.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/parallel1.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/sinusoidal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/bonne.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/bottomley.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/bromley.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/chamberlin.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/collignon.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/craig.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/craster.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/cylindricalEqualArea.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/cylindricalStereographic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/eckert1.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/eckert2.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/eckert3.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/eckert4.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/eckert5.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/eckert6.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/eisenlohr.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/fahey.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/foucaut.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/gilbert.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/gingery.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/ginzburgPolyconic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/ginzburg4.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/ginzburg5.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/ginzburg6.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/ginzburg8.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/ginzburg9.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/square.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/gringorten.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/elliptic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/guyou.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/hammer.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/hammerRetroazimuthal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/healpix.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/hill.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/sinuMollweide.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/homolosine.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/interrupted/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/interrupted/boggs.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/interrupted/homolosine.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/interrupted/mollweide.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/interrupted/sinusoidal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/kavrayskiy7.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/lagrange.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/larrivee.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/laskowski.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/littrow.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/loximuthal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/miller.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/modifiedStereographic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/naturalEarth.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/nellHammer.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/patterson.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/polyconic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/polyhedral/matrix.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/polyhedral/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/polyhedral/octahedron.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/polyhedral/butterfly.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/polyhedral/collignon.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/polyhedral/waterman.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/noop.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/project/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/project/clockwise.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/project/contains.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/quincuncial/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/quincuncial/gringorten.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/quincuncial/peirce.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/quantize.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/rectangularPolyconic.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/robinson.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/satellite.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/stitch.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/times.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/twoPoint.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/twoPointAzimuthal.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/twoPointEquidistant.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/vanDerGrinten.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/vanDerGrinten2.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/vanDerGrinten3.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/vanDerGrinten4.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/wagner4.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/wagner6.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/wagner7.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/wiechel.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/src/winkel3.js\",\"/Users/marta/inne/breakfast-app/node_modules/d3-geo-projection/index.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/identity.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/transform.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/bbox.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/reverse.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/feature.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/stitch.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/mesh.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/merge.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/bisect.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/neighbors.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/quantize.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/src/untransform.js\",\"/Users/marta/inne/breakfast-app/node_modules/topojson-client/index.js\"],\"names\":[\"adder\",\"Adder\",\"this\",\"reset\",\"prototype\",\"constructor\",\"s\",\"t\",\"add\",\"y\",\"temp\",\"valueOf\",\"a\",\"b\",\"x\",\"bv\",\"av\",\"epsilon\",\"pi\",\"Math\",\"PI\",\"halfPi\",\"quarterPi\",\"tau\",\"degrees\",\"radians\",\"abs\",\"atan\",\"atan2\",\"cos\",\"ceil\",\"exp\",\"log\",\"floor\",\"pow\",\"sin\",\"math_sign\",\"sign\",\"sqrt\",\"tan\",\"acos\",\"asin\",\"haversin\",\"noop\",\"streamGeometry\",\"geometry\",\"stream\",\"streamGeometryType\",\"hasOwnProperty\",\"type\",\"streamObjectType\",\"Feature\",\"object\",\"FeatureCollection\",\"features\",\"i\",\"n\",\"length\",\"Sphere\",\"sphere\",\"Point\",\"coordinates\",\"point\",\"MultiPoint\",\"LineString\",\"streamLine\",\"MultiLineString\",\"Polygon\",\"streamPolygon\",\"MultiPolygon\",\"GeometryCollection\",\"geometries\",\"closed\",\"coordinate\",\"lineStart\",\"lineEnd\",\"polygonStart\",\"polygonEnd\",\"area_lambda00\",\"phi00\",\"area_lambda0\",\"area_cosPhi0\",\"area_sinPhi0\",\"src_stream\",\"areaRingSum\",\"areaSum\",\"areaStream\",\"areaRingStart\",\"areaRingEnd\",\"areaRing\",\"areaPointFirst\",\"areaPoint\",\"lambda\",\"phi\",\"dLambda\",\"sdLambda\",\"adLambda\",\"cosPhi\",\"sinPhi\",\"k\",\"u\",\"v\",\"src_area\",\"cartesian_spherical\",\"cartesian\",\"cartesian_cartesian\",\"spherical\",\"cartesianDot\",\"cartesianCross\",\"cartesianAddInPlace\",\"cartesianScale\",\"vector\",\"cartesianNormalizeInPlace\",\"d\",\"l\",\"bounds_lambda0\",\"bounds_phi0\",\"bounds_lambda1\",\"bounds_phi1\",\"bounds_lambda2\",\"bounds_lambda00\",\"bounds_phi00\",\"bounds_p0\",\"ranges\",\"range\",\"deltaSum\",\"boundsStream\",\"boundsPoint\",\"boundsLineStart\",\"boundsLineEnd\",\"boundsRingPoint\",\"boundsRingStart\",\"boundsRingEnd\",\"push\",\"bounds_linePoint\",\"p\",\"normal\",\"inflection\",\"phii\",\"delta\",\"lambdai\",\"antimeridian\",\"bounds_angle\",\"lambda0\",\"lambda1\",\"rangeCompare\",\"rangeContains\",\"W0\",\"W1\",\"centroid_X0\",\"centroid_Y0\",\"Z0\",\"centroid_X1\",\"centroid_Y1\",\"Z1\",\"X2\",\"Y2\",\"Z2\",\"centroid_lambda00\",\"centroid_phi00\",\"centroid_x0\",\"centroid_y0\",\"z0\",\"bounds\",\"feature\",\"merged\",\"deltaMax\",\"Infinity\",\"sort\",\"NaN\",\"centroidStream\",\"centroidPoint\",\"centroidLineStart\",\"centroidLineEnd\",\"centroidRingStart\",\"centroidRingEnd\",\"centroidPointCartesian\",\"z\",\"centroidLinePointFirst\",\"centroidLinePoint\",\"w\",\"centroidRingPointFirst\",\"centroidRingPoint\",\"cx\",\"cy\",\"cz\",\"m\",\"centroid\",\"constant\",\"compose\",\"invert\",\"rotationIdentity\",\"rotateRadians\",\"deltaLambda\",\"deltaPhi\",\"deltaGamma\",\"rotationLambda\",\"rotationPhiGamma\",\"forwardRotationLambda\",\"rotation\",\"cosDeltaPhi\",\"sinDeltaPhi\",\"cosDeltaGamma\",\"sinDeltaGamma\",\"src_rotation\",\"rotate\",\"forward\",\"circleStream\",\"radius\",\"direction\",\"t0\",\"t1\",\"cosRadius\",\"sinRadius\",\"step\",\"circleRadius\",\"src_circle\",\"ring\",\"center\",\"precision\",\"circle\",\"c\",\"apply\",\"arguments\",\"r\",\"_\",\"buffer\",\"line\",\"lines\",\"rejoin\",\"pop\",\"concat\",\"shift\",\"result\",\"clip_line\",\"x0\",\"y0\",\"x1\",\"y1\",\"ax\",\"ay\",\"dx\",\"dy\",\"pointEqual\",\"Intersection\",\"points\",\"other\",\"entry\",\"o\",\"e\",\"clip_polygon\",\"segments\",\"compareIntersection\",\"startInside\",\"interpolate\",\"subject\",\"clip\",\"forEach\",\"segment\",\"p0\",\"p1\",\"polygon_link\",\"start\",\"current\",\"isSubject\",\"array\",\"clipMax\",\"clipMin\",\"extent_clipExtent\",\"visible\",\"from\",\"to\",\"a1\",\"corner\",\"comparePoint\",\"ca\",\"cb\",\"polygon\",\"x__\",\"y__\",\"v__\",\"x_\",\"y_\",\"v_\",\"first\",\"clean\",\"activeStream\",\"bufferStream\",\"clipStream\",\"linePoint\",\"winding\",\"a0\",\"j\",\"b0\",\"b1\",\"polygonInside\",\"cleanInside\",\"Object\",\"src\",\"max\",\"min\",\"length_lambda0\",\"length_sinPhi0\",\"length_cosPhi0\",\"clip_extent\",\"cache\",\"cacheStream\",\"extent\",\"sum\",\"polygonContains\",\"angle\",\"point0\",\"phi0\",\"sinPhi0\",\"cosPhi0\",\"sinPhi1\",\"cosPhi1\",\"point1\",\"phi1\",\"absDelta\",\"arc\",\"intersection\",\"phiArc\",\"lengthSum\",\"lengthStream\",\"lengthPointFirst\",\"lengthLineEnd\",\"lengthPoint\",\"cosDelta\",\"src_length\",\"distance_coordinates\",\"distance_object\",\"distance\",\"containsObjectType\",\"containsGeometry\",\"containsGeometryType\",\"containsPoint\",\"containsLine\",\"containsPolygon\",\"ab\",\"map\",\"ringRadians\",\"pointRadians\",\"contains\",\"graticuleX\",\"graticuleY\",\"graticule_graticule\",\"X1\",\"X0\",\"Y1\",\"Y0\",\"X\",\"Y\",\"DX\",\"DY\",\"graticule\",\"filter\",\"outline\",\"slice\",\"reverse\",\"extentMajor\",\"extentMinor\",\"stepMajor\",\"stepMinor\",\"graticule10\",\"area_x00\",\"area_y00\",\"area_x0\",\"area_y0\",\"src_interpolate\",\"cy0\",\"sy0\",\"cy1\",\"sy1\",\"kx0\",\"ky0\",\"kx1\",\"ky1\",\"B\",\"A\",\"identity\",\"area_areaSum\",\"area_areaRingSum\",\"area_areaStream\",\"area_areaRingStart\",\"area_areaRingEnd\",\"area\",\"area_areaPointFirst\",\"area_areaPoint\",\"path_area\",\"bounds_x0\",\"bounds_y0\",\"bounds_x1\",\"bounds_y1\",\"centroid_x00\",\"centroid_y00\",\"path_centroid_x0\",\"path_centroid_y0\",\"path_bounds\",\"path_centroid_X0\",\"path_centroid_Y0\",\"centroid_Z0\",\"path_centroid_X1\",\"path_centroid_Y1\",\"centroid_Z1\",\"centroid_X2\",\"centroid_Y2\",\"centroid_Z2\",\"centroid_centroidStream\",\"centroid_centroidPoint\",\"centroid_centroidLineStart\",\"centroid_centroidLineEnd\",\"centroid_centroidRingStart\",\"centroid_centroidRingEnd\",\"centroidPointFirstLine\",\"centroidPointLine\",\"centroidPointFirstRing\",\"centroidPointRing\",\"path_centroid\",\"PathContext\",\"context\",\"_context\",\"_radius\",\"pointRadius\",\"_line\",\"_point\",\"closePath\",\"moveTo\",\"lineTo\",\"lengthRing\",\"measure_x00\",\"measure_y00\",\"measure_x0\",\"measure_y0\",\"measure_lengthSum\",\"measure_lengthStream\",\"measure_lengthPointFirst\",\"measure_lengthPoint\",\"measure\",\"PathString\",\"_string\",\"string_circle\",\"_circle\",\"join\",\"src_path\",\"projection\",\"projectionStream\",\"contextStream\",\"path\",\"src_clip\",\"pointVisible\",\"clipLine\",\"sink\",\"rotatedStart\",\"ringBuffer\",\"ringSink\",\"polygonStarted\",\"pointRing\",\"ringStart\",\"ringEnd\",\"clip_compareIntersection\",\"pointLine\",\"ringSegments\",\"validSegment\",\"clip_antimeridian\",\"sign0\",\"sign1\",\"sinLambda0Lambda1\",\"clipAntimeridianIntersect\",\"clip_circle\",\"cr\",\"smallRadius\",\"notHemisphere\",\"intersect\",\"two\",\"n1\",\"n2\",\"n2n2\",\"n1n2\",\"determinant\",\"c1\",\"c2\",\"n1xn2\",\"uu\",\"t2\",\"q\",\"polar\",\"q1\",\"code\",\"c0\",\"v0\",\"v00\",\"point2\",\"src_transform\",\"methods\",\"transformer\",\"TransformStream\",\"key\",\"fitExtent\",\"h\",\"clipExtent\",\"scale\",\"translate\",\"fitSize\",\"size\",\"maxDepth\",\"cosMinDistance\",\"resample\",\"project\",\"delta2\",\"resampleLineTo\",\"depth\",\"d2\",\"phi2\",\"lambda2\",\"x2\",\"y2\",\"dx2\",\"dy2\",\"dz\",\"lambda00\",\"x00\",\"y00\",\"a00\",\"b00\",\"c00\",\"resampleStream\",\"ringPoint\",\"resample_resample\",\"resampleNone\",\"transformRadians\",\"projection_projection\",\"projectionMutator\",\"projectAt\",\"projectRotate\",\"theta\",\"preclip\",\"postclip\",\"projectResample\",\"projectTransform\",\"recenter\",\"clipAngle\",\"conicProjection\",\"parallels\",\"conicEqualAreaRaw\",\"cylindricalEqualAreaRaw\",\"r0\",\"r0y\",\"conicEqualArea\",\"albers\",\"projection_albersUsa\",\"lower48Point\",\"alaskaPoint\",\"hawaiiPoint\",\"lower48\",\"alaska\",\"hawaii\",\"pointStream\",\"albersUsa\",\"streams\",\"azimuthalRaw\",\"azimuthalInvert\",\"sc\",\"cc\",\"azimuthalEqualAreaRaw\",\"cxcy\",\"azimuthalEqualArea\",\"azimuthalEquidistantRaw\",\"azimuthalEquidistant\",\"mercatorRaw\",\"mercator\",\"mercatorProjection\",\"reclip\",\"tany\",\"conicConformalRaw\",\"f\",\"fy\",\"conicConformal\",\"equirectangularRaw\",\"equirectangular\",\"conicEquidistantRaw\",\"g\",\"gy\",\"nx\",\"conicEquidistant\",\"gnomonicRaw\",\"gnomonic\",\"scaleTranslate\",\"kx\",\"ky\",\"tx\",\"ty\",\"projection_identity\",\"sx\",\"sy\",\"transform\",\"reflectX\",\"reflectY\",\"orthographicRaw\",\"orthographic\",\"stereographicRaw\",\"stereographic\",\"transverseMercatorRaw\",\"transverseMercator\",\"__webpack_require__\",\"__webpack_exports__\",\"ascending\",\"compare\",\"array_array\",\"Array\",\"stop\",\"merge\",\"arrays\",\"defineProperty\",\"exports\",\"value\",\"replaceStrokeWidth\",\"styles\",\"newStyles\",\"keys\",\"createChoroplethStyles\",\"choroplethValue\",\"calculateResizeFactor\",\"actualDimension\",\"baseDimension\",\"calculateMousePosition\",\"props\",\"zoom\",\"resizeFactor\",\"undefined\",\"width\",\"height\",\"reference\",\"reverseRotation\",\"item\",\"isChildOfType\",\"createNewChildren\",\"children\",\"child\",\"_react2\",\"default\",\"cloneElement\",\"roundPath\",\"replace\",\"round\",\"createConnectorPath\",\"connectorType\",\"endPoint\",\"createTextAnchor\",\"obj\",\"_react\",\"__esModule\",\"expectedType\",\"componentIdentifier\",\"xOffset\",\"yOffset\",\"_ComposableMap\",\"enumerable\",\"get\",\"_interopRequireDefault\",\"_ZoomableGroup\",\"_Geographies\",\"_Geography\",\"_Marker\",\"_Markers\",\"_Annotation\",\"_Graticule\",\"_createClass\",\"defineProperties\",\"target\",\"descriptor\",\"configurable\",\"writable\",\"Constructor\",\"protoProps\",\"staticProps\",\"_projections2\",\"_projectionConfig2\",\"ComposableMap\",\"_Component\",\"instance\",\"TypeError\",\"_classCallCheck\",\"_this\",\"self\",\"call\",\"ReferenceError\",\"_possibleConstructorReturn\",\"__proto__\",\"getPrototypeOf\",\"bind\",\"subClass\",\"superClass\",\"create\",\"setPrototypeOf\",\"_inherits\",\"Component\",\"_props\",\"projectionConfig\",\"_props2\",\"style\",\"showCenter\",\"createElement\",\"viewBox\",\"className\",\"fill\",\"defaultProps\",\"config\",\"projectionName\",\"projectionReference\",\"_d3GeoProjection\",\"_d3Geo\",\"_projectionConfig\",\"geoMercator\",\"miller\",\"geoMiller\",\"times\",\"geoTimes\",\"robinson\",\"geoRobinson\",\"winkel3\",\"geoWinkel3\",\"eckert4\",\"geoEckert4\",\"_utils\",\"ZoomableGroup\",\"backdropX\",\"backdrop\",\"backdropY\",\"backdropWidth\",\"backdropHeight\",\"state\",\"mouseX\",\"mouseY\",\"mouseXStart\",\"mouseYStart\",\"isPressed\",\"resizeFactorX\",\"resizeFactorY\",\"handleMouseMove\",\"handleMouseUp\",\"handleMouseDown\",\"handleResize\",\"_ref\",\"pageX\",\"pageY\",\"disablePanning\",\"setState\",\"_ref2\",\"nextProps\",\"_state\",\"zoomFactor\",\"centerChanged\",\"JSON\",\"stringify\",\"zoomableGroupNode\",\"parentNode\",\"getBoundingClientRect\",\"xPercentageChange\",\"yPercentageChange\",\"_props3\",\"window\",\"addEventListener\",\"removeEventListener\",\"_this2\",\"_props4\",\"_state2\",\"ref\",\"onMouseMove\",\"onMouseUp\",\"onMouseDown\",\"strokeWidth\",\"_topojsonClient\",\"Geographies\",\"geographyPaths\",\"fetchGeographies\",\"geographyUrl\",\"request\",\"XMLHttpRequest\",\"open\",\"onload\",\"status\",\"parse\",\"responseText\",\"objects\",\"onGeographiesLoaded\",\"onGeographyPathsLoaded\",\"String\",\"onerror\",\"console\",\"send\",\"nextState\",\"geoPathsChanged\",\"choroplethChanged\",\"choropleth\",\"disableOptimization\",\"_extends\",\"assign\",\"source\",\"pathCache\",\"Geography\",\"hover\",\"pressed\",\"handleMouseEnter\",\"handleMouseLeave\",\"handleMouseClick\",\"handleFocus\",\"handleBlur\",\"evt\",\"persist\",\"onClick\",\"geography\",\"onMouseEnter\",\"onMouseLeave\",\"_props5\",\"_props6\",\"_props7\",\"onFocus\",\"_props8\",\"onBlur\",\"_props9\",\"cacheId\",\"tabable\",\"pathString\",\"geoPath\",\"renderPath\",\"excludeProps\",\"restProps\",\"indexOf\",\"reduce\",\"tabIndex\",\"Marker\",\"marker\",\"Markers\",\"Annotation\",\"stroke\",\"connectorPath\",\"textAnchor\",\"computeGraticule\",\"geoGraticule\",\"computeOutline\",\"Graticule\",\"renderGraticule\",\"graticulePath\",\"outlinePath\",\"pointerEvents\",\"math_epsilon\",\"epsilon2\",\"sqrt1_2\",\"SQRT1_2\",\"sqrt2\",\"sqrtPi\",\"sinh\",\"cosh\",\"airyRaw\",\"beta\",\"tanBeta_2\",\"cosx\",\"cosy\",\"siny\",\"cosz\",\"z_2\",\"cosz_2\",\"sinz_2\",\"tanz_2\",\"lnsecz_2\",\"sinz\",\"airy\",\"d3_geo\",\"aitoffRaw\",\"sincia\",\"sinci\",\"sinx\",\"sinx_2\",\"cosx_2\",\"sin_2y\",\"sin2y\",\"cos2y\",\"sin2x_2\",\"fx\",\"dxdx\",\"dxdy\",\"dydx\",\"dydy\",\"aitoff\",\"armadilloRaw\",\"sPhi0\",\"tanPhi0\",\"cosLambda\",\"sinLambda\",\"dxdLambda\",\"dxdPhi\",\"dydLambda\",\"dydPhi\",\"denominator\",\"dPhi\",\"armadillo\",\"stream_\",\"parallel\",\"rotateStream\",\"sphereStream\",\"augustRaw\",\"tanPhi\",\"sin3Eta\",\"eta\",\"xi\",\"arcosh\",\"arsinh\",\"cosEta\",\"coshXi\",\"august\",\"sqrt8\",\"baker_phi0\",\"bakerRaw\",\"cosPhi_2\",\"tanPhi_2\",\"baker\",\"berghausRaw\",\"lobes\",\"theta0\",\"α\",\"cotα\",\"berghaus\",\"sr\",\"delta0\",\"mollweideBromleyTheta\",\"cp\",\"cpsinPhi\",\"mollweideBromleyRaw\",\"mollweideRaw\",\"mollweide\",\"boggs_k\",\"boggs_w\",\"boggsRaw\",\"boggs\",\"parallel1\",\"sinusoidalRaw\",\"sinusoidal\",\"bonneRaw\",\"cotPhi0\",\"rho\",\"bonne\",\"bottomleyRaw\",\"sinPsi\",\"bottomley\",\"fraction\",\"bromleyRaw\",\"bromley\",\"chamberlin_distance\",\"s1\",\"s2\",\"cosdLambda\",\"sindPhi\",\"sindLambda\",\"longitude\",\"chamberlinRaw\",\"p2\",\"beta0\",\"beta1\",\"beta2\",\"mean\",\"chamberlinAfrica\",\"chamberlin\",\"R\",\"collignonRaw\",\"alpha\",\"collignon\",\"craigRaw\",\"cosλ\",\"craig\",\"sqrt3\",\"crasterRaw\",\"craster\",\"cylindricalEqualArea\",\"cylindricalStereographicRaw\",\"cylindricalStereographic\",\"eckert1Raw\",\"eckert1\",\"eckert2Raw\",\"eckert2\",\"eckert3Raw\",\"eckert3\",\"eckert4Raw\",\"eckert5Raw\",\"eckert5\",\"eckert6Raw\",\"eckert6\",\"eisenlohrK\",\"eisenlohrRaw\",\"s0\",\"_0\",\"_1\",\"cos1\",\"v2\",\"vm1v\",\"vp1v\",\"deltatDeltaLambda\",\"deltatDeltaPhi\",\"deltacDeltat\",\"deltacDeltaLambda\",\"deltacDeltaPhi\",\"deltavDeltaLambda\",\"deltavDeltaPhi\",\"deltaxDeltaLambda\",\"deltaxDeltaPhi\",\"deltayDeltaLambda\",\"deltayDeltaPhi\",\"eisenlohr\",\"faheyK\",\"faheyRaw\",\"fahey\",\"foucautRaw\",\"cosk\",\"foucaut\",\"gilbertForward\",\"gilbertInvert\",\"src_gilbert\",\"projectionType\",\"gilbert\",\"property\",\"name\",\"gingeryRaw\",\"rho2\",\"r2\",\"rhoCosAlpha\",\"k_\",\"s_\",\"gingeryLength\",\"gingeryIntegrate\",\"dTheta\",\"x_halfPi\",\"rhosinAlpha\",\"sinRhoCosAlpha\",\"halfPi_RhoCosAlpha\",\"gingery\",\"cRho\",\"sRho\",\"ginzburgPolyconic\",\"xB\",\"yB\",\"m2\",\"dAlphadLambda\",\"xB2\",\"dxBdPhi\",\"dyBdPhi\",\"dmdPhi\",\"cosAlpha\",\"sinAlpha\",\"mcosAlpha\",\"msinAlpha\",\"dAlphadPhi\",\"ginzburg4Raw\",\"ginzburg4\",\"ginzburg5Raw\",\"ginzburg5\",\"ginzburg6Raw\",\"ginzburg6\",\"ginzburg8Raw\",\"lambda4\",\"ginzburg8\",\"ginzburg9Raw\",\"ginzburg9\",\"square\",\"projectSquare\",\"location\",\"gringortenRaw\",\"sLambda\",\"sPhi\",\"a2\",\"secPhi\",\"drdPhi\",\"dp2dPhi\",\"mu\",\"nu\",\"zeta\",\"g2\",\"zetaMug\",\"f2\",\"df\",\"gringortenHexadecant\",\"gringortenHexadecantInvert\",\"gringorten\",\"ellipticJ\",\"ai\",\"twon\",\"ellipticF\",\"guyouRaw\",\"K\",\"psi\",\"at\",\"y_1\",\"guyouComplexAtan\",\"sinhPsi\",\"cscPhi\",\"cotPhi2\",\"cotLambda2\",\"ellipticFi\",\"tn\",\"guyouComplexDivide\",\"guyou\",\"hammerRaw\",\"hammerQuarticAuthalicRaw\",\"hammer\",\"coefficient\",\"hammerRetroazimuthalRaw\",\"hammerRetroazimuthalRotation\",\"hammerRetroazimuthal\",\"rotate_\",\"healpixParallel\",\"healpixLambert\",\"healpixRaw\",\"H\",\"dy1\",\"healpix\",\"hillRaw\",\"L\",\"Bt\",\"rho0\",\"K2\",\"L2\",\"omega\",\"sinTheta\",\"cosTheta\",\"Bt_Bt1\",\"C\",\"hill\",\"ratio\",\"sinuMollweidePhi\",\"sinuMollweideY\",\"sinuMollweideRaw\",\"sinuMollweide\",\"homolosineRaw\",\"homolosine\",\"interpolateLine\",\"resampled\",\"interrupted\",\"lobe\",\"interpolateSphere\",\"bound\",\"boggs_lobes\",\"interrupted_boggs\",\"homolosine_lobes\",\"interrupted_homolosine\",\"mollweide_lobes\",\"interrupted_mollweide\",\"mollweideHemispheres_lobes\",\"mollweideHemispheres\",\"sinuMollweide_lobes\",\"interrupted_sinuMollweide\",\"sinusoidal_lobes\",\"interrupted_sinusoidal\",\"kavrayskiy7Raw\",\"kavrayskiy7\",\"lagrangeRaw\",\"lagrange\",\"spacing\",\"pi_sqrt2\",\"larriveeRaw\",\"sqrtcosPhi\",\"sinPhi_2\",\"sinLambda_6\",\"cosLambda_6\",\"f0\",\"f1\",\"df0dPhi\",\"df0dLambda\",\"df1dPhi\",\"df1dLambda\",\"denom\",\"larrivee\",\"laskowskiRaw\",\"lambdaPhi\",\"laskowski\",\"littrowRaw\",\"y2_1\",\"littrow\",\"loximuthalRaw\",\"loximuthal\",\"millerRaw\",\"modifiedStereographicRaw\",\"zr\",\"zi\",\"ar\",\"br\",\"bi\",\"deltar\",\"deltai\",\"sinc\",\"gs48\",\"gs50\",\"modifiedStereographic_miller\",\"lee\",\"modifiedStereographicAlaska\",\"modifiedStereographic\",\"modifiedStereographicGs48\",\"modifiedStereographicGs50\",\"modifiedStereographicMiller\",\"modifiedStereographicLee\",\"coefficients\",\"sqrt6\",\"sqrt7\",\"mtFlatPolarParabolicRaw\",\"mtFlatPolarParabolic\",\"mtFlatPolarQuarticRaw\",\"sinTheta_2\",\"mtFlatPolarQuartic\",\"mtFlatPolarSinusoidalRaw\",\"mtFlatPolarSinusoidal\",\"naturalEarthRaw\",\"phi4\",\"naturalEarth\",\"nellHammerRaw\",\"nellHammer\",\"pattersonK1\",\"pattersonK2\",\"pattersonK3\",\"pattersonK4\",\"pattersonC1\",\"pattersonC2\",\"pattersonC3\",\"pattersonC4\",\"pattersonRaw\",\"yc\",\"patterson\",\"polyconicRaw\",\"polyconic\",\"matrix\",\"subtract\",\"matrix_angle\",\"matrix_length\",\"multiply\",\"polyhedral\",\"root\",\"face\",\"node\",\"recurse\",\"parent\",\"edges\",\"faceEdges\",\"shared\",\"found\",\"sharedEdge\",\"polyhedral_pointEqual\",\"hasInverse\",\"faceInvert\",\"faceDegrees\",\"proj\",\"edge\",\"multiPoint\",\"notPoles\",\"inside\",\"isArray\",\"some\",\"octahedron\",\"polyhedral_octahedron\",\"butterfly\",\"faceProjection\",\"faces\",\"collignonK\",\"polyhedral_collignon\",\"waterman\",\"w5\",\"xyz\",\"waterman_cartesian\",\"hexagon\",\"cornerNormals\",\"parents\",\"normals\",\"cosphi\",\"dot\",\"src_project\",\"Error\",\"projectFeature\",\"projectFeatureCollection\",\"projectGeometry\",\"id\",\"properties\",\"projectGeometryCollection\",\"sinkPoint\",\"sinkLine\",\"sinkPolygon\",\"project_points\",\"polygons\",\"holes\",\"clockwise\",\"hole\",\"yi\",\"pj\",\"xj\",\"yj\",\"quincuncial\",\"projectQuincuncial\",\"quincuncial_gringorten\",\"peirce\",\"quantize\",\"digits\",\"quantizePoint\",\"toFixed\",\"quantizePoints\",\"quantizePolygon\",\"quantizeGeometry\",\"quantizeFeature\",\"rectangularPolyconicRaw\",\"E\",\"cotPhi\",\"rectangularPolyconic\",\"robinson_K\",\"robinsonRaw\",\"i0\",\"di\",\"bx\",\"by\",\"yy\",\"satelliteRaw\",\"P\",\"vertical\",\"satelliteVerticalRaw\",\"cosOmega\",\"sinOmega\",\"satellite\",\"tilt\",\"epsilonInverse\",\"stitch_x0\",\"x0e\",\"stitch_x1\",\"x1e\",\"stitch_y0\",\"y0e\",\"stitch_y1\",\"y1e\",\"normalizePoint\",\"clampPoint\",\"clampPoints\",\"extractFragments\",\"fragments\",\"pointk\",\"xk\",\"yk\",\"fragmentBefore\",\"stitchFeature\",\"stitchGeometry\",\"fragment\",\"startFragment\",\"end\",\"endFragment\",\"fragmentByStart\",\"fragmentByEnd\",\"index\",\"stitchFragments\",\"stitch\",\"timesRaw\",\"twoPoint\",\"raw\",\"twoPointAzimuthalRaw\",\"cosd\",\"twoPointAzimuthalUsa\",\"twoPointAzimuthal\",\"twoPointEquidistantRaw\",\"lambdaa\",\"lambdab\",\"z02\",\"tanLambda0\",\"S\",\"za\",\"zb\",\"cosza\",\"coszb\",\"twoPointEquidistantUsa\",\"twoPointEquidistant\",\"vanDerGrintenRaw\",\"A2\",\"G\",\"P2\",\"P2_A2\",\"G_P2\",\"Q\",\"x2_y2\",\"c3\",\"m1\",\"theta1\",\"vanDerGrinten\",\"vanDerGrinten2Raw\",\"vanDerGrinten2\",\"vanDerGrinten3Raw\",\"vanDerGrinten3\",\"vanDerGrinten4Raw\",\"B2\",\"C2\",\"BC\",\"B_C2\",\"B_3C\",\"D\",\"D2\",\"C_\",\"B_C\",\"F_\",\"sqrtF\",\"vanDerGrinten4\",\"wagner4_A\",\"wagner4_B\",\"wagner4Raw\",\"wagner4\",\"wagner6Raw\",\"wagner6\",\"wagner7Raw\",\"wagner7\",\"wiechelRaw\",\"sin1_Phi\",\"wiechel\",\"winkel3Raw\",\"F\",\"sinphi\",\"sin_2phi\",\"sin2phi\",\"cos2phi\",\"sinlambda\",\"coslambda_2\",\"sinlambda_2\",\"sin2lambda_2\",\"dxdlambda\",\"dxdphi\",\"dydlambda\",\"dydphi\",\"dlambda\",\"dphi\",\"topology\",\"src_bbox\",\"bbox\",\"bboxPoint\",\"bboxGeometry\",\"arcs\",\"feature_feature\",\"feature_object\",\"transformPoint\",\"stitchedArcs\",\"emptyIndex\",\"flush\",\"dp\",\"ends\",\"fg\",\"unshift\",\"gf\",\"mesh\",\"meshArcs\",\"geom\",\"geomsByArc\",\"extract0\",\"extract1\",\"extract2\",\"extract3\",\"geoms\",\"extractArcs\",\"mergeArcs\",\"polygonsByArc\",\"groups\",\"extract\",\"planarRingArea\",\"group\",\"neighbors\",\"ki\",\"bisect\",\"lo\",\"hi\",\"mid\",\"src_neighbors\",\"indexesByArc\",\"geometryType\",\"indexes\",\"ij\",\"ik\",\"splice\",\"bb\",\"untransform\"],\"mappings\":\"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\",\"sourcesContent\":[\"// Adds floating point numbers with twice the normal precision.\\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\\n// 305–363 (1997).\\n// Code adapted from GeographicLib by Charles F. F. Karney,\\n// http://geographiclib.sourceforge.net/\\n\\nexport default function() {\\n  return new Adder;\\n}\\n\\nfunction Adder() {\\n  this.reset();\\n}\\n\\nAdder.prototype = {\\n  constructor: Adder,\\n  reset: function() {\\n    this.s = // rounded value\\n    this.t = 0; // exact error\\n  },\\n  add: function(y) {\\n    add(temp, y, this.t);\\n    add(this, temp.s, this.s);\\n    if (this.s) this.t += temp.t;\\n    else this.s = temp.t;\\n  },\\n  valueOf: function() {\\n    return this.s;\\n  }\\n};\\n\\nvar temp = new Adder;\\n\\nfunction add(adder, a, b) {\\n  var x = adder.s = a + b,\\n      bv = x - a,\\n      av = x - bv;\\n  adder.t = (a - av) + (b - bv);\\n}\\n\",\"export var epsilon = 1e-6;\\nexport var epsilon2 = 1e-12;\\nexport var pi = Math.PI;\\nexport var halfPi = pi / 2;\\nexport var quarterPi = pi / 4;\\nexport var tau = pi * 2;\\n\\nexport var degrees = 180 / pi;\\nexport var radians = pi / 180;\\n\\nexport var abs = Math.abs;\\nexport var atan = Math.atan;\\nexport var atan2 = Math.atan2;\\nexport var cos = Math.cos;\\nexport var ceil = Math.ceil;\\nexport var exp = Math.exp;\\nexport var floor = Math.floor;\\nexport var log = Math.log;\\nexport var pow = Math.pow;\\nexport var sin = Math.sin;\\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\\nexport var sqrt = Math.sqrt;\\nexport var tan = Math.tan;\\n\\nexport function acos(x) {\\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\\n}\\n\\nexport function asin(x) {\\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\\n}\\n\\nexport function haversin(x) {\\n  return (x = sin(x / 2)) * x;\\n}\\n\",\"export default function noop() {}\\n\",\"function streamGeometry(geometry, stream) {\\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\\n    streamGeometryType[geometry.type](geometry, stream);\\n  }\\n}\\n\\nvar streamObjectType = {\\n  Feature: function(object, stream) {\\n    streamGeometry(object.geometry, stream);\\n  },\\n  FeatureCollection: function(object, stream) {\\n    var features = object.features, i = -1, n = features.length;\\n    while (++i < n) streamGeometry(features[i].geometry, stream);\\n  }\\n};\\n\\nvar streamGeometryType = {\\n  Sphere: function(object, stream) {\\n    stream.sphere();\\n  },\\n  Point: function(object, stream) {\\n    object = object.coordinates;\\n    stream.point(object[0], object[1], object[2]);\\n  },\\n  MultiPoint: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\\n  },\\n  LineString: function(object, stream) {\\n    streamLine(object.coordinates, stream, 0);\\n  },\\n  MultiLineString: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) streamLine(coordinates[i], stream, 0);\\n  },\\n  Polygon: function(object, stream) {\\n    streamPolygon(object.coordinates, stream);\\n  },\\n  MultiPolygon: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) streamPolygon(coordinates[i], stream);\\n  },\\n  GeometryCollection: function(object, stream) {\\n    var geometries = object.geometries, i = -1, n = geometries.length;\\n    while (++i < n) streamGeometry(geometries[i], stream);\\n  }\\n};\\n\\nfunction streamLine(coordinates, stream, closed) {\\n  var i = -1, n = coordinates.length - closed, coordinate;\\n  stream.lineStart();\\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\\n  stream.lineEnd();\\n}\\n\\nfunction streamPolygon(coordinates, stream) {\\n  var i = -1, n = coordinates.length;\\n  stream.polygonStart();\\n  while (++i < n) streamLine(coordinates[i], stream, 1);\\n  stream.polygonEnd();\\n}\\n\\nexport default function(object, stream) {\\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\\n    streamObjectType[object.type](object, stream);\\n  } else {\\n    streamGeometry(object, stream);\\n  }\\n}\\n\",\"import adder from \\\"./adder\\\";\\nimport {atan2, cos, quarterPi, radians, sin, tau} from \\\"./math\\\";\\nimport noop from \\\"./noop\\\";\\nimport stream from \\\"./stream\\\";\\n\\nexport var areaRingSum = adder();\\n\\nvar areaSum = adder(),\\n    lambda00,\\n    phi00,\\n    lambda0,\\n    cosPhi0,\\n    sinPhi0;\\n\\nexport var areaStream = {\\n  point: noop,\\n  lineStart: noop,\\n  lineEnd: noop,\\n  polygonStart: function() {\\n    areaRingSum.reset();\\n    areaStream.lineStart = areaRingStart;\\n    areaStream.lineEnd = areaRingEnd;\\n  },\\n  polygonEnd: function() {\\n    var areaRing = +areaRingSum;\\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\\n    this.lineStart = this.lineEnd = this.point = noop;\\n  },\\n  sphere: function() {\\n    areaSum.add(tau);\\n  }\\n};\\n\\nfunction areaRingStart() {\\n  areaStream.point = areaPointFirst;\\n}\\n\\nfunction areaRingEnd() {\\n  areaPoint(lambda00, phi00);\\n}\\n\\nfunction areaPointFirst(lambda, phi) {\\n  areaStream.point = areaPoint;\\n  lambda00 = lambda, phi00 = phi;\\n  lambda *= radians, phi *= radians;\\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\\n}\\n\\nfunction areaPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\\n\\n  // Spherical excess E for a spherical triangle with vertices: south pole,\\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\\n  var dLambda = lambda - lambda0,\\n      sdLambda = dLambda >= 0 ? 1 : -1,\\n      adLambda = sdLambda * dLambda,\\n      cosPhi = cos(phi),\\n      sinPhi = sin(phi),\\n      k = sinPhi0 * sinPhi,\\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\\n      v = k * sdLambda * sin(adLambda);\\n  areaRingSum.add(atan2(v, u));\\n\\n  // Advance the previous points.\\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\\n}\\n\\nexport default function(object) {\\n  areaSum.reset();\\n  stream(object, areaStream);\\n  return areaSum * 2;\\n}\\n\",\"import {asin, atan2, cos, sin, sqrt} from \\\"./math\\\";\\n\\nexport function spherical(cartesian) {\\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\\n}\\n\\nexport function cartesian(spherical) {\\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\\n}\\n\\nexport function cartesianDot(a, b) {\\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\\n}\\n\\nexport function cartesianCross(a, b) {\\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\\n}\\n\\n// TODO return a\\nexport function cartesianAddInPlace(a, b) {\\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\\n}\\n\\nexport function cartesianScale(vector, k) {\\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\\n}\\n\\n// TODO return d\\nexport function cartesianNormalizeInPlace(d) {\\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\\n  d[0] /= l, d[1] /= l, d[2] /= l;\\n}\\n\",\"import adder from \\\"./adder\\\";\\nimport {areaStream, areaRingSum} from \\\"./area\\\";\\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \\\"./cartesian\\\";\\nimport {abs, degrees, epsilon, radians} from \\\"./math\\\";\\nimport stream from \\\"./stream\\\";\\n\\nvar lambda0, phi0, lambda1, phi1, // bounds\\n    lambda2, // previous lambda-coordinate\\n    lambda00, phi00, // first point\\n    p0, // previous 3D point\\n    deltaSum = adder(),\\n    ranges,\\n    range;\\n\\nvar boundsStream = {\\n  point: boundsPoint,\\n  lineStart: boundsLineStart,\\n  lineEnd: boundsLineEnd,\\n  polygonStart: function() {\\n    boundsStream.point = boundsRingPoint;\\n    boundsStream.lineStart = boundsRingStart;\\n    boundsStream.lineEnd = boundsRingEnd;\\n    deltaSum.reset();\\n    areaStream.polygonStart();\\n  },\\n  polygonEnd: function() {\\n    areaStream.polygonEnd();\\n    boundsStream.point = boundsPoint;\\n    boundsStream.lineStart = boundsLineStart;\\n    boundsStream.lineEnd = boundsLineEnd;\\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\\n    else if (deltaSum > epsilon) phi1 = 90;\\n    else if (deltaSum < -epsilon) phi0 = -90;\\n    range[0] = lambda0, range[1] = lambda1;\\n  }\\n};\\n\\nfunction boundsPoint(lambda, phi) {\\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\\n  if (phi < phi0) phi0 = phi;\\n  if (phi > phi1) phi1 = phi;\\n}\\n\\nfunction linePoint(lambda, phi) {\\n  var p = cartesian([lambda * radians, phi * radians]);\\n  if (p0) {\\n    var normal = cartesianCross(p0, p),\\n        equatorial = [normal[1], -normal[0], 0],\\n        inflection = cartesianCross(equatorial, normal);\\n    cartesianNormalizeInPlace(inflection);\\n    inflection = spherical(inflection);\\n    var delta = lambda - lambda2,\\n        sign = delta > 0 ? 1 : -1,\\n        lambdai = inflection[0] * degrees * sign,\\n        phii,\\n        antimeridian = abs(delta) > 180;\\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\\n      phii = inflection[1] * degrees;\\n      if (phii > phi1) phi1 = phii;\\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\\n      phii = -inflection[1] * degrees;\\n      if (phii < phi0) phi0 = phii;\\n    } else {\\n      if (phi < phi0) phi0 = phi;\\n      if (phi > phi1) phi1 = phi;\\n    }\\n    if (antimeridian) {\\n      if (lambda < lambda2) {\\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\\n      } else {\\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\\n      }\\n    } else {\\n      if (lambda1 >= lambda0) {\\n        if (lambda < lambda0) lambda0 = lambda;\\n        if (lambda > lambda1) lambda1 = lambda;\\n      } else {\\n        if (lambda > lambda2) {\\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\\n        } else {\\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\\n        }\\n      }\\n    }\\n  } else {\\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\\n  }\\n  if (phi < phi0) phi0 = phi;\\n  if (phi > phi1) phi1 = phi;\\n  p0 = p, lambda2 = lambda;\\n}\\n\\nfunction boundsLineStart() {\\n  boundsStream.point = linePoint;\\n}\\n\\nfunction boundsLineEnd() {\\n  range[0] = lambda0, range[1] = lambda1;\\n  boundsStream.point = boundsPoint;\\n  p0 = null;\\n}\\n\\nfunction boundsRingPoint(lambda, phi) {\\n  if (p0) {\\n    var delta = lambda - lambda2;\\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\\n  } else {\\n    lambda00 = lambda, phi00 = phi;\\n  }\\n  areaStream.point(lambda, phi);\\n  linePoint(lambda, phi);\\n}\\n\\nfunction boundsRingStart() {\\n  areaStream.lineStart();\\n}\\n\\nfunction boundsRingEnd() {\\n  boundsRingPoint(lambda00, phi00);\\n  areaStream.lineEnd();\\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\\n  range[0] = lambda0, range[1] = lambda1;\\n  p0 = null;\\n}\\n\\n// Finds the left-right distance between two longitudes.\\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\\n// the distance between ±180° to be 360°.\\nfunction angle(lambda0, lambda1) {\\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\\n}\\n\\nfunction rangeCompare(a, b) {\\n  return a[0] - b[0];\\n}\\n\\nfunction rangeContains(range, x) {\\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\\n}\\n\\nexport default function(feature) {\\n  var i, n, a, b, merged, deltaMax, delta;\\n\\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\\n  ranges = [];\\n  stream(feature, boundsStream);\\n\\n  // First, sort ranges by their minimum longitudes.\\n  if (n = ranges.length) {\\n    ranges.sort(rangeCompare);\\n\\n    // Then, merge any ranges that overlap.\\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\\n      b = ranges[i];\\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\\n      } else {\\n        merged.push(a = b);\\n      }\\n    }\\n\\n    // Finally, find the largest gap between the merged ranges.\\n    // The final bounding box will be the inverse of this gap.\\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\\n      b = merged[i];\\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\\n    }\\n  }\\n\\n  ranges = range = null;\\n\\n  return lambda0 === Infinity || phi0 === Infinity\\n      ? [[NaN, NaN], [NaN, NaN]]\\n      : [[lambda0, phi0], [lambda1, phi1]];\\n}\\n\",\"import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \\\"./math\\\";\\nimport noop from \\\"./noop\\\";\\nimport stream from \\\"./stream\\\";\\n\\nvar W0, W1,\\n    X0, Y0, Z0,\\n    X1, Y1, Z1,\\n    X2, Y2, Z2,\\n    lambda00, phi00, // first point\\n    x0, y0, z0; // previous point\\n\\nvar centroidStream = {\\n  sphere: noop,\\n  point: centroidPoint,\\n  lineStart: centroidLineStart,\\n  lineEnd: centroidLineEnd,\\n  polygonStart: function() {\\n    centroidStream.lineStart = centroidRingStart;\\n    centroidStream.lineEnd = centroidRingEnd;\\n  },\\n  polygonEnd: function() {\\n    centroidStream.lineStart = centroidLineStart;\\n    centroidStream.lineEnd = centroidLineEnd;\\n  }\\n};\\n\\n// Arithmetic mean of Cartesian vectors.\\nfunction centroidPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi);\\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\\n}\\n\\nfunction centroidPointCartesian(x, y, z) {\\n  ++W0;\\n  X0 += (x - X0) / W0;\\n  Y0 += (y - Y0) / W0;\\n  Z0 += (z - Z0) / W0;\\n}\\n\\nfunction centroidLineStart() {\\n  centroidStream.point = centroidLinePointFirst;\\n}\\n\\nfunction centroidLinePointFirst(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi);\\n  x0 = cosPhi * cos(lambda);\\n  y0 = cosPhi * sin(lambda);\\n  z0 = sin(phi);\\n  centroidStream.point = centroidLinePoint;\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nfunction centroidLinePoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi),\\n      x = cosPhi * cos(lambda),\\n      y = cosPhi * sin(lambda),\\n      z = sin(phi),\\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\\n  W1 += w;\\n  X1 += w * (x0 + (x0 = x));\\n  Y1 += w * (y0 + (y0 = y));\\n  Z1 += w * (z0 + (z0 = z));\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nfunction centroidLineEnd() {\\n  centroidStream.point = centroidPoint;\\n}\\n\\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\\n// J. Applied Mechanics 42, 239 (1975).\\nfunction centroidRingStart() {\\n  centroidStream.point = centroidRingPointFirst;\\n}\\n\\nfunction centroidRingEnd() {\\n  centroidRingPoint(lambda00, phi00);\\n  centroidStream.point = centroidPoint;\\n}\\n\\nfunction centroidRingPointFirst(lambda, phi) {\\n  lambda00 = lambda, phi00 = phi;\\n  lambda *= radians, phi *= radians;\\n  centroidStream.point = centroidRingPoint;\\n  var cosPhi = cos(phi);\\n  x0 = cosPhi * cos(lambda);\\n  y0 = cosPhi * sin(lambda);\\n  z0 = sin(phi);\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nfunction centroidRingPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi),\\n      x = cosPhi * cos(lambda),\\n      y = cosPhi * sin(lambda),\\n      z = sin(phi),\\n      cx = y0 * z - z0 * y,\\n      cy = z0 * x - x0 * z,\\n      cz = x0 * y - y0 * x,\\n      m = sqrt(cx * cx + cy * cy + cz * cz),\\n      w = asin(m), // line weight = angle\\n      v = m && -w / m; // area weight multiplier\\n  X2 += v * cx;\\n  Y2 += v * cy;\\n  Z2 += v * cz;\\n  W1 += w;\\n  X1 += w * (x0 + (x0 = x));\\n  Y1 += w * (y0 + (y0 = y));\\n  Z1 += w * (z0 + (z0 = z));\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nexport default function(object) {\\n  W0 = W1 =\\n  X0 = Y0 = Z0 =\\n  X1 = Y1 = Z1 =\\n  X2 = Y2 = Z2 = 0;\\n  stream(object, centroidStream);\\n\\n  var x = X2,\\n      y = Y2,\\n      z = Z2,\\n      m = x * x + y * y + z * z;\\n\\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\\n  if (m < epsilon2) {\\n    x = X1, y = Y1, z = Z1;\\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\\n    m = x * x + y * y + z * z;\\n    // If the feature still has an undefined ccentroid, then return.\\n    if (m < epsilon2) return [NaN, NaN];\\n  }\\n\\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\\n}\\n\",\"export default function(x) {\\n  return function() {\\n    return x;\\n  };\\n}\\n\",\"export default function(a, b) {\\n\\n  function compose(x, y) {\\n    return x = a(x, y), b(x[0], x[1]);\\n  }\\n\\n  if (a.invert && b.invert) compose.invert = function(x, y) {\\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\\n  };\\n\\n  return compose;\\n}\\n\",\"import compose from \\\"./compose\\\";\\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \\\"./math\\\";\\n\\nfunction rotationIdentity(lambda, phi) {\\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\\n}\\n\\nrotationIdentity.invert = rotationIdentity;\\n\\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\\n    : rotationLambda(deltaLambda))\\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\\n    : rotationIdentity);\\n}\\n\\nfunction forwardRotationLambda(deltaLambda) {\\n  return function(lambda, phi) {\\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\\n  };\\n}\\n\\nfunction rotationLambda(deltaLambda) {\\n  var rotation = forwardRotationLambda(deltaLambda);\\n  rotation.invert = forwardRotationLambda(-deltaLambda);\\n  return rotation;\\n}\\n\\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\\n  var cosDeltaPhi = cos(deltaPhi),\\n      sinDeltaPhi = sin(deltaPhi),\\n      cosDeltaGamma = cos(deltaGamma),\\n      sinDeltaGamma = sin(deltaGamma);\\n\\n  function rotation(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        x = cos(lambda) * cosPhi,\\n        y = sin(lambda) * cosPhi,\\n        z = sin(phi),\\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\\n    return [\\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\\n    ];\\n  }\\n\\n  rotation.invert = function(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        x = cos(lambda) * cosPhi,\\n        y = sin(lambda) * cosPhi,\\n        z = sin(phi),\\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\\n    return [\\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\\n    ];\\n  };\\n\\n  return rotation;\\n}\\n\\nexport default function(rotate) {\\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\\n\\n  function forward(coordinates) {\\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\\n  }\\n\\n  forward.invert = function(coordinates) {\\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\\n  };\\n\\n  return forward;\\n}\\n\",\"import {cartesian, cartesianNormalizeInPlace, spherical} from \\\"./cartesian\\\";\\nimport constant from \\\"./constant\\\";\\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \\\"./math\\\";\\nimport {rotateRadians} from \\\"./rotation\\\";\\n\\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\\n  if (!delta) return;\\n  var cosRadius = cos(radius),\\n      sinRadius = sin(radius),\\n      step = direction * delta;\\n  if (t0 == null) {\\n    t0 = radius + direction * tau;\\n    t1 = radius - step / 2;\\n  } else {\\n    t0 = circleRadius(cosRadius, t0);\\n    t1 = circleRadius(cosRadius, t1);\\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\\n  }\\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\\n    stream.point(point[0], point[1]);\\n  }\\n}\\n\\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\\nfunction circleRadius(cosRadius, point) {\\n  point = cartesian(point), point[0] -= cosRadius;\\n  cartesianNormalizeInPlace(point);\\n  var radius = acos(-point[1]);\\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\\n}\\n\\nexport default function() {\\n  var center = constant([0, 0]),\\n      radius = constant(90),\\n      precision = constant(6),\\n      ring,\\n      rotate,\\n      stream = {point: point};\\n\\n  function point(x, y) {\\n    ring.push(x = rotate(x, y));\\n    x[0] *= degrees, x[1] *= degrees;\\n  }\\n\\n  function circle() {\\n    var c = center.apply(this, arguments),\\n        r = radius.apply(this, arguments) * radians,\\n        p = precision.apply(this, arguments) * radians;\\n    ring = [];\\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\\n    circleStream(stream, r, p, 1);\\n    c = {type: \\\"Polygon\\\", coordinates: [ring]};\\n    ring = rotate = null;\\n    return c;\\n  }\\n\\n  circle.center = function(_) {\\n    return arguments.length ? (center = typeof _ === \\\"function\\\" ? _ : constant([+_[0], +_[1]]), circle) : center;\\n  };\\n\\n  circle.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \\\"function\\\" ? _ : constant(+_), circle) : radius;\\n  };\\n\\n  circle.precision = function(_) {\\n    return arguments.length ? (precision = typeof _ === \\\"function\\\" ? _ : constant(+_), circle) : precision;\\n  };\\n\\n  return circle;\\n}\\n\",\"import noop from \\\"../noop\\\";\\n\\nexport default function() {\\n  var lines = [],\\n      line;\\n  return {\\n    point: function(x, y) {\\n      line.push([x, y]);\\n    },\\n    lineStart: function() {\\n      lines.push(line = []);\\n    },\\n    lineEnd: noop,\\n    rejoin: function() {\\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\\n    },\\n    result: function() {\\n      var result = lines;\\n      lines = [];\\n      line = null;\\n      return result;\\n    }\\n  };\\n}\\n\",\"export default function(a, b, x0, y0, x1, y1) {\\n  var ax = a[0],\\n      ay = a[1],\\n      bx = b[0],\\n      by = b[1],\\n      t0 = 0,\\n      t1 = 1,\\n      dx = bx - ax,\\n      dy = by - ay,\\n      r;\\n\\n  r = x0 - ax;\\n  if (!dx && r > 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dx > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = x1 - ax;\\n  if (!dx && r < 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dx > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  r = y0 - ay;\\n  if (!dy && r > 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dy > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = y1 - ay;\\n  if (!dy && r < 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dy > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\\n  return true;\\n}\\n\",\"import {abs, epsilon} from \\\"./math\\\";\\n\\nexport default function(a, b) {\\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\\n}\\n\",\"import pointEqual from \\\"../pointEqual\\\";\\n\\nfunction Intersection(point, points, other, entry) {\\n  this.x = point;\\n  this.z = points;\\n  this.o = other; // another intersection\\n  this.e = entry; // is an entry?\\n  this.v = false; // visited\\n  this.n = this.p = null; // next & previous\\n}\\n\\n// A generalized polygon clipping algorithm: given a polygon that has been cut\\n// into its visible line segments, and rejoins the segments by interpolating\\n// along the clip edge.\\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\\n  var subject = [],\\n      clip = [],\\n      i,\\n      n;\\n\\n  segments.forEach(function(segment) {\\n    if ((n = segment.length - 1) <= 0) return;\\n    var n, p0 = segment[0], p1 = segment[n], x;\\n\\n    // If the first and last points of a segment are coincident, then treat as a\\n    // closed ring. TODO if all rings are closed, then the winding order of the\\n    // exterior ring should be checked.\\n    if (pointEqual(p0, p1)) {\\n      stream.lineStart();\\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\\n      stream.lineEnd();\\n      return;\\n    }\\n\\n    subject.push(x = new Intersection(p0, segment, null, true));\\n    clip.push(x.o = new Intersection(p0, null, x, false));\\n    subject.push(x = new Intersection(p1, segment, null, false));\\n    clip.push(x.o = new Intersection(p1, null, x, true));\\n  });\\n\\n  if (!subject.length) return;\\n\\n  clip.sort(compareIntersection);\\n  link(subject);\\n  link(clip);\\n\\n  for (i = 0, n = clip.length; i < n; ++i) {\\n    clip[i].e = startInside = !startInside;\\n  }\\n\\n  var start = subject[0],\\n      points,\\n      point;\\n\\n  while (1) {\\n    // Find first unvisited intersection.\\n    var current = start,\\n        isSubject = true;\\n    while (current.v) if ((current = current.n) === start) return;\\n    points = current.z;\\n    stream.lineStart();\\n    do {\\n      current.v = current.o.v = true;\\n      if (current.e) {\\n        if (isSubject) {\\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\\n        } else {\\n          interpolate(current.x, current.n.x, 1, stream);\\n        }\\n        current = current.n;\\n      } else {\\n        if (isSubject) {\\n          points = current.p.z;\\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\\n        } else {\\n          interpolate(current.x, current.p.x, -1, stream);\\n        }\\n        current = current.p;\\n      }\\n      current = current.o;\\n      points = current.z;\\n      isSubject = !isSubject;\\n    } while (!current.v);\\n    stream.lineEnd();\\n  }\\n}\\n\\nfunction link(array) {\\n  if (!(n = array.length)) return;\\n  var n,\\n      i = 0,\\n      a = array[0],\\n      b;\\n  while (++i < n) {\\n    a.n = b = array[i];\\n    b.p = a;\\n    a = b;\\n  }\\n  a.n = b = array[0];\\n  b.p = a;\\n}\\n\",\"import {abs, epsilon} from \\\"../math\\\";\\nimport clipBuffer from \\\"./buffer\\\";\\nimport clipLine from \\\"./line\\\";\\nimport clipPolygon from \\\"./polygon\\\";\\nimport {merge} from \\\"d3-array\\\";\\n\\nvar clipMax = 1e9, clipMin = -clipMax;\\n\\n// TODO Use d3-polygon’s polygonContains here for the ring check?\\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\\n\\nexport function clipExtent(x0, y0, x1, y1) {\\n\\n  function visible(x, y) {\\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\\n  }\\n\\n  function interpolate(from, to, direction, stream) {\\n    var a = 0, a1 = 0;\\n    if (from == null\\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\\n        || comparePoint(from, to) < 0 ^ direction > 0) {\\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\\n      while ((a = (a + direction + 4) % 4) !== a1);\\n    } else {\\n      stream.point(to[0], to[1]);\\n    }\\n  }\\n\\n  function corner(p, direction) {\\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\\n  }\\n\\n  function compareIntersection(a, b) {\\n    return comparePoint(a.x, b.x);\\n  }\\n\\n  function comparePoint(a, b) {\\n    var ca = corner(a, 1),\\n        cb = corner(b, 1);\\n    return ca !== cb ? ca - cb\\n        : ca === 0 ? b[1] - a[1]\\n        : ca === 1 ? a[0] - b[0]\\n        : ca === 2 ? a[1] - b[1]\\n        : b[0] - a[0];\\n  }\\n\\n  return function(stream) {\\n    var activeStream = stream,\\n        bufferStream = clipBuffer(),\\n        segments,\\n        polygon,\\n        ring,\\n        x__, y__, v__, // first point\\n        x_, y_, v_, // previous point\\n        first,\\n        clean;\\n\\n    var clipStream = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: polygonStart,\\n      polygonEnd: polygonEnd\\n    };\\n\\n    function point(x, y) {\\n      if (visible(x, y)) activeStream.point(x, y);\\n    }\\n\\n    function polygonInside() {\\n      var winding = 0;\\n\\n      for (var i = 0, n = polygon.length; i < n; ++i) {\\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\\n        }\\n      }\\n\\n      return winding;\\n    }\\n\\n    // Buffer geometry within a polygon and then clip it en masse.\\n    function polygonStart() {\\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\\n    }\\n\\n    function polygonEnd() {\\n      var startInside = polygonInside(),\\n          cleanInside = clean && startInside,\\n          visible = (segments = merge(segments)).length;\\n      if (cleanInside || visible) {\\n        stream.polygonStart();\\n        if (cleanInside) {\\n          stream.lineStart();\\n          interpolate(null, null, 1, stream);\\n          stream.lineEnd();\\n        }\\n        if (visible) {\\n          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\\n        }\\n        stream.polygonEnd();\\n      }\\n      activeStream = stream, segments = polygon = ring = null;\\n    }\\n\\n    function lineStart() {\\n      clipStream.point = linePoint;\\n      if (polygon) polygon.push(ring = []);\\n      first = true;\\n      v_ = false;\\n      x_ = y_ = NaN;\\n    }\\n\\n    // TODO rather than special-case polygons, simply handle them separately.\\n    // Ideally, coincident intersection points should be jittered to avoid\\n    // clipping issues.\\n    function lineEnd() {\\n      if (segments) {\\n        linePoint(x__, y__);\\n        if (v__ && v_) bufferStream.rejoin();\\n        segments.push(bufferStream.result());\\n      }\\n      clipStream.point = point;\\n      if (v_) activeStream.lineEnd();\\n    }\\n\\n    function linePoint(x, y) {\\n      var v = visible(x, y);\\n      if (polygon) ring.push([x, y]);\\n      if (first) {\\n        x__ = x, y__ = y, v__ = v;\\n        first = false;\\n        if (v) {\\n          activeStream.lineStart();\\n          activeStream.point(x, y);\\n        }\\n      } else {\\n        if (v && v_) activeStream.point(x, y);\\n        else {\\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\\n          if (clipLine(a, b, x0, y0, x1, y1)) {\\n            if (!v_) {\\n              activeStream.lineStart();\\n              activeStream.point(a[0], a[1]);\\n            }\\n            activeStream.point(b[0], b[1]);\\n            if (!v) activeStream.lineEnd();\\n            clean = false;\\n          } else if (v) {\\n            activeStream.lineStart();\\n            activeStream.point(x, y);\\n            clean = false;\\n          }\\n        }\\n      }\\n      x_ = x, y_ = y, v_ = v;\\n    }\\n\\n    return clipStream;\\n  };\\n}\\n\\nexport default function() {\\n  var x0 = 0,\\n      y0 = 0,\\n      x1 = 960,\\n      y1 = 500,\\n      cache,\\n      cacheStream,\\n      clip;\\n\\n  return clip = {\\n    stream: function(stream) {\\n      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\\n    },\\n    extent: function(_) {\\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\\n    }\\n  };\\n}\\n\",\"import adder from \\\"./adder\\\";\\nimport {abs, atan2, cos, radians, sin, sqrt} from \\\"./math\\\";\\nimport noop from \\\"./noop\\\";\\nimport stream from \\\"./stream\\\";\\n\\nvar lengthSum = adder(),\\n    lambda0,\\n    sinPhi0,\\n    cosPhi0;\\n\\nvar lengthStream = {\\n  sphere: noop,\\n  point: noop,\\n  lineStart: lengthLineStart,\\n  lineEnd: noop,\\n  polygonStart: noop,\\n  polygonEnd: noop\\n};\\n\\nfunction lengthLineStart() {\\n  lengthStream.point = lengthPointFirst;\\n  lengthStream.lineEnd = lengthLineEnd;\\n}\\n\\nfunction lengthLineEnd() {\\n  lengthStream.point = lengthStream.lineEnd = noop;\\n}\\n\\nfunction lengthPointFirst(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\\n  lengthStream.point = lengthPoint;\\n}\\n\\nfunction lengthPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var sinPhi = sin(phi),\\n      cosPhi = cos(phi),\\n      delta = abs(lambda - lambda0),\\n      cosDelta = cos(delta),\\n      sinDelta = sin(delta),\\n      x = cosPhi * sinDelta,\\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\\n}\\n\\nexport default function(object) {\\n  lengthSum.reset();\\n  stream(object, lengthStream);\\n  return +lengthSum;\\n}\\n\",\"import adder from \\\"./adder\\\";\\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \\\"./cartesian\\\";\\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \\\"./math\\\";\\n\\nvar sum = adder();\\n\\nexport default function(polygon, point) {\\n  var lambda = point[0],\\n      phi = point[1],\\n      normal = [sin(lambda), -cos(lambda), 0],\\n      angle = 0,\\n      winding = 0;\\n\\n  sum.reset();\\n\\n  for (var i = 0, n = polygon.length; i < n; ++i) {\\n    if (!(m = (ring = polygon[i]).length)) continue;\\n    var ring,\\n        m,\\n        point0 = ring[m - 1],\\n        lambda0 = point0[0],\\n        phi0 = point0[1] / 2 + quarterPi,\\n        sinPhi0 = sin(phi0),\\n        cosPhi0 = cos(phi0);\\n\\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\\n      var point1 = ring[j],\\n          lambda1 = point1[0],\\n          phi1 = point1[1] / 2 + quarterPi,\\n          sinPhi1 = sin(phi1),\\n          cosPhi1 = cos(phi1),\\n          delta = lambda1 - lambda0,\\n          sign = delta >= 0 ? 1 : -1,\\n          absDelta = sign * delta,\\n          antimeridian = absDelta > pi,\\n          k = sinPhi0 * sinPhi1;\\n\\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\\n      angle += antimeridian ? delta + sign * tau : delta;\\n\\n      // Are the longitudes either side of the point’s meridian (lambda),\\n      // and are the latitudes smaller than the parallel (phi)?\\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\\n        cartesianNormalizeInPlace(arc);\\n        var intersection = cartesianCross(normal, arc);\\n        cartesianNormalizeInPlace(intersection);\\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  // First, determine whether the South pole is inside or outside:\\n  //\\n  // It is inside if:\\n  // * the polygon winds around it in a clockwise direction.\\n  // * the polygon does not (cumulatively) wind around it, but has a negative\\n  //   (counter-clockwise) area.\\n  //\\n  // Second, count the (signed) number of times a segment crosses a lambda\\n  // from the point to the South pole.  If it is zero, then the point is the\\n  // same side as the South pole.\\n\\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\\n}\\n\",\"import length from \\\"./length\\\";\\n\\nvar coordinates = [null, null],\\n    object = {type: \\\"LineString\\\", coordinates: coordinates};\\n\\nexport default function(a, b) {\\n  coordinates[0] = a;\\n  coordinates[1] = b;\\n  return length(object);\\n}\\n\",\"import {default as polygonContains} from \\\"./polygonContains\\\";\\nimport {default as distance} from \\\"./distance\\\";\\nimport {epsilon, radians} from \\\"./math\\\";\\n\\nvar containsObjectType = {\\n  Feature: function(object, point) {\\n    return containsGeometry(object.geometry, point);\\n  },\\n  FeatureCollection: function(object, point) {\\n    var features = object.features, i = -1, n = features.length;\\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\\n    return false;\\n  }\\n};\\n\\nvar containsGeometryType = {\\n  Sphere: function() {\\n    return true;\\n  },\\n  Point: function(object, point) {\\n    return containsPoint(object.coordinates, point);\\n  },\\n  MultiPoint: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  LineString: function(object, point) {\\n    return containsLine(object.coordinates, point);\\n  },\\n  MultiLineString: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  Polygon: function(object, point) {\\n    return containsPolygon(object.coordinates, point);\\n  },\\n  MultiPolygon: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  GeometryCollection: function(object, point) {\\n    var geometries = object.geometries, i = -1, n = geometries.length;\\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\\n    return false;\\n  }\\n};\\n\\nfunction containsGeometry(geometry, point) {\\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\\n      ? containsGeometryType[geometry.type](geometry, point)\\n      : false;\\n}\\n\\nfunction containsPoint(coordinates, point) {\\n  return distance(coordinates, point) === 0;\\n}\\n\\nfunction containsLine(coordinates, point) {\\n  var ab = distance(coordinates[0], coordinates[1]),\\n      ao = distance(coordinates[0], point),\\n      ob = distance(point, coordinates[1]);\\n  return ao + ob <= ab + epsilon;\\n}\\n\\nfunction containsPolygon(coordinates, point) {\\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\\n}\\n\\nfunction ringRadians(ring) {\\n  return ring = ring.map(pointRadians), ring.pop(), ring;\\n}\\n\\nfunction pointRadians(point) {\\n  return [point[0] * radians, point[1] * radians];\\n}\\n\\nexport default function(object, point) {\\n  return (object && containsObjectType.hasOwnProperty(object.type)\\n      ? containsObjectType[object.type]\\n      : containsGeometry)(object, point);\\n}\\n\",\"import {range} from \\\"d3-array\\\";\\nimport {abs, ceil, epsilon} from \\\"./math\\\";\\n\\nfunction graticuleX(y0, y1, dy) {\\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\\n}\\n\\nfunction graticuleY(x0, x1, dx) {\\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\\n}\\n\\nexport default function graticule() {\\n  var x1, x0, X1, X0,\\n      y1, y0, Y1, Y0,\\n      dx = 10, dy = dx, DX = 90, DY = 360,\\n      x, y, X, Y,\\n      precision = 2.5;\\n\\n  function graticule() {\\n    return {type: \\\"MultiLineString\\\", coordinates: lines()};\\n  }\\n\\n  function lines() {\\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\\n  }\\n\\n  graticule.lines = function() {\\n    return lines().map(function(coordinates) { return {type: \\\"LineString\\\", coordinates: coordinates}; });\\n  };\\n\\n  graticule.outline = function() {\\n    return {\\n      type: \\\"Polygon\\\",\\n      coordinates: [\\n        X(X0).concat(\\n        Y(Y1).slice(1),\\n        X(X1).reverse().slice(1),\\n        Y(Y0).reverse().slice(1))\\n      ]\\n    };\\n  };\\n\\n  graticule.extent = function(_) {\\n    if (!arguments.length) return graticule.extentMinor();\\n    return graticule.extentMajor(_).extentMinor(_);\\n  };\\n\\n  graticule.extentMajor = function(_) {\\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\\n    X0 = +_[0][0], X1 = +_[1][0];\\n    Y0 = +_[0][1], Y1 = +_[1][1];\\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\\n    return graticule.precision(precision);\\n  };\\n\\n  graticule.extentMinor = function(_) {\\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\\n    x0 = +_[0][0], x1 = +_[1][0];\\n    y0 = +_[0][1], y1 = +_[1][1];\\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\\n    return graticule.precision(precision);\\n  };\\n\\n  graticule.step = function(_) {\\n    if (!arguments.length) return graticule.stepMinor();\\n    return graticule.stepMajor(_).stepMinor(_);\\n  };\\n\\n  graticule.stepMajor = function(_) {\\n    if (!arguments.length) return [DX, DY];\\n    DX = +_[0], DY = +_[1];\\n    return graticule;\\n  };\\n\\n  graticule.stepMinor = function(_) {\\n    if (!arguments.length) return [dx, dy];\\n    dx = +_[0], dy = +_[1];\\n    return graticule;\\n  };\\n\\n  graticule.precision = function(_) {\\n    if (!arguments.length) return precision;\\n    precision = +_;\\n    x = graticuleX(y0, y1, 90);\\n    y = graticuleY(x0, x1, precision);\\n    X = graticuleX(Y0, Y1, 90);\\n    Y = graticuleY(X0, X1, precision);\\n    return graticule;\\n  };\\n\\n  return graticule\\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\\n}\\n\\nexport function graticule10() {\\n  return graticule()();\\n}\\n\",\"import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \\\"./math\\\";\\n\\nexport default function(a, b) {\\n  var x0 = a[0] * radians,\\n      y0 = a[1] * radians,\\n      x1 = b[0] * radians,\\n      y1 = b[1] * radians,\\n      cy0 = cos(y0),\\n      sy0 = sin(y0),\\n      cy1 = cos(y1),\\n      sy1 = sin(y1),\\n      kx0 = cy0 * cos(x0),\\n      ky0 = cy0 * sin(x0),\\n      kx1 = cy1 * cos(x1),\\n      ky1 = cy1 * sin(x1),\\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\\n      k = sin(d);\\n\\n  var interpolate = d ? function(t) {\\n    var B = sin(t *= d) / k,\\n        A = sin(d - t) / k,\\n        x = A * kx0 + B * kx1,\\n        y = A * ky0 + B * ky1,\\n        z = A * sy0 + B * sy1;\\n    return [\\n      atan2(y, x) * degrees,\\n      atan2(z, sqrt(x * x + y * y)) * degrees\\n    ];\\n  } : function() {\\n    return [x0 * degrees, y0 * degrees];\\n  };\\n\\n  interpolate.distance = d;\\n\\n  return interpolate;\\n}\\n\",\"import adder from \\\"../adder\\\";\\nimport {abs} from \\\"../math\\\";\\nimport noop from \\\"../noop\\\";\\n\\nvar areaSum = adder(),\\n    areaRingSum = adder(),\\n    x00,\\n    y00,\\n    x0,\\n    y0;\\n\\nvar areaStream = {\\n  point: noop,\\n  lineStart: noop,\\n  lineEnd: noop,\\n  polygonStart: function() {\\n    areaStream.lineStart = areaRingStart;\\n    areaStream.lineEnd = areaRingEnd;\\n  },\\n  polygonEnd: function() {\\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\\n    areaSum.add(abs(areaRingSum));\\n    areaRingSum.reset();\\n  },\\n  result: function() {\\n    var area = areaSum / 2;\\n    areaSum.reset();\\n    return area;\\n  }\\n};\\n\\nfunction areaRingStart() {\\n  areaStream.point = areaPointFirst;\\n}\\n\\nfunction areaPointFirst(x, y) {\\n  areaStream.point = areaPoint;\\n  x00 = x0 = x, y00 = y0 = y;\\n}\\n\\nfunction areaPoint(x, y) {\\n  areaRingSum.add(y0 * x - x0 * y);\\n  x0 = x, y0 = y;\\n}\\n\\nfunction areaRingEnd() {\\n  areaPoint(x00, y00);\\n}\\n\\nexport default areaStream;\\n\",\"export default function(x) {\\n  return x;\\n}\\n\",\"import noop from \\\"../noop\\\";\\n\\nvar x0 = Infinity,\\n    y0 = x0,\\n    x1 = -x0,\\n    y1 = x1;\\n\\nvar boundsStream = {\\n  point: boundsPoint,\\n  lineStart: noop,\\n  lineEnd: noop,\\n  polygonStart: noop,\\n  polygonEnd: noop,\\n  result: function() {\\n    var bounds = [[x0, y0], [x1, y1]];\\n    x1 = y1 = -(y0 = x0 = Infinity);\\n    return bounds;\\n  }\\n};\\n\\nfunction boundsPoint(x, y) {\\n  if (x < x0) x0 = x;\\n  if (x > x1) x1 = x;\\n  if (y < y0) y0 = y;\\n  if (y > y1) y1 = y;\\n}\\n\\nexport default boundsStream;\\n\",\"import {sqrt} from \\\"../math\\\";\\n\\n// TODO Enforce positive area for exterior, negative area for interior?\\n\\nvar X0 = 0,\\n    Y0 = 0,\\n    Z0 = 0,\\n    X1 = 0,\\n    Y1 = 0,\\n    Z1 = 0,\\n    X2 = 0,\\n    Y2 = 0,\\n    Z2 = 0,\\n    x00,\\n    y00,\\n    x0,\\n    y0;\\n\\nvar centroidStream = {\\n  point: centroidPoint,\\n  lineStart: centroidLineStart,\\n  lineEnd: centroidLineEnd,\\n  polygonStart: function() {\\n    centroidStream.lineStart = centroidRingStart;\\n    centroidStream.lineEnd = centroidRingEnd;\\n  },\\n  polygonEnd: function() {\\n    centroidStream.point = centroidPoint;\\n    centroidStream.lineStart = centroidLineStart;\\n    centroidStream.lineEnd = centroidLineEnd;\\n  },\\n  result: function() {\\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\\n        : Z1 ? [X1 / Z1, Y1 / Z1]\\n        : Z0 ? [X0 / Z0, Y0 / Z0]\\n        : [NaN, NaN];\\n    X0 = Y0 = Z0 =\\n    X1 = Y1 = Z1 =\\n    X2 = Y2 = Z2 = 0;\\n    return centroid;\\n  }\\n};\\n\\nfunction centroidPoint(x, y) {\\n  X0 += x;\\n  Y0 += y;\\n  ++Z0;\\n}\\n\\nfunction centroidLineStart() {\\n  centroidStream.point = centroidPointFirstLine;\\n}\\n\\nfunction centroidPointFirstLine(x, y) {\\n  centroidStream.point = centroidPointLine;\\n  centroidPoint(x0 = x, y0 = y);\\n}\\n\\nfunction centroidPointLine(x, y) {\\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\\n  X1 += z * (x0 + x) / 2;\\n  Y1 += z * (y0 + y) / 2;\\n  Z1 += z;\\n  centroidPoint(x0 = x, y0 = y);\\n}\\n\\nfunction centroidLineEnd() {\\n  centroidStream.point = centroidPoint;\\n}\\n\\nfunction centroidRingStart() {\\n  centroidStream.point = centroidPointFirstRing;\\n}\\n\\nfunction centroidRingEnd() {\\n  centroidPointRing(x00, y00);\\n}\\n\\nfunction centroidPointFirstRing(x, y) {\\n  centroidStream.point = centroidPointRing;\\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\\n}\\n\\nfunction centroidPointRing(x, y) {\\n  var dx = x - x0,\\n      dy = y - y0,\\n      z = sqrt(dx * dx + dy * dy);\\n\\n  X1 += z * (x0 + x) / 2;\\n  Y1 += z * (y0 + y) / 2;\\n  Z1 += z;\\n\\n  z = y0 * x - x0 * y;\\n  X2 += z * (x0 + x);\\n  Y2 += z * (y0 + y);\\n  Z2 += z * 3;\\n  centroidPoint(x0 = x, y0 = y);\\n}\\n\\nexport default centroidStream;\\n\",\"import {tau} from \\\"../math\\\";\\nimport noop from \\\"../noop\\\";\\n\\nexport default function PathContext(context) {\\n  this._context = context;\\n}\\n\\nPathContext.prototype = {\\n  _radius: 4.5,\\n  pointRadius: function(_) {\\n    return this._radius = _, this;\\n  },\\n  polygonStart: function() {\\n    this._line = 0;\\n  },\\n  polygonEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line === 0) this._context.closePath();\\n    this._point = NaN;\\n  },\\n  point: function(x, y) {\\n    switch (this._point) {\\n      case 0: {\\n        this._context.moveTo(x, y);\\n        this._point = 1;\\n        break;\\n      }\\n      case 1: {\\n        this._context.lineTo(x, y);\\n        break;\\n      }\\n      default: {\\n        this._context.moveTo(x + this._radius, y);\\n        this._context.arc(x, y, this._radius, 0, tau);\\n        break;\\n      }\\n    }\\n  },\\n  result: noop\\n};\\n\",\"import adder from \\\"../adder\\\";\\nimport {sqrt} from \\\"../math\\\";\\nimport noop from \\\"../noop\\\";\\n\\nvar lengthSum = adder(),\\n    lengthRing,\\n    x00,\\n    y00,\\n    x0,\\n    y0;\\n\\nvar lengthStream = {\\n  point: noop,\\n  lineStart: function() {\\n    lengthStream.point = lengthPointFirst;\\n  },\\n  lineEnd: function() {\\n    if (lengthRing) lengthPoint(x00, y00);\\n    lengthStream.point = noop;\\n  },\\n  polygonStart: function() {\\n    lengthRing = true;\\n  },\\n  polygonEnd: function() {\\n    lengthRing = null;\\n  },\\n  result: function() {\\n    var length = +lengthSum;\\n    lengthSum.reset();\\n    return length;\\n  }\\n};\\n\\nfunction lengthPointFirst(x, y) {\\n  lengthStream.point = lengthPoint;\\n  x00 = x0 = x, y00 = y0 = y;\\n}\\n\\nfunction lengthPoint(x, y) {\\n  x0 -= x, y0 -= y;\\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\\n  x0 = x, y0 = y;\\n}\\n\\nexport default lengthStream;\\n\",\"export default function PathString() {\\n  this._string = [];\\n}\\n\\nPathString.prototype = {\\n  _circle: circle(4.5),\\n  pointRadius: function(_) {\\n    return this._circle = circle(_), this;\\n  },\\n  polygonStart: function() {\\n    this._line = 0;\\n  },\\n  polygonEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line === 0) this._string.push(\\\"Z\\\");\\n    this._point = NaN;\\n  },\\n  point: function(x, y) {\\n    switch (this._point) {\\n      case 0: {\\n        this._string.push(\\\"M\\\", x, \\\",\\\", y);\\n        this._point = 1;\\n        break;\\n      }\\n      case 1: {\\n        this._string.push(\\\"L\\\", x, \\\",\\\", y);\\n        break;\\n      }\\n      default: {\\n        this._string.push(\\\"M\\\", x, \\\",\\\", y, this._circle);\\n        break;\\n      }\\n    }\\n  },\\n  result: function() {\\n    if (this._string.length) {\\n      var result = this._string.join(\\\"\\\");\\n      this._string = [];\\n      return result;\\n    }\\n  }\\n};\\n\\nfunction circle(radius) {\\n  return \\\"m0,\\\" + radius\\n      + \\\"a\\\" + radius + \\\",\\\" + radius + \\\" 0 1,1 0,\\\" + -2 * radius\\n      + \\\"a\\\" + radius + \\\",\\\" + radius + \\\" 0 1,1 0,\\\" + 2 * radius\\n      + \\\"z\\\";\\n}\\n\",\"import identity from \\\"../identity\\\";\\nimport stream from \\\"../stream\\\";\\nimport pathArea from \\\"./area\\\";\\nimport pathBounds from \\\"./bounds\\\";\\nimport pathCentroid from \\\"./centroid\\\";\\nimport PathContext from \\\"./context\\\";\\nimport pathMeasure from \\\"./measure\\\";\\nimport PathString from \\\"./string\\\";\\n\\nexport default function(projection, context) {\\n  var pointRadius = 4.5,\\n      projectionStream,\\n      contextStream;\\n\\n  function path(object) {\\n    if (object) {\\n      if (typeof pointRadius === \\\"function\\\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\\n      stream(object, projectionStream(contextStream));\\n    }\\n    return contextStream.result();\\n  }\\n\\n  path.area = function(object) {\\n    stream(object, projectionStream(pathArea));\\n    return pathArea.result();\\n  };\\n\\n  path.measure = function(object) {\\n    stream(object, projectionStream(pathMeasure));\\n    return pathMeasure.result();\\n  };\\n\\n  path.bounds = function(object) {\\n    stream(object, projectionStream(pathBounds));\\n    return pathBounds.result();\\n  };\\n\\n  path.centroid = function(object) {\\n    stream(object, projectionStream(pathCentroid));\\n    return pathCentroid.result();\\n  };\\n\\n  path.projection = function(_) {\\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\\n  };\\n\\n  path.context = function(_) {\\n    if (!arguments.length) return context;\\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\\n    if (typeof pointRadius !== \\\"function\\\") contextStream.pointRadius(pointRadius);\\n    return path;\\n  };\\n\\n  path.pointRadius = function(_) {\\n    if (!arguments.length) return pointRadius;\\n    pointRadius = typeof _ === \\\"function\\\" ? _ : (contextStream.pointRadius(+_), +_);\\n    return path;\\n  };\\n\\n  return path.projection(projection).context(context);\\n}\\n\",\"import clipBuffer from \\\"./buffer\\\";\\nimport clipPolygon from \\\"./polygon\\\";\\nimport {epsilon, halfPi} from \\\"../math\\\";\\nimport polygonContains from \\\"../polygonContains\\\";\\nimport {merge} from \\\"d3-array\\\";\\n\\nexport default function(pointVisible, clipLine, interpolate, start) {\\n  return function(rotate, sink) {\\n    var line = clipLine(sink),\\n        rotatedStart = rotate.invert(start[0], start[1]),\\n        ringBuffer = clipBuffer(),\\n        ringSink = clipLine(ringBuffer),\\n        polygonStarted = false,\\n        polygon,\\n        segments,\\n        ring;\\n\\n    var clip = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: function() {\\n        clip.point = pointRing;\\n        clip.lineStart = ringStart;\\n        clip.lineEnd = ringEnd;\\n        segments = [];\\n        polygon = [];\\n      },\\n      polygonEnd: function() {\\n        clip.point = point;\\n        clip.lineStart = lineStart;\\n        clip.lineEnd = lineEnd;\\n        segments = merge(segments);\\n        var startInside = polygonContains(polygon, rotatedStart);\\n        if (segments.length) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\\n        } else if (startInside) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          sink.lineStart();\\n          interpolate(null, null, 1, sink);\\n          sink.lineEnd();\\n        }\\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\\n        segments = polygon = null;\\n      },\\n      sphere: function() {\\n        sink.polygonStart();\\n        sink.lineStart();\\n        interpolate(null, null, 1, sink);\\n        sink.lineEnd();\\n        sink.polygonEnd();\\n      }\\n    };\\n\\n    function point(lambda, phi) {\\n      var point = rotate(lambda, phi);\\n      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\\n    }\\n\\n    function pointLine(lambda, phi) {\\n      var point = rotate(lambda, phi);\\n      line.point(point[0], point[1]);\\n    }\\n\\n    function lineStart() {\\n      clip.point = pointLine;\\n      line.lineStart();\\n    }\\n\\n    function lineEnd() {\\n      clip.point = point;\\n      line.lineEnd();\\n    }\\n\\n    function pointRing(lambda, phi) {\\n      ring.push([lambda, phi]);\\n      var point = rotate(lambda, phi);\\n      ringSink.point(point[0], point[1]);\\n    }\\n\\n    function ringStart() {\\n      ringSink.lineStart();\\n      ring = [];\\n    }\\n\\n    function ringEnd() {\\n      pointRing(ring[0][0], ring[0][1]);\\n      ringSink.lineEnd();\\n\\n      var clean = ringSink.clean(),\\n          ringSegments = ringBuffer.result(),\\n          i, n = ringSegments.length, m,\\n          segment,\\n          point;\\n\\n      ring.pop();\\n      polygon.push(ring);\\n      ring = null;\\n\\n      if (!n) return;\\n\\n      // No intersections.\\n      if (clean & 1) {\\n        segment = ringSegments[0];\\n        if ((m = segment.length - 1) > 0) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          sink.lineStart();\\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\\n          sink.lineEnd();\\n        }\\n        return;\\n      }\\n\\n      // Rejoin connected segments.\\n      // TODO reuse ringBuffer.rejoin()?\\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\\n\\n      segments.push(ringSegments.filter(validSegment));\\n    }\\n\\n    return clip;\\n  };\\n}\\n\\nfunction validSegment(segment) {\\n  return segment.length > 1;\\n}\\n\\n// Intersections are sorted along the clip edge. For both antimeridian cutting\\n// and circle clipping, the same comparison is used.\\nfunction compareIntersection(a, b) {\\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\\n}\\n\",\"import clip from \\\"./index\\\";\\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \\\"../math\\\";\\n\\nexport default clip(\\n  function() { return true; },\\n  clipAntimeridianLine,\\n  clipAntimeridianInterpolate,\\n  [-pi, -halfPi]\\n);\\n\\n// Takes a line and cuts into visible segments. Return values: 0 - there were\\n// intersections or the line was empty; 1 - no intersections; 2 - there were\\n// intersections, and the first and last segments should be rejoined.\\nfunction clipAntimeridianLine(stream) {\\n  var lambda0 = NaN,\\n      phi0 = NaN,\\n      sign0 = NaN,\\n      clean; // no intersections\\n\\n  return {\\n    lineStart: function() {\\n      stream.lineStart();\\n      clean = 1;\\n    },\\n    point: function(lambda1, phi1) {\\n      var sign1 = lambda1 > 0 ? pi : -pi,\\n          delta = abs(lambda1 - lambda0);\\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\\n        stream.point(sign0, phi0);\\n        stream.lineEnd();\\n        stream.lineStart();\\n        stream.point(sign1, phi0);\\n        stream.point(lambda1, phi0);\\n        clean = 0;\\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\\n        stream.point(sign0, phi0);\\n        stream.lineEnd();\\n        stream.lineStart();\\n        stream.point(sign1, phi0);\\n        clean = 0;\\n      }\\n      stream.point(lambda0 = lambda1, phi0 = phi1);\\n      sign0 = sign1;\\n    },\\n    lineEnd: function() {\\n      stream.lineEnd();\\n      lambda0 = phi0 = NaN;\\n    },\\n    clean: function() {\\n      return 2 - clean; // if intersections, rejoin first and last segments\\n    }\\n  };\\n}\\n\\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\\n  var cosPhi0,\\n      cosPhi1,\\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\\n  return abs(sinLambda0Lambda1) > epsilon\\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\\n      : (phi0 + phi1) / 2;\\n}\\n\\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\\n  var phi;\\n  if (from == null) {\\n    phi = direction * halfPi;\\n    stream.point(-pi, phi);\\n    stream.point(0, phi);\\n    stream.point(pi, phi);\\n    stream.point(pi, 0);\\n    stream.point(pi, -phi);\\n    stream.point(0, -phi);\\n    stream.point(-pi, -phi);\\n    stream.point(-pi, 0);\\n    stream.point(-pi, phi);\\n  } else if (abs(from[0] - to[0]) > epsilon) {\\n    var lambda = from[0] < to[0] ? pi : -pi;\\n    phi = direction * lambda / 2;\\n    stream.point(-lambda, phi);\\n    stream.point(0, phi);\\n    stream.point(lambda, phi);\\n  } else {\\n    stream.point(to[0], to[1]);\\n  }\\n}\\n\",\"import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \\\"../cartesian\\\";\\nimport {circleStream} from \\\"../circle\\\";\\nimport {abs, cos, epsilon, pi, sqrt} from \\\"../math\\\";\\nimport pointEqual from \\\"../pointEqual\\\";\\nimport clip from \\\"./index\\\";\\n\\nexport default function(radius, delta) {\\n  var cr = cos(radius),\\n      smallRadius = cr > 0,\\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\\n\\n  function interpolate(from, to, direction, stream) {\\n    circleStream(stream, radius, delta, direction, from, to);\\n  }\\n\\n  function visible(lambda, phi) {\\n    return cos(lambda) * cos(phi) > cr;\\n  }\\n\\n  // Takes a line and cuts into visible segments. Return values used for polygon\\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\\n  // intersections 2 - there were intersections, and the first and last segments\\n  // should be rejoined.\\n  function clipLine(stream) {\\n    var point0, // previous point\\n        c0, // code for previous point\\n        v0, // visibility of previous point\\n        v00, // visibility of first point\\n        clean; // no intersections\\n    return {\\n      lineStart: function() {\\n        v00 = v0 = false;\\n        clean = 1;\\n      },\\n      point: function(lambda, phi) {\\n        var point1 = [lambda, phi],\\n            point2,\\n            v = visible(lambda, phi),\\n            c = smallRadius\\n              ? v ? 0 : code(lambda, phi)\\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\\n        // Handle degeneracies.\\n        // TODO ignore if not clipping polygons.\\n        if (v !== v0) {\\n          point2 = intersect(point0, point1);\\n          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\\n            point1[0] += epsilon;\\n            point1[1] += epsilon;\\n            v = visible(point1[0], point1[1]);\\n          }\\n        }\\n        if (v !== v0) {\\n          clean = 0;\\n          if (v) {\\n            // outside going in\\n            stream.lineStart();\\n            point2 = intersect(point1, point0);\\n            stream.point(point2[0], point2[1]);\\n          } else {\\n            // inside going out\\n            point2 = intersect(point0, point1);\\n            stream.point(point2[0], point2[1]);\\n            stream.lineEnd();\\n          }\\n          point0 = point2;\\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\\n          var t;\\n          // If the codes for two points are different, or are both zero,\\n          // and there this segment intersects with the small circle.\\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\\n            clean = 0;\\n            if (smallRadius) {\\n              stream.lineStart();\\n              stream.point(t[0][0], t[0][1]);\\n              stream.point(t[1][0], t[1][1]);\\n              stream.lineEnd();\\n            } else {\\n              stream.point(t[1][0], t[1][1]);\\n              stream.lineEnd();\\n              stream.lineStart();\\n              stream.point(t[0][0], t[0][1]);\\n            }\\n          }\\n        }\\n        if (v && (!point0 || !pointEqual(point0, point1))) {\\n          stream.point(point1[0], point1[1]);\\n        }\\n        point0 = point1, v0 = v, c0 = c;\\n      },\\n      lineEnd: function() {\\n        if (v0) stream.lineEnd();\\n        point0 = null;\\n      },\\n      // Rejoin first and last segments if there were intersections and the first\\n      // and last points were visible.\\n      clean: function() {\\n        return clean | ((v00 && v0) << 1);\\n      }\\n    };\\n  }\\n\\n  // Intersects the great circle between a and b with the clip circle.\\n  function intersect(a, b, two) {\\n    var pa = cartesian(a),\\n        pb = cartesian(b);\\n\\n    // We have two planes, n1.p = d1 and n2.p = d2.\\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\\n    var n1 = [1, 0, 0], // normal\\n        n2 = cartesianCross(pa, pb),\\n        n2n2 = cartesianDot(n2, n2),\\n        n1n2 = n2[0], // cartesianDot(n1, n2),\\n        determinant = n2n2 - n1n2 * n1n2;\\n\\n    // Two polar points.\\n    if (!determinant) return !two && a;\\n\\n    var c1 =  cr * n2n2 / determinant,\\n        c2 = -cr * n1n2 / determinant,\\n        n1xn2 = cartesianCross(n1, n2),\\n        A = cartesianScale(n1, c1),\\n        B = cartesianScale(n2, c2);\\n    cartesianAddInPlace(A, B);\\n\\n    // Solve |p(t)|^2 = 1.\\n    var u = n1xn2,\\n        w = cartesianDot(A, u),\\n        uu = cartesianDot(u, u),\\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\\n\\n    if (t2 < 0) return;\\n\\n    var t = sqrt(t2),\\n        q = cartesianScale(u, (-w - t) / uu);\\n    cartesianAddInPlace(q, A);\\n    q = spherical(q);\\n\\n    if (!two) return q;\\n\\n    // Two intersection points.\\n    var lambda0 = a[0],\\n        lambda1 = b[0],\\n        phi0 = a[1],\\n        phi1 = b[1],\\n        z;\\n\\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\\n\\n    var delta = lambda1 - lambda0,\\n        polar = abs(delta - pi) < epsilon,\\n        meridian = polar || delta < epsilon;\\n\\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\\n\\n    // Check that the first point is between a and b.\\n    if (meridian\\n        ? polar\\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\\n          : phi0 <= q[1] && q[1] <= phi1\\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\\n      var q1 = cartesianScale(u, (-w + t) / uu);\\n      cartesianAddInPlace(q1, A);\\n      return [q, spherical(q1)];\\n    }\\n  }\\n\\n  // Generates a 4-bit vector representing the location of a point relative to\\n  // the small circle's bounding box.\\n  function code(lambda, phi) {\\n    var r = smallRadius ? radius : pi - radius,\\n        code = 0;\\n    if (lambda < -r) code |= 1; // left\\n    else if (lambda > r) code |= 2; // right\\n    if (phi < -r) code |= 4; // below\\n    else if (phi > r) code |= 8; // above\\n    return code;\\n  }\\n\\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\\n}\\n\",\"export default function(methods) {\\n  return {\\n    stream: transformer(methods)\\n  };\\n}\\n\\nexport function transformer(methods) {\\n  return function(stream) {\\n    var s = new TransformStream;\\n    for (var key in methods) s[key] = methods[key];\\n    s.stream = stream;\\n    return s;\\n  };\\n}\\n\\nfunction TransformStream() {}\\n\\nTransformStream.prototype = {\\n  constructor: TransformStream,\\n  point: function(x, y) { this.stream.point(x, y); },\\n  sphere: function() { this.stream.sphere(); },\\n  lineStart: function() { this.stream.lineStart(); },\\n  lineEnd: function() { this.stream.lineEnd(); },\\n  polygonStart: function() { this.stream.polygonStart(); },\\n  polygonEnd: function() { this.stream.polygonEnd(); }\\n};\\n\",\"import {default as geoStream} from \\\"../stream\\\";\\nimport boundsStream from \\\"../path/bounds\\\";\\n\\nexport function fitExtent(projection, extent, object) {\\n  var w = extent[1][0] - extent[0][0],\\n      h = extent[1][1] - extent[0][1],\\n      clip = projection.clipExtent && projection.clipExtent();\\n\\n  projection\\n      .scale(150)\\n      .translate([0, 0]);\\n\\n  if (clip != null) projection.clipExtent(null);\\n\\n  geoStream(object, projection.stream(boundsStream));\\n\\n  var b = boundsStream.result(),\\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\\n\\n  if (clip != null) projection.clipExtent(clip);\\n\\n  return projection\\n      .scale(k * 150)\\n      .translate([x, y]);\\n}\\n\\nexport function fitSize(projection, size, object) {\\n  return fitExtent(projection, [[0, 0], size], object);\\n}\\n\",\"import {cartesian} from \\\"../cartesian\\\";\\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \\\"../math\\\";\\nimport {transformer} from \\\"../transform\\\";\\n\\nvar maxDepth = 16, // maximum depth of subdivision\\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\\n\\nexport default function(project, delta2) {\\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\\n}\\n\\nfunction resampleNone(project) {\\n  return transformer({\\n    point: function(x, y) {\\n      x = project(x, y);\\n      this.stream.point(x[0], x[1]);\\n    }\\n  });\\n}\\n\\nfunction resample(project, delta2) {\\n\\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\\n    var dx = x1 - x0,\\n        dy = y1 - y0,\\n        d2 = dx * dx + dy * dy;\\n    if (d2 > 4 * delta2 && depth--) {\\n      var a = a0 + a1,\\n          b = b0 + b1,\\n          c = c0 + c1,\\n          m = sqrt(a * a + b * b + c * c),\\n          phi2 = asin(c /= m),\\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\\n          p = project(lambda2, phi2),\\n          x2 = p[0],\\n          y2 = p[1],\\n          dx2 = x2 - x0,\\n          dy2 = y2 - y0,\\n          dz = dy * dx2 - dx * dy2;\\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\\n        stream.point(x2, y2);\\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\\n      }\\n    }\\n  }\\n  return function(stream) {\\n    var lambda00, x00, y00, a00, b00, c00, // first point\\n        lambda0, x0, y0, a0, b0, c0; // previous point\\n\\n    var resampleStream = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\\n    };\\n\\n    function point(x, y) {\\n      x = project(x, y);\\n      stream.point(x[0], x[1]);\\n    }\\n\\n    function lineStart() {\\n      x0 = NaN;\\n      resampleStream.point = linePoint;\\n      stream.lineStart();\\n    }\\n\\n    function linePoint(lambda, phi) {\\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\\n      stream.point(x0, y0);\\n    }\\n\\n    function lineEnd() {\\n      resampleStream.point = point;\\n      stream.lineEnd();\\n    }\\n\\n    function ringStart() {\\n      lineStart();\\n      resampleStream.point = ringPoint;\\n      resampleStream.lineEnd = ringEnd;\\n    }\\n\\n    function ringPoint(lambda, phi) {\\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\\n      resampleStream.point = linePoint;\\n    }\\n\\n    function ringEnd() {\\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\\n      resampleStream.lineEnd = lineEnd;\\n      lineEnd();\\n    }\\n\\n    return resampleStream;\\n  };\\n}\\n\",\"import clipAntimeridian from \\\"../clip/antimeridian\\\";\\nimport clipCircle from \\\"../clip/circle\\\";\\nimport {clipExtent} from \\\"../clip/extent\\\";\\nimport compose from \\\"../compose\\\";\\nimport identity from \\\"../identity\\\";\\nimport {degrees, radians, sqrt} from \\\"../math\\\";\\nimport {rotateRadians} from \\\"../rotation\\\";\\nimport {transformer} from \\\"../transform\\\";\\nimport {fitExtent, fitSize} from \\\"./fit\\\";\\nimport resample from \\\"./resample\\\";\\n\\nvar transformRadians = transformer({\\n  point: function(x, y) {\\n    this.stream.point(x * radians, y * radians);\\n  }\\n});\\n\\nexport default function projection(project) {\\n  return projectionMutator(function() { return project; })();\\n}\\n\\nexport function projectionMutator(projectAt) {\\n  var project,\\n      k = 150, // scale\\n      x = 480, y = 250, // translate\\n      dx, dy, lambda = 0, phi = 0, // center\\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\\n      theta = null, preclip = clipAntimeridian, // clip angle\\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\\n      cache,\\n      cacheStream;\\n\\n  function projection(point) {\\n    point = projectRotate(point[0] * radians, point[1] * radians);\\n    return [point[0] * k + dx, dy - point[1] * k];\\n  }\\n\\n  function invert(point) {\\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\\n    return point && [point[0] * degrees, point[1] * degrees];\\n  }\\n\\n  function projectTransform(x, y) {\\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\\n  }\\n\\n  projection.stream = function(stream) {\\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\\n  };\\n\\n  projection.clipAngle = function(_) {\\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\\n  };\\n\\n  projection.clipExtent = function(_) {\\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n  };\\n\\n  projection.scale = function(_) {\\n    return arguments.length ? (k = +_, recenter()) : k;\\n  };\\n\\n  projection.translate = function(_) {\\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\\n  };\\n\\n  projection.center = function(_) {\\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\\n  };\\n\\n  projection.rotate = function(_) {\\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\\n  };\\n\\n  projection.precision = function(_) {\\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\\n  };\\n\\n  projection.fitExtent = function(extent, object) {\\n    return fitExtent(projection, extent, object);\\n  };\\n\\n  projection.fitSize = function(size, object) {\\n    return fitSize(projection, size, object);\\n  };\\n\\n  function recenter() {\\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\\n    var center = project(lambda, phi);\\n    dx = x - center[0] * k;\\n    dy = y + center[1] * k;\\n    return reset();\\n  }\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return projection;\\n  }\\n\\n  return function() {\\n    project = projectAt.apply(this, arguments);\\n    projection.invert = project.invert && invert;\\n    return recenter();\\n  };\\n}\\n\",\"import {degrees, pi, radians} from \\\"../math\\\";\\nimport {projectionMutator} from \\\"./index\\\";\\n\\nexport function conicProjection(projectAt) {\\n  var phi0 = 0,\\n      phi1 = pi / 3,\\n      m = projectionMutator(projectAt),\\n      p = m(phi0, phi1);\\n\\n  p.parallels = function(_) {\\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\\n  };\\n\\n  return p;\\n}\\n\",\"import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \\\"../math\\\";\\nimport {conicProjection} from \\\"./conic\\\";\\nimport {cylindricalEqualAreaRaw} from \\\"./cylindricalEqualArea\\\";\\n\\nexport function conicEqualAreaRaw(y0, y1) {\\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\\n\\n  // Are the parallels symmetrical around the Equator?\\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\\n\\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\\n\\n  function project(x, y) {\\n    var r = sqrt(c - 2 * n * sin(y)) / n;\\n    return [r * sin(x *= n), r0 - r * cos(x)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var r0y = r0 - y;\\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\\n  };\\n\\n  return project;\\n}\\n\\nexport default function() {\\n  return conicProjection(conicEqualAreaRaw)\\n      .scale(155.424)\\n      .center([0, 33.6442]);\\n}\\n\",\"import {asin, cos, sin} from \\\"../math\\\";\\n\\nexport function cylindricalEqualAreaRaw(phi0) {\\n  var cosPhi0 = cos(phi0);\\n\\n  function forward(lambda, phi) {\\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    return [x / cosPhi0, asin(y * cosPhi0)];\\n  };\\n\\n  return forward;\\n}\\n\",\"import conicEqualArea from \\\"./conicEqualArea\\\";\\n\\nexport default function() {\\n  return conicEqualArea()\\n      .parallels([29.5, 45.5])\\n      .scale(1070)\\n      .translate([480, 250])\\n      .rotate([96, 0])\\n      .center([-0.6, 38.7]);\\n}\\n\",\"import {epsilon} from \\\"../math\\\";\\nimport albers from \\\"./albers\\\";\\nimport conicEqualArea from \\\"./conicEqualArea\\\";\\nimport {fitExtent, fitSize} from \\\"./fit\\\";\\n\\n// The projections must have mutually exclusive clip regions on the sphere,\\n// as this will avoid emitting interleaving lines and polygons.\\nfunction multiplex(streams) {\\n  var n = streams.length;\\n  return {\\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\\n  };\\n}\\n\\n// A composite projection for the United States, configured by default for\\n// 960×500. The projection also works quite well at 960×600 if you change the\\n// scale to 1285 and adjust the translate accordingly. The set of standard\\n// parallels for each region comes from USGS, which is published here:\\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\\nexport default function() {\\n  var cache,\\n      cacheStream,\\n      lower48 = albers(), lower48Point,\\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\\n\\n  function albersUsa(coordinates) {\\n    var x = coordinates[0], y = coordinates[1];\\n    return point = null,\\n        (lower48Point.point(x, y), point)\\n        || (alaskaPoint.point(x, y), point)\\n        || (hawaiiPoint.point(x, y), point);\\n  }\\n\\n  albersUsa.invert = function(coordinates) {\\n    var k = lower48.scale(),\\n        t = lower48.translate(),\\n        x = (coordinates[0] - t[0]) / k,\\n        y = (coordinates[1] - t[1]) / k;\\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\\n        : lower48).invert(coordinates);\\n  };\\n\\n  albersUsa.stream = function(stream) {\\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\\n  };\\n\\n  albersUsa.precision = function(_) {\\n    if (!arguments.length) return lower48.precision();\\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\\n    return reset();\\n  };\\n\\n  albersUsa.scale = function(_) {\\n    if (!arguments.length) return lower48.scale();\\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\\n    return albersUsa.translate(lower48.translate());\\n  };\\n\\n  albersUsa.translate = function(_) {\\n    if (!arguments.length) return lower48.translate();\\n    var k = lower48.scale(), x = +_[0], y = +_[1];\\n\\n    lower48Point = lower48\\n        .translate(_)\\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\\n        .stream(pointStream);\\n\\n    alaskaPoint = alaska\\n        .translate([x - 0.307 * k, y + 0.201 * k])\\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\\n        .stream(pointStream);\\n\\n    hawaiiPoint = hawaii\\n        .translate([x - 0.205 * k, y + 0.212 * k])\\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\\n        .stream(pointStream);\\n\\n    return reset();\\n  };\\n\\n  albersUsa.fitExtent = function(extent, object) {\\n    return fitExtent(albersUsa, extent, object);\\n  };\\n\\n  albersUsa.fitSize = function(size, object) {\\n    return fitSize(albersUsa, size, object);\\n  };\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return albersUsa;\\n  }\\n\\n  return albersUsa.scale(1070);\\n}\\n\",\"import {asin, atan2, cos, sin, sqrt} from \\\"../math\\\";\\n\\nexport function azimuthalRaw(scale) {\\n  return function(x, y) {\\n    var cx = cos(x),\\n        cy = cos(y),\\n        k = scale(cx * cy);\\n    return [\\n      k * cy * sin(x),\\n      k * sin(y)\\n    ];\\n  }\\n}\\n\\nexport function azimuthalInvert(angle) {\\n  return function(x, y) {\\n    var z = sqrt(x * x + y * y),\\n        c = angle(z),\\n        sc = sin(c),\\n        cc = cos(c);\\n    return [\\n      atan2(x * sc, z * cc),\\n      asin(z && y * sc / z)\\n    ];\\n  }\\n}\\n\",\"import {asin, sqrt} from \\\"../math\\\";\\nimport {azimuthalRaw, azimuthalInvert} from \\\"./azimuthal\\\";\\nimport projection from \\\"./index\\\";\\n\\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\\n  return sqrt(2 / (1 + cxcy));\\n});\\n\\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\\n  return 2 * asin(z / 2);\\n});\\n\\nexport default function() {\\n  return projection(azimuthalEqualAreaRaw)\\n      .scale(124.75)\\n      .clipAngle(180 - 1e-3);\\n}\\n\",\"import {acos, sin} from \\\"../math\\\";\\nimport {azimuthalRaw, azimuthalInvert} from \\\"./azimuthal\\\";\\nimport projection from \\\"./index\\\";\\n\\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\\n  return (c = acos(c)) && c / sin(c);\\n});\\n\\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\\n  return z;\\n});\\n\\nexport default function() {\\n  return projection(azimuthalEquidistantRaw)\\n      .scale(79.4188)\\n      .clipAngle(180 - 1e-3);\\n}\\n\",\"import {atan, exp, halfPi, log, pi, tan, tau} from \\\"../math\\\";\\nimport rotation from \\\"../rotation\\\";\\nimport projection from \\\"./index\\\";\\n\\nexport function mercatorRaw(lambda, phi) {\\n  return [lambda, log(tan((halfPi + phi) / 2))];\\n}\\n\\nmercatorRaw.invert = function(x, y) {\\n  return [x, 2 * atan(exp(y)) - halfPi];\\n};\\n\\nexport default function() {\\n  return mercatorProjection(mercatorRaw)\\n      .scale(961 / tau);\\n}\\n\\nexport function mercatorProjection(project) {\\n  var m = projection(project),\\n      center = m.center,\\n      scale = m.scale,\\n      translate = m.translate,\\n      clipExtent = m.clipExtent,\\n      x0 = null, y0, x1, y1; // clip extent\\n\\n  m.scale = function(_) {\\n    return arguments.length ? (scale(_), reclip()) : scale();\\n  };\\n\\n  m.translate = function(_) {\\n    return arguments.length ? (translate(_), reclip()) : translate();\\n  };\\n\\n  m.center = function(_) {\\n    return arguments.length ? (center(_), reclip()) : center();\\n  };\\n\\n  m.clipExtent = function(_) {\\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n  };\\n\\n  function reclip() {\\n    var k = pi * scale(),\\n        t = m(rotation(m.rotate()).invert([0, 0]));\\n    return clipExtent(x0 == null\\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\\n  }\\n\\n  return reclip();\\n}\\n\",\"import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \\\"../math\\\";\\nimport {conicProjection} from \\\"./conic\\\";\\nimport {mercatorRaw} from \\\"./mercator\\\";\\n\\nfunction tany(y) {\\n  return tan((halfPi + y) / 2);\\n}\\n\\nexport function conicConformalRaw(y0, y1) {\\n  var cy0 = cos(y0),\\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\\n      f = cy0 * pow(tany(y0), n) / n;\\n\\n  if (!n) return mercatorRaw;\\n\\n  function project(x, y) {\\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\\n    var r = f / pow(tany(y), n);\\n    return [r * sin(n * x), f - r * cos(n * x)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\\n  };\\n\\n  return project;\\n}\\n\\nexport default function() {\\n  return conicProjection(conicConformalRaw)\\n      .scale(109.5)\\n      .parallels([30, 30]);\\n}\\n\",\"import projection from \\\"./index\\\";\\n\\nexport function equirectangularRaw(lambda, phi) {\\n  return [lambda, phi];\\n}\\n\\nequirectangularRaw.invert = equirectangularRaw;\\n\\nexport default function() {\\n  return projection(equirectangularRaw)\\n      .scale(152.63);\\n}\\n\",\"import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \\\"../math\\\";\\nimport {conicProjection} from \\\"./conic\\\";\\nimport {equirectangularRaw} from \\\"./equirectangular\\\";\\n\\nexport function conicEquidistantRaw(y0, y1) {\\n  var cy0 = cos(y0),\\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\\n      g = cy0 / n + y0;\\n\\n  if (abs(n) < epsilon) return equirectangularRaw;\\n\\n  function project(x, y) {\\n    var gy = g - y, nx = n * x;\\n    return [gy * sin(nx), g - gy * cos(nx)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var gy = g - y;\\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\\n  };\\n\\n  return project;\\n}\\n\\nexport default function() {\\n  return conicProjection(conicEquidistantRaw)\\n      .scale(131.154)\\n      .center([0, 13.9389]);\\n}\\n\",\"import {atan, cos, sin} from \\\"../math\\\";\\nimport {azimuthalInvert} from \\\"./azimuthal\\\";\\nimport projection from \\\"./index\\\";\\n\\nexport function gnomonicRaw(x, y) {\\n  var cy = cos(y), k = cos(x) * cy;\\n  return [cy * sin(x) / k, sin(y) / k];\\n}\\n\\ngnomonicRaw.invert = azimuthalInvert(atan);\\n\\nexport default function() {\\n  return projection(gnomonicRaw)\\n      .scale(144.049)\\n      .clipAngle(60);\\n}\\n\",\"import {clipExtent} from \\\"../clip/extent\\\";\\nimport identity from \\\"../identity\\\";\\nimport {transformer} from \\\"../transform\\\";\\nimport {fitExtent, fitSize} from \\\"./fit\\\";\\n\\nfunction scaleTranslate(kx, ky, tx, ty) {\\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\\n    point: function(x, y) {\\n      this.stream.point(x * kx + tx, y * ky + ty);\\n    }\\n  });\\n}\\n\\nexport default function() {\\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\\n      x0 = null, y0, x1, y1, clip = identity, // clip extent\\n      cache,\\n      cacheStream,\\n      projection;\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return projection;\\n  }\\n\\n  return projection = {\\n    stream: function(stream) {\\n      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));\\n    },\\n    clipExtent: function(_) {\\n      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n    },\\n    scale: function(_) {\\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\\n    },\\n    translate: function(_) {\\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\\n    },\\n    reflectX: function(_) {\\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\\n    },\\n    reflectY: function(_) {\\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\\n    },\\n    fitExtent: function(extent, object) {\\n      return fitExtent(projection, extent, object);\\n    },\\n    fitSize: function(size, object) {\\n      return fitSize(projection, size, object);\\n    }\\n  };\\n}\\n\",\"import {asin, cos, epsilon, sin} from \\\"../math\\\";\\nimport {azimuthalInvert} from \\\"./azimuthal\\\";\\nimport projection from \\\"./index\\\";\\n\\nexport function orthographicRaw(x, y) {\\n  return [cos(y) * sin(x), sin(y)];\\n}\\n\\northographicRaw.invert = azimuthalInvert(asin);\\n\\nexport default function() {\\n  return projection(orthographicRaw)\\n      .scale(249.5)\\n      .clipAngle(90 + epsilon);\\n}\\n\",\"import {atan, cos, sin} from \\\"../math\\\";\\nimport {azimuthalInvert} from \\\"./azimuthal\\\";\\nimport projection from \\\"./index\\\";\\n\\nexport function stereographicRaw(x, y) {\\n  var cy = cos(y), k = 1 + cos(x) * cy;\\n  return [cy * sin(x) / k, sin(y) / k];\\n}\\n\\nstereographicRaw.invert = azimuthalInvert(function(z) {\\n  return 2 * atan(z);\\n});\\n\\nexport default function() {\\n  return projection(stereographicRaw)\\n      .scale(250)\\n      .clipAngle(142);\\n}\\n\",\"import {atan, exp, halfPi, log, tan} from \\\"../math\\\";\\nimport {mercatorProjection} from \\\"./mercator\\\";\\n\\nexport function transverseMercatorRaw(lambda, phi) {\\n  return [log(tan((halfPi + phi) / 2)), -lambda];\\n}\\n\\ntransverseMercatorRaw.invert = function(x, y) {\\n  return [-y, 2 * atan(exp(x)) - halfPi];\\n};\\n\\nexport default function() {\\n  var m = mercatorProjection(transverseMercatorRaw),\\n      center = m.center,\\n      rotate = m.rotate;\\n\\n  m.center = function(_) {\\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\\n  };\\n\\n  m.rotate = function(_) {\\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\\n  };\\n\\n  return rotate([0, 0, 90])\\n      .scale(159.155);\\n}\\n\",\"export {default as geoArea} from \\\"./src/area\\\";\\nexport {default as geoBounds} from \\\"./src/bounds\\\";\\nexport {default as geoCentroid} from \\\"./src/centroid\\\";\\nexport {default as geoCircle} from \\\"./src/circle\\\";\\nexport {default as geoClipExtent} from \\\"./src/clip/extent\\\"; // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\\nexport {default as geoContains} from \\\"./src/contains\\\";\\nexport {default as geoDistance} from \\\"./src/distance\\\";\\nexport {default as geoGraticule, graticule10 as geoGraticule10} from \\\"./src/graticule\\\";\\nexport {default as geoInterpolate} from \\\"./src/interpolate\\\";\\nexport {default as geoLength} from \\\"./src/length\\\";\\nexport {default as geoPath} from \\\"./src/path/index\\\";\\nexport {default as geoAlbers} from \\\"./src/projection/albers\\\";\\nexport {default as geoAlbersUsa} from \\\"./src/projection/albersUsa\\\";\\nexport {default as geoAzimuthalEqualArea, azimuthalEqualAreaRaw as geoAzimuthalEqualAreaRaw} from \\\"./src/projection/azimuthalEqualArea\\\";\\nexport {default as geoAzimuthalEquidistant, azimuthalEquidistantRaw as geoAzimuthalEquidistantRaw} from \\\"./src/projection/azimuthalEquidistant\\\";\\nexport {default as geoConicConformal, conicConformalRaw as geoConicConformalRaw} from \\\"./src/projection/conicConformal\\\";\\nexport {default as geoConicEqualArea, conicEqualAreaRaw as geoConicEqualAreaRaw} from \\\"./src/projection/conicEqualArea\\\";\\nexport {default as geoConicEquidistant, conicEquidistantRaw as geoConicEquidistantRaw} from \\\"./src/projection/conicEquidistant\\\";\\nexport {default as geoEquirectangular, equirectangularRaw as geoEquirectangularRaw} from \\\"./src/projection/equirectangular\\\";\\nexport {default as geoGnomonic, gnomonicRaw as geoGnomonicRaw} from \\\"./src/projection/gnomonic\\\";\\nexport {default as geoIdentity} from \\\"./src/projection/identity\\\";\\nexport {default as geoProjection, projectionMutator as geoProjectionMutator} from \\\"./src/projection/index\\\";\\nexport {default as geoMercator, mercatorRaw as geoMercatorRaw} from \\\"./src/projection/mercator\\\";\\nexport {default as geoOrthographic, orthographicRaw as geoOrthographicRaw} from \\\"./src/projection/orthographic\\\";\\nexport {default as geoStereographic, stereographicRaw as geoStereographicRaw} from \\\"./src/projection/stereographic\\\";\\nexport {default as geoTransverseMercator, transverseMercatorRaw as geoTransverseMercatorRaw} from \\\"./src/projection/transverseMercator\\\";\\nexport {default as geoRotation} from \\\"./src/rotation\\\";\\nexport {default as geoStream} from \\\"./src/stream\\\";\\nexport {default as geoTransform} from \\\"./src/transform\\\";\\n\",\"export default function(a, b) {\\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\\n}\\n\",\"import ascending from \\\"./ascending\\\";\\nimport bisector from \\\"./bisector\\\";\\n\\nvar ascendingBisect = bisector(ascending);\\nexport var bisectRight = ascendingBisect.right;\\nexport var bisectLeft = ascendingBisect.left;\\nexport default bisectRight;\\n\",\"import ascending from \\\"./ascending\\\";\\n\\nexport default function(compare) {\\n  if (compare.length === 1) compare = ascendingComparator(compare);\\n  return {\\n    left: function(a, x, lo, hi) {\\n      if (lo == null) lo = 0;\\n      if (hi == null) hi = a.length;\\n      while (lo < hi) {\\n        var mid = lo + hi >>> 1;\\n        if (compare(a[mid], x) < 0) lo = mid + 1;\\n        else hi = mid;\\n      }\\n      return lo;\\n    },\\n    right: function(a, x, lo, hi) {\\n      if (lo == null) lo = 0;\\n      if (hi == null) hi = a.length;\\n      while (lo < hi) {\\n        var mid = lo + hi >>> 1;\\n        if (compare(a[mid], x) > 0) hi = mid;\\n        else lo = mid + 1;\\n      }\\n      return lo;\\n    }\\n  };\\n}\\n\\nfunction ascendingComparator(f) {\\n  return function(d, x) {\\n    return ascending(f(d), x);\\n  };\\n}\\n\",\"import {pair} from \\\"./pairs\\\";\\n\\nexport default function(values0, values1, reduce) {\\n  var n0 = values0.length,\\n      n1 = values1.length,\\n      values = new Array(n0 * n1),\\n      i0,\\n      i1,\\n      i,\\n      value0;\\n\\n  if (reduce == null) reduce = pair;\\n\\n  for (i0 = i = 0; i0 < n0; ++i0) {\\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\\n      values[i] = reduce(value0, values1[i1]);\\n    }\\n  }\\n\\n  return values;\\n}\\n\",\"var array = Array.prototype;\\n\\nexport var slice = array.slice;\\nexport var map = array.map;\\n\",\"export default function(start, stop, step) {\\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\\n\\n  var i = -1,\\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\\n      range = new Array(n);\\n\\n  while (++i < n) {\\n    range[i] = start + i * step;\\n  }\\n\\n  return range;\\n}\\n\",\"var e10 = Math.sqrt(50),\\n    e5 = Math.sqrt(10),\\n    e2 = Math.sqrt(2);\\n\\nexport default function(start, stop, count) {\\n  var reverse,\\n      i = -1,\\n      n,\\n      ticks,\\n      step;\\n\\n  stop = +stop, start = +start, count = +count;\\n  if (start === stop && count > 0) return [start];\\n  if (reverse = stop < start) n = start, start = stop, stop = n;\\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\\n\\n  if (step > 0) {\\n    start = Math.ceil(start / step);\\n    stop = Math.floor(stop / step);\\n    ticks = new Array(n = Math.ceil(stop - start + 1));\\n    while (++i < n) ticks[i] = (start + i) * step;\\n  } else {\\n    start = Math.floor(start * step);\\n    stop = Math.ceil(stop * step);\\n    ticks = new Array(n = Math.ceil(start - stop + 1));\\n    while (++i < n) ticks[i] = (start - i) / step;\\n  }\\n\\n  if (reverse) ticks.reverse();\\n\\n  return ticks;\\n}\\n\\nexport function tickIncrement(start, stop, count) {\\n  var step = (stop - start) / Math.max(0, count),\\n      power = Math.floor(Math.log(step) / Math.LN10),\\n      error = step / Math.pow(10, power);\\n  return power >= 0\\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\\n}\\n\\nexport function tickStep(start, stop, count) {\\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\\n      error = step0 / step1;\\n  if (error >= e10) step1 *= 10;\\n  else if (error >= e5) step1 *= 5;\\n  else if (error >= e2) step1 *= 2;\\n  return stop < start ? -step1 : step1;\\n}\\n\",\"export default function(values) {\\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\\n}\\n\",\"export default function(arrays) {\\n  var n = arrays.length,\\n      m,\\n      i = -1,\\n      j = 0,\\n      merged,\\n      array;\\n\\n  while (++i < n) j += arrays[i].length;\\n  merged = new Array(j);\\n\\n  while (--n >= 0) {\\n    array = arrays[n];\\n    m = array.length;\\n    while (--m >= 0) {\\n      merged[--j] = array[m];\\n    }\\n  }\\n\\n  return merged;\\n}\\n\",\"export {default as bisect, bisectRight, bisectLeft} from \\\"./bisect\\\";\\nexport {default as ascending} from \\\"./ascending\\\";\\nexport {default as bisector} from \\\"./bisector\\\";\\nexport {default as cross} from \\\"./cross\\\";\\nexport {default as descending} from \\\"./descending\\\";\\nexport {default as deviation} from \\\"./deviation\\\";\\nexport {default as extent} from \\\"./extent\\\";\\nexport {default as histogram} from \\\"./histogram\\\";\\nexport {default as thresholdFreedmanDiaconis} from \\\"./threshold/freedmanDiaconis\\\";\\nexport {default as thresholdScott} from \\\"./threshold/scott\\\";\\nexport {default as thresholdSturges} from \\\"./threshold/sturges\\\";\\nexport {default as max} from \\\"./max\\\";\\nexport {default as mean} from \\\"./mean\\\";\\nexport {default as median} from \\\"./median\\\";\\nexport {default as merge} from \\\"./merge\\\";\\nexport {default as min} from \\\"./min\\\";\\nexport {default as pairs} from \\\"./pairs\\\";\\nexport {default as permute} from \\\"./permute\\\";\\nexport {default as quantile} from \\\"./quantile\\\";\\nexport {default as range} from \\\"./range\\\";\\nexport {default as scan} from \\\"./scan\\\";\\nexport {default as shuffle} from \\\"./shuffle\\\";\\nexport {default as sum} from \\\"./sum\\\";\\nexport {default as ticks, tickIncrement, tickStep} from \\\"./ticks\\\";\\nexport {default as transpose} from \\\"./transpose\\\";\\nexport {default as variance} from \\\"./variance\\\";\\nexport {default as zip} from \\\"./zip\\\";\\n\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.replaceStrokeWidth = replaceStrokeWidth;\\nexports.createChoroplethStyles = createChoroplethStyles;\\nexports.calculateResizeFactor = calculateResizeFactor;\\nexports.calculateMousePosition = calculateMousePosition;\\nexports.isChildOfType = isChildOfType;\\nexports.createNewChildren = createNewChildren;\\nexports.roundPath = roundPath;\\nexports.createConnectorPath = createConnectorPath;\\nexports.createTextAnchor = createTextAnchor;\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction replaceStrokeWidth(styles) {\\n  var newStyles = {};\\n  Object.keys(styles).map(function (key, i) {\\n    if (key === \\\"strokeWidth\\\") newStyles[key] = \\\"inherit\\\";else newStyles[key] = styles[key];\\n  });\\n  return newStyles;\\n}\\n\\nfunction createChoroplethStyles(styles, choroplethValue) {\\n  if (choroplethValue) {\\n    var newStyles = {};\\n    Object.keys(styles).map(function (key, i) {\\n      if (key === \\\"fill\\\") newStyles[key] = choroplethValue.value;else newStyles[key] = styles[key];\\n    });\\n    return newStyles;\\n  } else {\\n    return styles;\\n  }\\n}\\n\\nfunction calculateResizeFactor(actualDimension, baseDimension) {\\n  return 1 / 100 * (100 / actualDimension * baseDimension);\\n}\\n\\nfunction calculateMousePosition(direction, projection, props, zoom, resizeFactor) {\\n  var center = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : props.center;\\n  var width = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : props.width;\\n  var height = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : props.height;\\n\\n  var reference = { x: 0, y: 1 };\\n  var reverseRotation = projection().rotate().map(function (item) {\\n    return -item;\\n  });\\n  return (projection().rotate(reverseRotation)([-center[0], -center[1]])[reference[direction]] - (reference[direction] === 0 ? width : height) / 2) * zoom * (1 / resizeFactor);\\n}\\n\\nfunction isChildOfType(child, expectedType) {\\n  return child.props.componentIdentifier === expectedType;\\n}\\n\\nfunction createNewChildren(children, props) {\\n  if (!children) return;\\n  if (!children.length) {\\n    return isChildOfType(children, \\\"Geographies\\\") ? _react2.default.cloneElement(children, {\\n      projection: props.projection\\n    }) : isChildOfType(children, \\\"Markers\\\") || isChildOfType(children, \\\"Annotation\\\") || isChildOfType(child, \\\"Graticule\\\") ? _react2.default.cloneElement(children, {\\n      projection: props.projection,\\n      zoom: props.zoom\\n    }) : children;\\n  } else {\\n    return children.map(function (child, i) {\\n      if (!child) return;\\n      return isChildOfType(child, \\\"Geographies\\\") ? _react2.default.cloneElement(child, {\\n        key: \\\"zoomable-child-\\\" + i,\\n        projection: props.projection\\n      }) : isChildOfType(child, \\\"Markers\\\") || isChildOfType(child, \\\"Annotation\\\") || isChildOfType(child, \\\"Graticule\\\") ? _react2.default.cloneElement(child, {\\n        key: \\\"zoomable-child-\\\" + i,\\n        projection: props.projection,\\n        zoom: props.zoom\\n      }) : child;\\n    });\\n  }\\n}\\n\\nfunction roundPath(path, precision) {\\n  if (!path) return;\\n  var query = /[\\\\d\\\\.-][\\\\d\\\\.e-]*/g;\\n  return path.replace(query, function (n) {\\n    return Math.round(n * (1 / precision)) / (1 / precision);\\n  });\\n}\\n\\nfunction createConnectorPath(connectorType, endPoint) {\\n  return \\\"M0,0 L\\\" + endPoint[0] + \\\",\\\" + endPoint[1];\\n}\\n\\nfunction createTextAnchor(dx) {\\n  if (dx > 0) return \\\"start\\\";else if (dx < 0) return \\\"end\\\";else return \\\"middle\\\";\\n}\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = {\\n  scale: 160,\\n  xOffset: 0,\\n  yOffset: 0,\\n  rotation: [0, 0, 0],\\n  precision: 0.1\\n};\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _ComposableMap = require(\\\"./ComposableMap\\\");\\n\\nObject.defineProperty(exports, \\\"ComposableMap\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_ComposableMap).default;\\n  }\\n});\\n\\nvar _ZoomableGroup = require(\\\"./ZoomableGroup\\\");\\n\\nObject.defineProperty(exports, \\\"ZoomableGroup\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_ZoomableGroup).default;\\n  }\\n});\\n\\nvar _Geographies = require(\\\"./Geographies\\\");\\n\\nObject.defineProperty(exports, \\\"Geographies\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_Geographies).default;\\n  }\\n});\\n\\nvar _Geography = require(\\\"./Geography\\\");\\n\\nObject.defineProperty(exports, \\\"Geography\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_Geography).default;\\n  }\\n});\\n\\nvar _Marker = require(\\\"./Marker\\\");\\n\\nObject.defineProperty(exports, \\\"Marker\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_Marker).default;\\n  }\\n});\\n\\nvar _Markers = require(\\\"./Markers\\\");\\n\\nObject.defineProperty(exports, \\\"Markers\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_Markers).default;\\n  }\\n});\\n\\nvar _Annotation = require(\\\"./Annotation\\\");\\n\\nObject.defineProperty(exports, \\\"Annotation\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_Annotation).default;\\n  }\\n});\\n\\nvar _Graticule = require(\\\"./Graticule\\\");\\n\\nObject.defineProperty(exports, \\\"Graticule\\\", {\\n  enumerable: true,\\n  get: function get() {\\n    return _interopRequireDefault(_Graticule).default;\\n  }\\n});\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _projections = require(\\\"./projections\\\");\\n\\nvar _projections2 = _interopRequireDefault(_projections);\\n\\nvar _projectionConfig = require(\\\"./projectionConfig\\\");\\n\\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar ComposableMap = function (_Component) {\\n  _inherits(ComposableMap, _Component);\\n\\n  function ComposableMap() {\\n    _classCallCheck(this, ComposableMap);\\n\\n    var _this = _possibleConstructorReturn(this, (ComposableMap.__proto__ || Object.getPrototypeOf(ComposableMap)).call(this));\\n\\n    _this.projection = _this.projection.bind(_this);\\n    return _this;\\n  }\\n\\n  _createClass(ComposableMap, [{\\n    key: \\\"projection\\\",\\n    value: function projection() {\\n      var _props = this.props,\\n          projection = _props.projection,\\n          projectionConfig = _props.projectionConfig,\\n          width = _props.width,\\n          height = _props.height;\\n\\n\\n      return typeof projection !== \\\"function\\\" ? (0, _projections2.default)(width, height, projectionConfig, projection) : projection(width, height, projectionConfig);\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _props2 = this.props,\\n          width = _props2.width,\\n          height = _props2.height,\\n          style = _props2.style,\\n          showCenter = _props2.showCenter,\\n          children = _props2.children;\\n\\n\\n      return _react2.default.createElement(\\n        \\\"svg\\\",\\n        { width: width,\\n          height: height,\\n          viewBox: \\\"0 0 \\\" + width + \\\" \\\" + height,\\n          className: \\\"rsm-svg\\\",\\n          style: style },\\n        _react2.default.cloneElement(this.props.children, {\\n          projection: this.projection,\\n          width: width,\\n          height: height\\n        }),\\n        showCenter && _react2.default.createElement(\\n          \\\"g\\\",\\n          null,\\n          _react2.default.createElement(\\\"rect\\\", { x: width / 2 - 0.5, y: 0, width: 1, height: height, fill: \\\"#e91e63\\\" }),\\n          _react2.default.createElement(\\\"rect\\\", { x: 0, y: height / 2 - 0.5, width: width, height: 1, fill: \\\"#e91e63\\\" })\\n        )\\n      );\\n    }\\n  }]);\\n\\n  return ComposableMap;\\n}(_react.Component);\\n\\nComposableMap.defaultProps = {\\n  width: 800,\\n  height: 450,\\n  projection: \\\"times\\\",\\n  projectionConfig: _projectionConfig2.default\\n};\\n\\nexports.default = ComposableMap;\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nexports.default = function (width, height, config, projectionName) {\\n\\n  var scale = config.scale || _projectionConfig2.default.scale;\\n  var xOffset = config.xOffset || _projectionConfig2.default.xOffset;\\n  var yOffset = config.yOffset || _projectionConfig2.default.yOffset;\\n  var rotation = config.rotation || _projectionConfig2.default.rotation;\\n  var precision = config.precision || _projectionConfig2.default.precision;\\n\\n  return projectionReference[projectionName]().scale(scale).translate([xOffset + width / 2, yOffset + height / 2]).rotate(rotation).precision(precision);\\n};\\n\\nvar _d3GeoProjection = require(\\\"d3-geo-projection\\\");\\n\\nvar _d3Geo = require(\\\"d3-geo\\\");\\n\\nvar _projectionConfig = require(\\\"./projectionConfig\\\");\\n\\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar projectionReference = {\\n  mercator: _d3Geo.geoMercator,\\n  miller: _d3GeoProjection.geoMiller,\\n  times: _d3GeoProjection.geoTimes,\\n  robinson: _d3GeoProjection.geoRobinson,\\n  winkel3: _d3GeoProjection.geoWinkel3,\\n  eckert4: _d3GeoProjection.geoEckert4\\n};\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _d3Geo = require(\\\"d3-geo\\\");\\n\\nvar _utils = require(\\\"./utils\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar ZoomableGroup = function (_Component) {\\n  _inherits(ZoomableGroup, _Component);\\n\\n  function ZoomableGroup(props) {\\n    _classCallCheck(this, ZoomableGroup);\\n\\n    var _this = _possibleConstructorReturn(this, (ZoomableGroup.__proto__ || Object.getPrototypeOf(ZoomableGroup)).call(this, props));\\n\\n    var backdropX = props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\\n    var backdropY = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\\n    var backdropWidth = props.projection().rotate([0, 0, 0])([props.backdrop.x[1], 0])[0] - props.projection().rotate([0, 0, 0])([props.backdrop.x[0], 0])[0];\\n    var backdropHeight = props.projection().rotate([0, 0, 0])([0, props.backdrop.y[1]])[1] - props.projection().rotate([0, 0, 0])([0, props.backdrop.y[0]])[1];\\n\\n    _this.state = {\\n      mouseX: (0, _utils.calculateMousePosition)(\\\"x\\\", props.projection, props, props.zoom, 1),\\n      mouseY: (0, _utils.calculateMousePosition)(\\\"y\\\", props.projection, props, props.zoom, 1),\\n      mouseXStart: 0,\\n      mouseYStart: 0,\\n      isPressed: false,\\n      resizeFactorX: 1,\\n      resizeFactorY: 1,\\n      backdrop: {\\n        width: Math.round(backdropWidth),\\n        height: Math.round(backdropHeight),\\n        x: Math.round(backdropX),\\n        y: Math.round(backdropY)\\n      }\\n    };\\n\\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\\n    _this.handleResize = _this.handleResize.bind(_this);\\n    return _this;\\n  }\\n\\n  _createClass(ZoomableGroup, [{\\n    key: \\\"handleMouseMove\\\",\\n    value: function handleMouseMove(_ref) {\\n      var pageX = _ref.pageX,\\n          pageY = _ref.pageY;\\n\\n      if (this.props.disablePanning) return;\\n\\n      if (this.state.isPressed) {\\n        this.setState({\\n          mouseX: pageX - this.state.mouseXStart,\\n          mouseY: pageY - this.state.mouseYStart\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"handleMouseUp\\\",\\n    value: function handleMouseUp() {\\n      if (this.props.disablePanning) return;\\n      if (this.state.isPressed) {\\n        this.setState({\\n          isPressed: false\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"handleMouseDown\\\",\\n    value: function handleMouseDown(_ref2) {\\n      var pageX = _ref2.pageX,\\n          pageY = _ref2.pageY;\\n\\n      if (this.props.disablePanning) return;\\n      this.setState({\\n        isPressed: true,\\n        mouseXStart: pageX - this.state.mouseX,\\n        mouseYStart: pageY - this.state.mouseY\\n      });\\n    }\\n  }, {\\n    key: \\\"componentWillReceiveProps\\\",\\n    value: function componentWillReceiveProps(nextProps) {\\n      var _state = this.state,\\n          mouseX = _state.mouseX,\\n          mouseY = _state.mouseY,\\n          resizeFactorX = _state.resizeFactorX,\\n          resizeFactorY = _state.resizeFactorY;\\n      var _props = this.props,\\n          projection = _props.projection,\\n          center = _props.center,\\n          zoom = _props.zoom;\\n\\n\\n      var zoomFactor = nextProps.zoom / zoom;\\n      var centerChanged = JSON.stringify(nextProps.center) !== JSON.stringify(center);\\n\\n      this.setState({\\n        zoom: nextProps.zoom,\\n        mouseX: centerChanged ? (0, _utils.calculateMousePosition)(\\\"x\\\", projection, nextProps, nextProps.zoom, resizeFactorX) : mouseX * zoomFactor,\\n        mouseY: centerChanged ? (0, _utils.calculateMousePosition)(\\\"y\\\", projection, nextProps, nextProps.zoom, resizeFactorY) : mouseY * zoomFactor\\n      });\\n    }\\n  }, {\\n    key: \\\"handleResize\\\",\\n    value: function handleResize() {\\n      var _props2 = this.props,\\n          width = _props2.width,\\n          height = _props2.height,\\n          projection = _props2.projection,\\n          zoom = _props2.zoom;\\n\\n\\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\\n\\n      var xPercentageChange = 1 / resizeFactorX * this.state.resizeFactorX;\\n      var yPercentageChange = 1 / resizeFactorY * this.state.resizeFactorY;\\n\\n      this.setState({\\n        resizeFactorX: resizeFactorX,\\n        resizeFactorY: resizeFactorY,\\n        mouseX: this.state.mouseX * xPercentageChange,\\n        mouseY: this.state.mouseY * yPercentageChange\\n      });\\n    }\\n  }, {\\n    key: \\\"componentDidMount\\\",\\n    value: function componentDidMount() {\\n      var _props3 = this.props,\\n          width = _props3.width,\\n          height = _props3.height,\\n          projection = _props3.projection,\\n          zoom = _props3.zoom;\\n\\n\\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\\n\\n      this.setState({\\n        resizeFactorX: resizeFactorX,\\n        resizeFactorY: resizeFactorY,\\n        mouseX: (0, _utils.calculateMousePosition)(\\\"x\\\", projection, this.props, zoom, resizeFactorX),\\n        mouseY: (0, _utils.calculateMousePosition)(\\\"y\\\", projection, this.props, zoom, resizeFactorY)\\n      });\\n\\n      window.addEventListener(\\\"resize\\\", this.handleResize);\\n      window.addEventListener('mouseup', this.handleMouseUp);\\n    }\\n  }, {\\n    key: \\\"componentWillUnmount\\\",\\n    value: function componentWillUnmount() {\\n      window.removeEventListener(\\\"resize\\\", this.handleResize);\\n      window.removeEventListener(\\\"mouseup\\\", this.handleMouseUp);\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      var _props4 = this.props,\\n          width = _props4.width,\\n          height = _props4.height,\\n          zoom = _props4.zoom,\\n          style = _props4.style,\\n          projection = _props4.projection,\\n          children = _props4.children;\\n      var _state2 = this.state,\\n          mouseX = _state2.mouseX,\\n          mouseY = _state2.mouseY,\\n          resizeFactorX = _state2.resizeFactorX,\\n          resizeFactorY = _state2.resizeFactorY;\\n\\n\\n      return _react2.default.createElement(\\n        \\\"g\\\",\\n        { className: \\\"rsm-zoomable-group\\\",\\n          ref: function ref(zoomableGroupNode) {\\n            return _this2.zoomableGroupNode = zoomableGroupNode;\\n          },\\n          transform: \\\"\\\\n           translate(\\\\n             \\\" + Math.round((width / 2 + resizeFactorX * mouseX) * 100) / 100 + \\\"\\\\n             \\\" + Math.round((height / 2 + resizeFactorY * mouseY) * 100) / 100 + \\\"\\\\n           )\\\\n           scale(\\\" + zoom + \\\")\\\\n           translate(\\\" + -width / 2 + \\\" \\\" + -height / 2 + \\\")\\\\n         \\\",\\n          onMouseMove: this.handleMouseMove,\\n          onMouseUp: this.handleMouseUp,\\n          onMouseDown: this.handleMouseDown,\\n          style: style\\n        },\\n        _react2.default.createElement(\\\"rect\\\", {\\n          x: this.state.backdrop.x,\\n          y: this.state.backdrop.y,\\n          width: this.state.backdrop.width,\\n          height: this.state.backdrop.height,\\n          fill: \\\"transparent\\\",\\n          style: { strokeWidth: 0 }\\n        }),\\n        (0, _utils.createNewChildren)(children, this.props)\\n      );\\n    }\\n  }]);\\n\\n  return ZoomableGroup;\\n}(_react.Component);\\n\\nZoomableGroup.defaultProps = {\\n  center: [0, 0],\\n  backdrop: {\\n    x: [-179.9, 179.9],\\n    y: [89.9, -89.9]\\n  },\\n  zoom: 1,\\n  disablePanning: false\\n};\\n\\nexports.default = ZoomableGroup;\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _topojsonClient = require(\\\"topojson-client\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Geographies = function (_Component) {\\n  _inherits(Geographies, _Component);\\n\\n  function Geographies(props) {\\n    _classCallCheck(this, Geographies);\\n\\n    var _this = _possibleConstructorReturn(this, (Geographies.__proto__ || Object.getPrototypeOf(Geographies)).call(this, props));\\n\\n    _this.state = {\\n      geographyPaths: props.geographyPaths\\n    };\\n\\n    _this.fetchGeographies = _this.fetchGeographies.bind(_this);\\n    return _this;\\n  }\\n\\n  _createClass(Geographies, [{\\n    key: \\\"fetchGeographies\\\",\\n    value: function fetchGeographies(geographyUrl) {\\n      var _this2 = this;\\n\\n      var _props = this.props,\\n          width = _props.width,\\n          height = _props.height;\\n\\n\\n      if (!geographyUrl) return;\\n\\n      var request = new XMLHttpRequest();\\n      request.open(\\\"GET\\\", geographyUrl, true);\\n\\n      request.onload = function () {\\n        if (request.status >= 200 && request.status < 400) {\\n          var geographyPaths = JSON.parse(request.responseText);\\n          _this2.setState({\\n            geographyPaths: (0, _topojsonClient.feature)(geographyPaths, geographyPaths.objects[Object.keys(geographyPaths.objects)[0]]).features\\n          }, function () {\\n            if (!_this2.props.onGeographiesLoaded) return;\\n            _this2.props.onGeographyPathsLoaded(String(request.status));\\n          });\\n        } else {\\n          if (!_this2.props.onGeographiesLoaded) return;\\n          _this2.props.onGeographyPathsLoaded(String(request.status));\\n        }\\n      };\\n      request.onerror = function () {\\n        console.log(\\\"There was a connection error...\\\");\\n      };\\n      request.send();\\n    }\\n  }, {\\n    key: \\\"componentWillReceiveProps\\\",\\n    value: function componentWillReceiveProps(nextProps) {\\n      ;\\n      if (!nextProps.geographyUrl && !nextProps.geographyPaths.length !== this.props.geographyPaths.length) {\\n        this.setState({\\n          geographyPaths: nextProps.geographyPaths\\n        });\\n        return;\\n      }\\n      if (nextProps.geographyUrl !== this.props.geographyUrl) {\\n        this.fetchGeographies(nextProps.geographyUrl);\\n      }\\n    }\\n  }, {\\n    key: \\\"shouldComponentUpdate\\\",\\n    value: function shouldComponentUpdate(nextProps, nextState) {\\n      var geoPathsChanged = nextState.geographyPaths.length !== this.state.geographyPaths.length;\\n      var choroplethChanged = JSON.stringify(nextProps.choropleth) !== JSON.stringify(this.props.choropleth);\\n      return geoPathsChanged || choroplethChanged || nextProps.disableOptimization;\\n    }\\n  }, {\\n    key: \\\"componentDidMount\\\",\\n    value: function componentDidMount() {\\n      this.fetchGeographies(this.props.geographyUrl);\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _props2 = this.props,\\n          projection = _props2.projection,\\n          style = _props2.style,\\n          children = _props2.children;\\n\\n\\n      return _react2.default.createElement(\\n        \\\"g\\\",\\n        { className: \\\"rsm-geographies\\\", style: style },\\n        children(this.state.geographyPaths, projection)\\n      );\\n    }\\n  }]);\\n\\n  return Geographies;\\n}(_react.Component);\\n\\nGeographies.defaultProps = {\\n  componentIdentifier: \\\"Geographies\\\",\\n  disableOptimization: false,\\n  geographyUrl: \\\"\\\",\\n  geographyPaths: []\\n};\\n\\nexports.default = Geographies;\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _d3Geo = require(\\\"d3-geo\\\");\\n\\nvar _utils = require(\\\"./utils\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar pathCache = {};\\n\\nvar renderPath = function renderPath(cacheId, geography, projection, round, precision) {\\n  if (pathCache[cacheId]) return pathCache[cacheId];\\n\\n  var pathString = cacheId ? pathCache[cacheId] ? pathCache[cacheId] : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography) : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection())(geography), precision) : (0, _d3Geo.geoPath)().projection(projection())(geography);\\n\\n  if (cacheId) pathCache[cacheId] = pathString;\\n\\n  return pathString;\\n};\\n\\nvar Geography = function (_Component) {\\n  _inherits(Geography, _Component);\\n\\n  function Geography() {\\n    _classCallCheck(this, Geography);\\n\\n    var _this = _possibleConstructorReturn(this, (Geography.__proto__ || Object.getPrototypeOf(Geography)).call(this));\\n\\n    _this.state = {\\n      hover: false,\\n      pressed: false\\n    };\\n\\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\\n    _this.handleFocus = _this.handleFocus.bind(_this);\\n    _this.handleBlur = _this.handleBlur.bind(_this);\\n    return _this;\\n  }\\n\\n  _createClass(Geography, [{\\n    key: \\\"handleMouseClick\\\",\\n    value: function handleMouseClick(evt) {\\n      evt.persist();\\n      var _props = this.props,\\n          onClick = _props.onClick,\\n          geography = _props.geography;\\n\\n      return onClick && onClick(geography, evt);\\n    }\\n  }, {\\n    key: \\\"handleMouseEnter\\\",\\n    value: function handleMouseEnter(evt) {\\n      evt.persist();\\n      var _props2 = this.props,\\n          onMouseEnter = _props2.onMouseEnter,\\n          geography = _props2.geography;\\n\\n      this.setState({\\n        hover: true\\n      }, function () {\\n        return onMouseEnter && onMouseEnter(geography, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleMouseMove\\\",\\n    value: function handleMouseMove(evt) {\\n      evt.persist();\\n      if (this.state.pressed) return;\\n      var _props3 = this.props,\\n          onMouseMove = _props3.onMouseMove,\\n          geography = _props3.geography;\\n\\n      if (!this.state.hover) {\\n        this.setState({\\n          hover: true\\n        }, function () {\\n          return onMouseMove && onMouseMove(geography, evt);\\n        });\\n      } else if (onMouseMove) onMouseMove(geography, evt);else return;\\n    }\\n  }, {\\n    key: \\\"handleMouseLeave\\\",\\n    value: function handleMouseLeave(evt) {\\n      evt.persist();\\n      var _props4 = this.props,\\n          onMouseLeave = _props4.onMouseLeave,\\n          geography = _props4.geography;\\n\\n      this.setState({\\n        hover: false,\\n        pressed: false\\n      }, function () {\\n        return onMouseLeave && onMouseLeave(geography, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleMouseDown\\\",\\n    value: function handleMouseDown(evt) {\\n      evt.persist();\\n      var _props5 = this.props,\\n          onMouseDown = _props5.onMouseDown,\\n          geography = _props5.geography;\\n\\n      this.setState({\\n        pressed: true\\n      }, function () {\\n        return onMouseDown && onMouseDown(geography, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleMouseUp\\\",\\n    value: function handleMouseUp(evt) {\\n      evt.persist();\\n      var _props6 = this.props,\\n          onMouseUp = _props6.onMouseUp,\\n          geography = _props6.geography;\\n\\n      this.setState({\\n        pressed: false\\n      }, function () {\\n        return onMouseUp && onMouseUp(geography, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleFocus\\\",\\n    value: function handleFocus(evt) {\\n      evt.persist();\\n      var _props7 = this.props,\\n          onFocus = _props7.onFocus,\\n          geography = _props7.geography;\\n\\n      this.setState({\\n        hover: true\\n      }, function () {\\n        return onFocus && onFocus(geography, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleBlur\\\",\\n    value: function handleBlur(evt) {\\n      evt.persist();\\n      var _props8 = this.props,\\n          onBlur = _props8.onBlur,\\n          geography = _props8.geography;\\n\\n      this.setState({\\n        hover: false\\n      }, function () {\\n        return onBlur && onBlur(geography, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      var _props9 = this.props,\\n          geography = _props9.geography,\\n          projection = _props9.projection,\\n          round = _props9.round,\\n          cacheId = _props9.cacheId,\\n          precision = _props9.precision,\\n          tabable = _props9.tabable,\\n          style = _props9.style;\\n      var _state = this.state,\\n          hover = _state.hover,\\n          pressed = _state.pressed;\\n\\n\\n      var pathString = renderPath(cacheId, geography, projection, round, precision);\\n\\n      var excludeProps = [\\\"geography\\\", \\\"projection\\\", \\\"round\\\", \\\"cacheId\\\", \\\"precision\\\", \\\"tabable\\\", \\\"style\\\", \\\"onClick\\\", \\\"onMouseEnter\\\", \\\"onMouseMove\\\", \\\"onMouseLeave\\\", \\\"onMouseDown\\\", \\\"onMouseUp\\\", \\\"onFocus\\\", \\\"onBlur\\\"];\\n\\n      var restProps = Object.keys(this.props).filter(function (key) {\\n        return excludeProps.indexOf(key) === -1;\\n      }).reduce(function (obj, key) {\\n        obj[key] = _this2.props[key];\\n        return obj;\\n      }, {});\\n\\n      return _react2.default.createElement(\\\"path\\\", _extends({\\n        d: pathString,\\n        className: \\\"rsm-geography\\\" + (pressed ? \\\" rsm-geography--pressed\\\" : \\\"\\\") + (hover ? \\\" rsm-geography--hover\\\" : \\\"\\\"),\\n        style: style[pressed || hover ? pressed ? \\\"pressed\\\" : \\\"hover\\\" : \\\"default\\\"],\\n        onClick: this.handleMouseClick,\\n        onMouseEnter: this.handleMouseEnter,\\n        onMouseMove: this.handleMouseMove,\\n        onMouseLeave: this.handleMouseLeave,\\n        onMouseDown: this.handleMouseDown,\\n        onMouseUp: this.handleMouseUp,\\n        onFocus: tabable && this.handleFocus,\\n        onBlur: tabable && this.handleBlur,\\n        tabIndex: tabable ? 0 : -1\\n      }, restProps));\\n    }\\n  }]);\\n\\n  return Geography;\\n}(_react.Component);\\n\\nGeography.defaultProps = {\\n  precision: 0.1,\\n  cacheId: null,\\n  round: false,\\n  tabable: true,\\n  style: {\\n    default: {},\\n    hover: {},\\n    pressed: {}\\n  }\\n};\\n\\nexports.default = Geography;\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Marker = function (_Component) {\\n  _inherits(Marker, _Component);\\n\\n  function Marker() {\\n    _classCallCheck(this, Marker);\\n\\n    var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this));\\n\\n    _this.state = {\\n      hover: false,\\n      pressed: false\\n    };\\n\\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\\n    _this.handleFocus = _this.handleFocus.bind(_this);\\n    _this.handleBlur = _this.handleBlur.bind(_this);\\n    return _this;\\n  }\\n\\n  _createClass(Marker, [{\\n    key: \\\"handleMouseEnter\\\",\\n    value: function handleMouseEnter(evt) {\\n      evt.persist();\\n      var _props = this.props,\\n          onMouseEnter = _props.onMouseEnter,\\n          marker = _props.marker;\\n\\n      this.setState({\\n        hover: true\\n      }, function () {\\n        return onMouseEnter && onMouseEnter(marker, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleMouseMove\\\",\\n    value: function handleMouseMove(evt) {\\n      evt.persist();\\n      if (this.state.pressed) return;\\n      var _props2 = this.props,\\n          onMouseMove = _props2.onMouseMove,\\n          marker = _props2.marker;\\n\\n      if (!this.state.hover) {\\n        this.setState({\\n          hover: true\\n        }, function () {\\n          return onMouseMove && onMouseMove(marker, evt);\\n        });\\n      } else if (onMouseMove) onMouseMove(marker, evt);else return;\\n    }\\n  }, {\\n    key: \\\"handleMouseLeave\\\",\\n    value: function handleMouseLeave(evt) {\\n      evt.persist();\\n      var _props3 = this.props,\\n          onMouseLeave = _props3.onMouseLeave,\\n          marker = _props3.marker;\\n\\n      this.setState({\\n        hover: false\\n      }, function () {\\n        return onMouseLeave && onMouseLeave(marker, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleMouseDown\\\",\\n    value: function handleMouseDown(evt) {\\n      evt.persist();\\n      var _props4 = this.props,\\n          onMouseDown = _props4.onMouseDown,\\n          marker = _props4.marker;\\n\\n      this.setState({\\n        pressed: true\\n      }, function () {\\n        return onMouseDown && onMouseDown(marker, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleMouseUp\\\",\\n    value: function handleMouseUp(evt) {\\n      evt.persist();\\n      var _props5 = this.props,\\n          onMouseUp = _props5.onMouseUp,\\n          marker = _props5.marker;\\n\\n      this.setState({\\n        pressed: false\\n      }, function () {\\n        return onMouseUp && onMouseUp(marker, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleMouseClick\\\",\\n    value: function handleMouseClick(evt) {\\n      if (!this.props.onClick) return;\\n      evt.persist();\\n      var _props6 = this.props,\\n          onClick = _props6.onClick,\\n          marker = _props6.marker,\\n          projection = _props6.projection;\\n\\n      return onClick && onClick(marker, projection()(marker.coordinates), evt);\\n    }\\n  }, {\\n    key: \\\"handleFocus\\\",\\n    value: function handleFocus(evt) {\\n      evt.persist();\\n      var _props7 = this.props,\\n          onFocus = _props7.onFocus,\\n          marker = _props7.marker;\\n\\n      this.setState({\\n        hover: true\\n      }, function () {\\n        return onFocus && onFocus(marker, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"handleBlur\\\",\\n    value: function handleBlur(evt) {\\n      evt.persist();\\n      var _props8 = this.props,\\n          onBlur = _props8.onBlur,\\n          marker = _props8.marker;\\n\\n      this.setState({\\n        hover: false\\n      }, function () {\\n        return onBlur && onBlur(marker, evt);\\n      });\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _props9 = this.props,\\n          projection = _props9.projection,\\n          marker = _props9.marker,\\n          style = _props9.style,\\n          tabable = _props9.tabable,\\n          children = _props9.children;\\n      var _state = this.state,\\n          pressed = _state.pressed,\\n          hover = _state.hover;\\n\\n\\n      return _react2.default.createElement(\\n        \\\"g\\\",\\n        { className: \\\"rsm-marker\\\" + (pressed ? \\\" rsm-marker--pressed\\\" : \\\"\\\") + (hover ? \\\" rsm-marker--hover\\\" : \\\"\\\"),\\n          transform: \\\"translate(\\\\n           \\\" + projection()(marker.coordinates)[0] + \\\"\\\\n           \\\" + projection()(marker.coordinates)[1] + \\\"\\\\n         )\\\",\\n          style: style[pressed || hover ? pressed ? \\\"pressed\\\" : \\\"hover\\\" : \\\"default\\\"],\\n          onMouseEnter: this.handleMouseEnter,\\n          onMouseLeave: this.handleMouseLeave,\\n          onMouseDown: this.handleMouseDown,\\n          onMouseUp: this.handleMouseUp,\\n          onClick: this.handleMouseClick,\\n          onMouseMove: this.handleMouseMove,\\n          onFocus: this.handleFocus,\\n          onBlur: this.handleBlur,\\n          tabIndex: tabable ? 0 : -1\\n        },\\n        children\\n      );\\n    }\\n  }]);\\n\\n  return Marker;\\n}(_react.Component);\\n\\nMarker.defaultProps = {\\n  style: {\\n    default: {},\\n    hover: {},\\n    pressed: {}\\n  },\\n  marker: {\\n    coordinates: [0, 0]\\n  },\\n  tabable: true\\n};\\n\\nexports.default = Marker;\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Markers = function (_Component) {\\n  _inherits(Markers, _Component);\\n\\n  function Markers() {\\n    _classCallCheck(this, Markers);\\n\\n    return _possibleConstructorReturn(this, (Markers.__proto__ || Object.getPrototypeOf(Markers)).apply(this, arguments));\\n  }\\n\\n  _createClass(Markers, [{\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _props = this.props,\\n          children = _props.children,\\n          projection = _props.projection,\\n          style = _props.style;\\n\\n\\n      return _react2.default.createElement(\\n        \\\"g\\\",\\n        { className: \\\"rsm-markers\\\", style: style },\\n        !children ? null : children.length === undefined ? _react2.default.cloneElement(children, {\\n          projection: projection\\n        }) : children.map(function (child, i) {\\n          return !child ? null : _react2.default.cloneElement(child, {\\n            key: child.key || \\\"marker-\\\" + i,\\n            projection: projection\\n          });\\n        })\\n      );\\n    }\\n  }]);\\n\\n  return Markers;\\n}(_react.Component);\\n\\nMarkers.defaultProps = {\\n  componentIdentifier: \\\"Markers\\\"\\n};\\n\\nexports.default = Markers;\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _utils = require(\\\"./utils\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Annotation = function (_Component) {\\n  _inherits(Annotation, _Component);\\n\\n  function Annotation() {\\n    _classCallCheck(this, Annotation);\\n\\n    return _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).apply(this, arguments));\\n  }\\n\\n  _createClass(Annotation, [{\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _props = this.props,\\n          projection = _props.projection,\\n          subject = _props.subject,\\n          style = _props.style,\\n          dx = _props.dx,\\n          dy = _props.dy,\\n          zoom = _props.zoom,\\n          stroke = _props.stroke,\\n          strokeWidth = _props.strokeWidth,\\n          children = _props.children;\\n\\n\\n      var connectorPath = (0, _utils.createConnectorPath)(null, [-dx / zoom, -dy / zoom]);\\n\\n      return _react2.default.createElement(\\n        \\\"g\\\",\\n        {\\n          className: \\\"rsm-annotation\\\",\\n          style: { style: style },\\n          transform: \\\"translate(\\\\n          \\\" + (projection()(subject)[0] + dx / zoom) + \\\"\\\\n          \\\" + (projection()(subject)[1] + dy / zoom) + \\\"\\\\n        )\\\",\\n          textAnchor: (0, _utils.createTextAnchor)(dx)\\n        },\\n        children,\\n        _react2.default.createElement(\\\"path\\\", { d: connectorPath, stroke: stroke, strokeWidth: strokeWidth })\\n      );\\n    }\\n  }]);\\n\\n  return Annotation;\\n}(_react.Component);\\n\\nAnnotation.defaultProps = {\\n  componentIdentifier: \\\"Annotation\\\",\\n  stroke: \\\"#000000\\\",\\n  strokeWidth: 1,\\n  zoom: 1\\n};\\n\\nexports.default = Annotation;\",\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _d3Geo = require(\\\"d3-geo\\\");\\n\\nvar _utils = require(\\\"./utils\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar computeGraticule = function computeGraticule(projection, step) {\\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().step(step)());\\n};\\n\\nvar computeOutline = function computeOutline(projection) {\\n  return (0, _d3Geo.geoPath)().projection(projection())((0, _d3Geo.geoGraticule)().outline());\\n};\\n\\nvar Graticule = function (_Component) {\\n  _inherits(Graticule, _Component);\\n\\n  function Graticule() {\\n    _classCallCheck(this, Graticule);\\n\\n    var _this = _possibleConstructorReturn(this, (Graticule.__proto__ || Object.getPrototypeOf(Graticule)).call(this));\\n\\n    _this.state = {\\n      renderGraticule: false,\\n      graticulePath: \\\"\\\",\\n      outlinePath: \\\"\\\"\\n    };\\n    _this.renderGraticule = _this.renderGraticule.bind(_this);\\n    return _this;\\n  }\\n\\n  _createClass(Graticule, [{\\n    key: \\\"componentDidMount\\\",\\n    value: function componentDidMount() {\\n      this.renderGraticule();\\n    }\\n  }, {\\n    key: \\\"renderGraticule\\\",\\n    value: function renderGraticule() {\\n      var _props = this.props,\\n          step = _props.step,\\n          projection = _props.projection,\\n          round = _props.round,\\n          precision = _props.precision;\\n\\n\\n      this.setState({\\n        renderGraticule: true,\\n        graticulePath: round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\\n        outlinePath: round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\\n      });\\n    }\\n  }, {\\n    key: \\\"componentWillReceiveProps\\\",\\n    value: function componentWillReceiveProps(nextProps) {\\n      var _props2 = this.props,\\n          step = _props2.step,\\n          projection = _props2.projection,\\n          round = _props2.round,\\n          precision = _props2.precision;\\n\\n\\n      if (nextProps.round !== round || nextProps.precision !== precision) {\\n        this.setState({\\n          graticulePath: nextProps.round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\\n          outlinePath: nextProps.round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"shouldComponentUpdate\\\",\\n    value: function shouldComponentUpdate(nextProps) {\\n      return nextProps.disableOptimization;\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _props3 = this.props,\\n          zoom = _props3.zoom,\\n          style = _props3.style,\\n          outline = _props3.outline,\\n          fill = _props3.fill,\\n          stroke = _props3.stroke;\\n\\n\\n      return this.state.renderGraticule && _react2.default.createElement(\\n        \\\"g\\\",\\n        { className: \\\"rsm-graticule\\\" },\\n        _react2.default.createElement(\\\"path\\\", {\\n          fill: fill,\\n          stroke: stroke,\\n          d: this.state.graticulePath,\\n          style: style\\n        }),\\n        outline && _react2.default.createElement(\\\"path\\\", {\\n          fill: fill,\\n          stroke: stroke,\\n          d: this.state.outlinePath,\\n          style: style\\n        })\\n      );\\n    }\\n  }]);\\n\\n  return Graticule;\\n}(_react.Component);\\n\\nGraticule.defaultProps = {\\n  componentIdentifier: \\\"Graticule\\\",\\n  disableOptimization: true,\\n  round: true,\\n  precision: 0.1,\\n  step: [10, 10],\\n  outline: true,\\n  stroke: \\\"#DDDDDD\\\",\\n  fill: \\\"transparent\\\",\\n  style: {\\n    pointerEvents: \\\"none\\\"\\n  }\\n};\\n\\nexports.default = Graticule;\",\"export var abs = Math.abs;\\nexport var atan = Math.atan;\\nexport var atan2 = Math.atan2;\\nexport var ceil = Math.ceil;\\nexport var cos = Math.cos;\\nexport var exp = Math.exp;\\nexport var floor = Math.floor;\\nexport var log = Math.log;\\nexport var max = Math.max;\\nexport var min = Math.min;\\nexport var pow = Math.pow;\\nexport var round = Math.round;\\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\\nexport var sin = Math.sin;\\nexport var tan = Math.tan;\\n\\nexport var epsilon = 1e-6;\\nexport var epsilon2 = 1e-12;\\nexport var pi = Math.PI;\\nexport var halfPi = pi / 2;\\nexport var quarterPi = pi / 4;\\nexport var sqrt1_2 = Math.SQRT1_2;\\nexport var sqrt2 = sqrt(2);\\nexport var sqrtPi = sqrt(pi);\\nexport var tau = pi * 2;\\nexport var degrees = 180 / pi;\\nexport var radians = pi / 180;\\n\\nexport function sinci(x) {\\n  return x ? x / Math.sin(x) : 1;\\n}\\n\\nexport function asin(x) {\\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\\n}\\n\\nexport function acos(x) {\\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\\n}\\n\\nexport function sqrt(x) {\\n  return x > 0 ? Math.sqrt(x) : 0;\\n}\\n\\nexport function tanh(x) {\\n  x = exp(2 * x);\\n  return (x - 1) / (x + 1);\\n}\\n\\nexport function sinh(x) {\\n  return (exp(x) - exp(-x)) / 2;\\n}\\n\\nexport function cosh(x) {\\n  return (exp(x) + exp(-x)) / 2;\\n}\\n\\nexport function arsinh(x) {\\n  return log(x + sqrt(x * x + 1));\\n}\\n\\nexport function arcosh(x) {\\n  return log(x + sqrt(x * x - 1));\\n}\\n\",\"import {geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \\\"./math\\\";\\n\\nexport function airyRaw(beta) {\\n  var tanBeta_2 = tan(beta / 2),\\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\\n\\n  function forward(x, y) {\\n    var cosx = cos(x),\\n        cosy = cos(y),\\n        siny = sin(y),\\n        cosz = cosy * cosx,\\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\\n    return [k * cosy * sin(x), k * siny];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var r = sqrt(x * x + y * y),\\n        z = -beta / 2,\\n        i = 50, delta;\\n    if (!r) return [0, 0];\\n    do {\\n      var z_2 = z / 2,\\n          cosz_2 = cos(z_2),\\n          sinz_2 = sin(z_2),\\n          tanz_2 = tan(z_2),\\n          lnsecz_2 = log(1 / cosz_2);\\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));\\n    } while (abs(delta) > epsilon && --i > 0);\\n    var sinz = sin(z);\\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  var beta = halfPi,\\n      m = projectionMutator(airyRaw),\\n      p = m(beta);\\n\\n  p.radius = function(_) {\\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\\n  };\\n\\n  return p\\n      .scale(179.976)\\n      .clipAngle(147);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \\\"./math\\\";\\n\\nexport function aitoffRaw(x, y) {\\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\\n}\\n\\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\\n// semi-major axis pi and semi-minor axis pi/2.\\naitoffRaw.invert = function(x, y) {\\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\\n  var x1 = x, y1 = y, i = 25;\\n  do {\\n    var sinx = sin(x1),\\n        sinx_2 = sin(x1 / 2),\\n        cosx_2 = cos(x1 / 2),\\n        siny = sin(y1),\\n        cosy = cos(y1),\\n        sin_2y = sin(2 * y1),\\n        sin2y = siny * siny,\\n        cos2y = cosy * cosy,\\n        sin2x_2 = sinx_2 * sinx_2,\\n        c = 1 - cos2y * cosx_2 * cosx_2,\\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\\n        f,\\n        fx = 2 * e * cosy * sinx_2 - x,\\n        fy = e * siny - y,\\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\\n        z = dxdy * dydx - dydy * dxdx;\\n    if (!z) break;\\n    var dx = (fy * dxdy - fx * dydy) / z,\\n        dy = (fx * dydx - fy * dxdx) / z;\\n    x1 -= dx, y1 -= dy;\\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\\n  return [x1, y1];\\n};\\n\\nexport default function() {\\n  return projection(aitoffRaw)\\n      .scale(152.63);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \\\"./math\\\";\\n\\nexport function armadilloRaw(phi0) {\\n  var sinPhi0 = sin(phi0),\\n      cosPhi0 = cos(phi0),\\n      sPhi0 = phi0 >= 0 ? 1 : -1,\\n      tanPhi0 = tan(sPhi0 * phi0),\\n      k = (1 + sinPhi0 - cosPhi0) / 2;\\n\\n  function forward(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        cosLambda = cos(lambda /= 2);\\n    return [\\n      (1 + cosPhi) * sin(lambda),\\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\\n    ];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var lambda = 0,\\n        phi = 0,\\n        i = 50;\\n    do {\\n      var cosLambda = cos(lambda),\\n          sinLambda = sin(lambda),\\n          cosPhi = cos(phi),\\n          sinPhi = sin(phi),\\n          A = 1 + cosPhi,\\n          fx = A * sinLambda - x,\\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\\n          dxdLambda = A * cosLambda / 2,\\n          dxdPhi = -sinLambda * sinPhi,\\n          dydLambda = sinPhi0 * A * sinLambda / 2,\\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\\n      lambda -= dLambda, phi -= dPhi;\\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  var phi0 = 20 * radians,\\n      sPhi0 = phi0 >= 0 ? 1 : -1,\\n      tanPhi0 = tan(sPhi0 * phi0),\\n      m = projectionMutator(armadilloRaw),\\n      p = m(phi0),\\n      stream_ = p.stream;\\n\\n  p.parallel = function(_) {\\n    if (!arguments.length) return phi0 * degrees;\\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\\n    return m(phi0);\\n  };\\n\\n  p.stream = function(stream) {\\n    var rotate = p.rotate(),\\n        rotateStream = stream_(stream),\\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\\n    p.rotate(rotate);\\n    rotateStream.sphere = function() {\\n      sphereStream.polygonStart(), sphereStream.lineStart();\\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\\n      }\\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\\n    };\\n    return rotateStream;\\n  };\\n\\n  return p\\n      .scale(218.695)\\n      .center([0, 28.0974]);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \\\"./math\\\";\\n\\nexport function augustRaw(lambda, phi) {\\n  var tanPhi = tan(phi / 2),\\n      k = sqrt(1 - tanPhi * tanPhi),\\n      c = 1 + k * cos(lambda /= 2),\\n      x = sin(lambda) * k / c,\\n      y = tanPhi / c,\\n      x2 = x * x,\\n      y2 = y * y;\\n  return [\\n    4 / 3 * x * (3 + x2 - 3 * y2),\\n    4 / 3 * y * (3 + 3 * x2 - y2)\\n  ];\\n}\\n\\naugustRaw.invert = function(x, y) {\\n  x *= 3 / 8, y *= 3 / 8;\\n  if (!x && abs(y) > 1) return null;\\n  var x2 = x * x,\\n      y2 = y * y,\\n      s = 1 + x2 + y2,\\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\\n      eta = asin(sin3Eta) / 3,\\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\\n      cosEta = cos(eta),\\n      coshXi = cosh(xi),\\n      d = coshXi * coshXi - cosEta * cosEta;\\n  return [\\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(augustRaw)\\n      .scale(66.1603);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \\\"./math\\\";\\n\\nvar sqrt8 = sqrt(8),\\n    phi0 = log(1 + sqrt2);\\n\\nexport function bakerRaw(lambda, phi) {\\n  var phi0 = abs(phi);\\n  return phi0 < quarterPi\\n      ? [lambda, log(tan(quarterPi + phi / 2))]\\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\\n}\\n\\nbakerRaw.invert = function(x, y) {\\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\\n  var phi = quarterPi, i = 25, delta, y0;\\n  do {\\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\\n  } while (abs(delta) > epsilon2 && --i > 0);\\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\\n};\\n\\nexport default function() {\\n  return projection(bakerRaw)\\n      .scale(112.314);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \\\"d3-geo\\\";\\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \\\"./math\\\";\\n\\nexport function berghausRaw(lobes) {\\n  var k = 2 * pi / lobes;\\n\\n  function forward(lambda, phi) {\\n    var p = azimuthalEquidistantRaw(lambda, phi);\\n    if (abs(lambda) > halfPi) { // back hemisphere\\n      var theta = atan2(p[1], p[0]),\\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\\n          α = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\\n      theta = theta0 + asin(pi / r * sin(α)) - α;\\n      p[0] = r * cos(theta);\\n      p[1] = r * sin(theta);\\n    }\\n    return p;\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var r = sqrt(x * x + y * y);\\n    if (r > halfPi) {\\n      var theta = atan2(y, x),\\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\\n          s = theta > theta0 ? -1 : 1,\\n          A = r * cos(theta0 - theta),\\n          cotα = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\\n      theta = theta0 + 2 * atan((cotα + s * sqrt(cotα * cotα - 3)) / 3);\\n      x = r * cos(theta), y = r * sin(theta);\\n    }\\n    return azimuthalEquidistantRaw.invert(x, y);\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  var lobes = 5,\\n      m = projectionMutator(berghausRaw),\\n      p = m(lobes),\\n      projectionStream = p.stream,\\n      epsilon = 1e-2,\\n      cr = -cos(epsilon * radians),\\n      sr = sin(epsilon * radians);\\n\\n  p.lobes = function(_) {\\n    return arguments.length ? m(lobes = +_) : lobes;\\n  };\\n\\n  p.stream = function(stream) {\\n    var rotate = p.rotate(),\\n        rotateStream = projectionStream(stream),\\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\\n    p.rotate(rotate);\\n    rotateStream.sphere = function() {\\n      sphereStream.polygonStart(), sphereStream.lineStart();\\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\\n        if (phi < -90) {\\n          sphereStream.point(-90, -180 - phi - epsilon);\\n          sphereStream.point(-90, -180 - phi + epsilon);\\n        } else {\\n          sphereStream.point(90, phi + epsilon);\\n          sphereStream.point(90, phi - epsilon);\\n        }\\n      }\\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\\n    };\\n    return rotateStream;\\n  };\\n\\n  return p\\n      .scale(87.8076)\\n      .center([0, 17.1875])\\n      .clipAngle(180 - 1e-3);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \\\"./math\\\";\\n\\nexport function mollweideBromleyTheta(cp, phi) {\\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\\n  while (abs(delta) > epsilon && --i > 0);\\n  return phi / 2;\\n}\\n\\nexport function mollweideBromleyRaw(cx, cy, cp) {\\n\\n  function forward(lambda, phi) {\\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\\n  };\\n\\n  return forward;\\n}\\n\\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\\n\\nexport default function() {\\n  return projection(mollweideRaw)\\n      .scale(169.529);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {mollweideBromleyTheta} from \\\"./mollweide\\\";\\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \\\"./math\\\";\\n\\nvar k = 2.00276,\\n    w = 1.11072;\\n\\nexport function boggsRaw(lambda, phi) {\\n  var theta = mollweideBromleyTheta(pi, phi);\\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\\n}\\n\\nboggsRaw.invert = function(x, y) {\\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\\n  do {\\n    phi = ky - sqrt2 * sin(theta);\\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\\n  } while (abs(delta) > epsilon && --i > 0);\\n  phi = ky - sqrt2 * sin(theta);\\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\\n};\\n\\nexport default function() {\\n  return projection(boggsRaw)\\n      .scale(160.857);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {degrees, radians} from \\\"./math\\\";\\n\\nexport default function(projectAt) {\\n  var phi0 = 0,\\n      m = projectionMutator(projectAt),\\n      p = m(phi0);\\n\\n  p.parallel = function(_) {\\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\\n  };\\n\\n  return p;\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {cos} from \\\"./math\\\";\\n\\nexport function sinusoidalRaw(lambda, phi) {\\n  return [lambda * cos(phi), phi];\\n}\\n\\nsinusoidalRaw.invert = function(x, y) {\\n  return [x / cos(y), y];\\n};\\n\\nexport default function() {\\n  return projection(sinusoidalRaw)\\n      .scale(152.63);\\n}\\n\",\"import parallel1 from \\\"./parallel1\\\";\\nimport {atan2, cos, sin, sqrt, tan} from \\\"./math\\\";\\nimport {sinusoidalRaw} from \\\"./sinusoidal\\\";\\n\\nexport function bonneRaw(phi0) {\\n  if (!phi0) return sinusoidalRaw;\\n  var cotPhi0 = 1 / tan(phi0);\\n\\n  function forward(lambda, phi) {\\n    var rho = cotPhi0 + phi0 - phi,\\n        e = rho ? lambda * cos(phi) / rho : rho;\\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\\n        phi = cotPhi0 + phi0 - rho;\\n    return [rho / cos(phi) * atan2(x, y), phi];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  return parallel1(bonneRaw)\\n      .scale(123.082)\\n      .center([0, 26.1441])\\n      .parallel(45);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {atan2, cos, halfPi, sin, sqrt} from \\\"./math\\\";\\n\\nexport function bottomleyRaw(sinPsi) {\\n\\n  function forward(lambda, phi) {\\n    var rho = halfPi - phi,\\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var x1 = x * sinPsi,\\n        y1 = halfPi - y,\\n        rho = sqrt(x1 * x1 + y1 * y1),\\n        eta = atan2(x1, y1);\\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  var sinPsi = 0.5,\\n      m = projectionMutator(bottomleyRaw),\\n      p = m(sinPsi);\\n\\n  p.fraction = function(_) {\\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\\n  };\\n\\n  return p\\n      .scale(158.837);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {pi} from \\\"./math\\\";\\nimport {mollweideBromleyRaw} from \\\"./mollweide\\\";\\n\\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\\n\\nexport default function() {\\n  return projection(bromleyRaw)\\n      .scale(152.63);\\n}\\n\",\"import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \\\"d3-geo\\\";\\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \\\"./math\\\";\\n\\n// Azimuthal distance.\\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\\n  var cosdLambda = cos(dLambda), r;\\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\\n  } else {\\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\\n  }\\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\\n}\\n\\n// Angle opposite a, and contained between sides of lengths b and c.\\nfunction angle(b, c, a) {\\n  return acos((b * b + c * c - a * a) / (2 * b * c));\\n}\\n\\n// Normalize longitude.\\nfunction longitude(lambda) {\\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\\n}\\n\\nexport function chamberlinRaw(p0, p1, p2) {\\n  var points = [\\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\\n  ];\\n\\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\\n    b = points[i];\\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\\n    a.point = [0, 0];\\n  }\\n\\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\\n      beta2 = pi - beta0;\\n\\n  points[2].point[1] = 0;\\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\\n\\n  var mean = [\\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\\n  ];\\n\\n  function forward(lambda, phi) {\\n    var sinPhi = sin(phi),\\n        cosPhi = cos(phi),\\n        v = new Array(3), i;\\n\\n    // Compute distance and azimuth from control points.\\n    for (i = 0; i < 3; ++i) {\\n      var p = points[i];\\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\\n      if (!v[i][0]) return p.point;\\n      v[i][1] = longitude(v[i][1] - p.v[1]);\\n    }\\n\\n    // Arithmetic mean of interception points.\\n    var point = mean.slice();\\n    for (i = 0; i < 3; ++i) {\\n      var j = i == 2 ? 0 : i + 1;\\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\\n      if (v[i][1] < 0) a = -a;\\n\\n      if (!i) {\\n        point[0] += v[i][0] * cos(a);\\n        point[1] -= v[i][0] * sin(a);\\n      } else if (i == 1) {\\n        a = beta1 - a;\\n        point[0] -= v[i][0] * cos(a);\\n        point[1] -= v[i][0] * sin(a);\\n      } else {\\n        a = beta2 - a;\\n        point[0] += v[i][0] * cos(a);\\n        point[1] += v[i][0] * sin(a);\\n      }\\n    }\\n\\n    point[0] /= 3, point[1] /= 3;\\n    return point;\\n  }\\n\\n  return forward;\\n}\\n\\nfunction pointRadians(p) {\\n  return p[0] *= radians, p[1] *= radians, p;\\n}\\n\\nexport function chamberlinAfrica() {\\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\\n      .scale(380)\\n      .center([22.5, 2]);\\n}\\n\\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\\n  var c = centroid({type: \\\"MultiPoint\\\", coordinates: [p0, p1, p2]}),\\n      R = [-c[0], -c[1]],\\n      r = rotation(R),\\n      p = projection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),\\n      center = p.center;\\n\\n  delete p.rotate;\\n\\n  p.center = function(_) {\\n    return arguments.length ? center(r(_)) : r.invert(center());\\n  };\\n\\n  return p\\n      .clipAngle(90);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {asin, pi, sin, sqrt, sqrtPi} from \\\"./math\\\";\\n\\nexport function collignonRaw(lambda, phi) {\\n  var alpha = sqrt(1 - sin(phi));\\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\\n}\\n\\ncollignonRaw.invert = function(x, y) {\\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\\n};\\n\\nexport default function() {\\n  return projection(collignonRaw)\\n      .scale(95.6464)\\n      .center([0, 30]);\\n}\\n\",\"import {asin, atan2, cos, sin, sqrt, tan} from \\\"./math\\\";\\nimport parallel1 from \\\"./parallel1\\\";\\n\\nexport function craigRaw(phi0) {\\n  var tanPhi0 = tan(phi0);\\n\\n  function forward(lambda, phi) {\\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\\n  }\\n\\n  forward.invert = tanPhi0 ? function(x, y) {\\n    if (x) y *= sin(x) / x;\\n    var cosλ = cos(x);\\n    return [x, 2 * atan2(sqrt(cosλ * cosλ + tanPhi0 * tanPhi0 - y * y) - cosλ, tanPhi0 - y)];\\n  } : function(x, y) {\\n    return [x, asin(x ? y * tan(x) / x : y)];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  return parallel1(craigRaw)\\n      .scale(249.828)\\n      .clipAngle(90);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {asin, cos, sin, sqrt, sqrtPi} from \\\"./math\\\";\\n\\nvar sqrt3 = sqrt(3);\\n\\nexport function crasterRaw(lambda, phi) {\\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\\n}\\n\\ncrasterRaw.invert = function(x, y) {\\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\\n};\\n\\nexport default function() {\\n  return projection(crasterRaw)\\n      .scale(156.19);\\n}\\n\",\"import {asin, cos, sin} from \\\"./math\\\";\\nimport parallel1 from \\\"./parallel1\\\";\\n\\nexport function cylindricalEqualAreaRaw(phi0) {\\n  var cosPhi0 = cos(phi0);\\n\\n  function forward(lambda, phi) {\\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    return [x / cosPhi0, asin(y * cosPhi0)];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  return parallel1(cylindricalEqualAreaRaw)\\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\\n}\\n\",\"import {atan, cos, tan} from \\\"./math\\\";\\nimport parallel1 from \\\"./parallel1\\\";\\n\\nexport function cylindricalStereographicRaw(phi0) {\\n  var cosPhi0 = cos(phi0);\\n\\n  function forward(lambda, phi) {\\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  return parallel1(cylindricalStereographicRaw)\\n      .scale(124.75);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, pi, sqrt} from \\\"./math\\\";\\n\\nexport function eckert1Raw(lambda, phi) {\\n  var alpha = sqrt(8 / (3 * pi));\\n  return [\\n    alpha * lambda * (1 - abs(phi) / pi),\\n    alpha * phi\\n  ];\\n}\\n\\neckert1Raw.invert = function(x, y) {\\n  var alpha = sqrt(8 / (3 * pi)),\\n      phi = y / alpha;\\n  return [\\n    x / (alpha * (1 - abs(phi) / pi)),\\n    phi\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(eckert1Raw)\\n      .scale(165.664);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, pi, sign, sin, sqrt} from \\\"./math\\\";\\n\\nexport function eckert2Raw(lambda, phi) {\\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\\n  return [\\n    2 / sqrt(6 * pi) * lambda * alpha,\\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\\n  ];\\n}\\n\\neckert2Raw.invert = function(x, y) {\\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\\n  return [\\n    x * sqrt(6 * pi) / (2 * alpha),\\n    sign(y) * asin((4 - alpha * alpha) / 3)\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(eckert2Raw)\\n      .scale(165.664);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {pi, sqrt} from \\\"./math\\\";\\n\\nexport function eckert3Raw(lambda, phi) {\\n  var k = sqrt(pi * (4 + pi));\\n  return [\\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\\n    4 / k * phi\\n  ];\\n}\\n\\neckert3Raw.invert = function(x, y) {\\n  var k = sqrt(pi * (4 + pi)) / 2;\\n  return [\\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\\n    y * k / 2\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(eckert3Raw)\\n      .scale(180.739);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \\\"./math\\\";\\n\\nexport function eckert4Raw(lambda, phi) {\\n  var k = (2 + halfPi) * sin(phi);\\n  phi /= 2;\\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\\n    var cosPhi = cos(phi);\\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\\n  }\\n  return [\\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\\n  ];\\n}\\n\\neckert4Raw.invert = function(x, y) {\\n  var A = y * sqrt((4 + pi) / pi) / 2,\\n      k = asin(A),\\n      c = cos(k);\\n  return [\\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\\n    asin((k + A * (c + 2)) / (2 + halfPi))\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(eckert4Raw)\\n      .scale(180.739);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {cos, pi, sqrt} from \\\"./math\\\";\\n\\nexport function eckert5Raw(lambda, phi) {\\n  return [\\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\\n    2 * phi / sqrt(2 + pi)\\n  ];\\n}\\n\\neckert5Raw.invert = function(x, y) {\\n  var k = sqrt(2 + pi),\\n      phi = y * k / 2;\\n  return [\\n    k * x / (1 + cos(phi)),\\n    phi\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(eckert5Raw)\\n      .scale(173.044);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \\\"./math\\\";\\n\\nexport function eckert6Raw(lambda, phi) {\\n  var k = (1 + halfPi) * sin(phi);\\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\\n  }\\n  k = sqrt(2 + pi);\\n  return [\\n    lambda * (1 + cos(phi)) / k,\\n    2 * phi / k\\n  ];\\n}\\n\\neckert6Raw.invert = function(x, y) {\\n  var j = 1 + halfPi,\\n      k = sqrt(j / 2);\\n  return [\\n    x * 2 * k / (1 + cos(y *= k)),\\n    asin((y + sin(y)) / j)\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(eckert6Raw)\\n      .scale(173.044);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {augustRaw} from \\\"./august\\\";\\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \\\"./math\\\";\\n\\nvar eisenlohrK = 3 + 2 * sqrt2;\\n\\nexport function eisenlohrRaw(lambda, phi) {\\n  var s0 = sin(lambda /= 2),\\n      c0 = cos(lambda),\\n      k = sqrt(cos(phi)),\\n      c1 = cos(phi /= 2),\\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\\n      c = sqrt(2 / (1 + t * t)),\\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\\n  return [\\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\\n  ];\\n}\\n\\neisenlohrRaw.invert = function(x, y) {\\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\\n  var lambda = p[0], phi = p[1], i = 20, p;\\n  x /= eisenlohrK, y /= eisenlohrK;\\n  do {\\n    var _0 = lambda / 2,\\n        _1 = phi / 2,\\n        s0 = sin(_0),\\n        c0 = cos(_0),\\n        s1 = sin(_1),\\n        c1 = cos(_1),\\n        cos1 = cos(phi),\\n        k = sqrt(cos1),\\n        t = s1 / (c1 + sqrt2 * c0 * k),\\n        t2 = t * t,\\n        c = sqrt(2 / (1 + t2)),\\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\\n        v2 = v0 / v1,\\n        v = sqrt(v2),\\n        vm1v = v - 1 / v,\\n        vp1v = v + 1 / v,\\n        fx = c * vm1v - 2 * log(v) - x,\\n        fy = c * t * vp1v - 2 * atan(t) - y,\\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\\n        deltacDeltat = -0.5 * t * c * c * c,\\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\\n    if (!denominator) break;\\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\\n    lambda -= deltaLambda;\\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\\n};\\n\\nexport default function() {\\n  return projection(eisenlohrRaw)\\n      .scale(62.5271);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {atan, cos, radians, sqrt, tan} from \\\"./math\\\";\\n\\nvar faheyK = cos(35 * radians);\\n\\nexport function faheyRaw(lambda, phi) {\\n  var t = tan(phi / 2);\\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\\n}\\n\\nfaheyRaw.invert = function(x, y) {\\n  var t = y / (1 + faheyK);\\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\\n};\\n\\nexport default function() {\\n  return projection(faheyRaw)\\n      .scale(137.152);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {atan, cos, sqrtPi, tan} from \\\"./math\\\";\\n\\nexport function foucautRaw(lambda, phi) {\\n  var k = phi / 2, cosk = cos(k);\\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\\n}\\n\\nfoucautRaw.invert = function(x, y) {\\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\\n};\\n\\nexport default function() {\\n  return projection(foucautRaw)\\n      .scale(135.264);\\n}\\n\",\"import {geoEquirectangular, geoOrthographic} from \\\"d3-geo\\\";\\nimport {asin, atan, degrees, radians, sin, tan} from \\\"./math\\\";\\n\\nfunction gilbertForward(point) {\\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\\n}\\n\\nfunction gilbertInvert(point) {\\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\\n}\\n\\nexport default function(projectionType) {\\n  if (projectionType == null) projectionType = geoOrthographic;\\n  var projection = projectionType(),\\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\\n\\n  function gilbert(point) {\\n    return projection(gilbertForward(point));\\n  }\\n\\n  if (projection.invert) gilbert.invert = function(point) {\\n    return gilbertInvert(projection.invert(point));\\n  };\\n\\n  gilbert.stream = function(stream) {\\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\\n      lineStart: function() { s1.lineStart(); },\\n      lineEnd: function() { s1.lineEnd(); },\\n      polygonStart: function() { s1.polygonStart(); },\\n      polygonEnd: function() { s1.polygonEnd(); }\\n    });\\n    s0.sphere = s1.sphere;\\n    return s0;\\n  };\\n\\n  function property(name) {\\n    gilbert[name] = function(_) {\\n      return arguments.length ? (projection[name](_), gilbert) : projection[name]();\\n    };\\n  }\\n\\n  gilbert.rotate = function(_) {\\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\\n  };\\n\\n  gilbert.center = function(_) {\\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\\n  };\\n\\n  property(\\\"clipAngle\\\");\\n  property(\\\"clipExtent\\\");\\n  property(\\\"scale\\\");\\n  property(\\\"translate\\\");\\n  property(\\\"precision\\\");\\n\\n  return gilbert\\n      .scale(249.5);\\n}\\n\",\"import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \\\"./math\\\";\\n\\nexport function gingeryRaw(rho, n) {\\n  var k = 2 * pi / n,\\n      rho2 = rho * rho;\\n\\n  function forward(lambda, phi) {\\n    var p = azimuthalEquidistantRaw(lambda, phi),\\n        x = p[0],\\n        y = p[1],\\n        r2 = x * x + y * y;\\n\\n    if (r2 > rho2) {\\n      var r = sqrt(r2),\\n          theta = atan2(y, x),\\n          theta0 = k * round(theta / k),\\n          alpha = theta - theta0,\\n          rhoCosAlpha = rho * cos(alpha),\\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\\n          s_ = gingeryLength(alpha, k_),\\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\\n\\n      x = r;\\n      var i = 50, delta;\\n      do {\\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\\n      } while (abs(delta) > epsilon && --i > 0);\\n\\n      y = alpha * sin(x);\\n      if (x < halfPi) y -= k_ * (x - halfPi);\\n\\n      var s = sin(theta0),\\n          c = cos(theta0);\\n      p[0] = x * c - y * s;\\n      p[1] = x * s + y * c;\\n    }\\n    return p;\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var r2 = x * x + y * y;\\n    if (r2 > rho2) {\\n      var r = sqrt(r2),\\n          theta = atan2(y, x),\\n          theta0 = k * round(theta / k),\\n          dTheta = theta - theta0;\\n\\n      x = r * cos(dTheta);\\n      y = r * sin(dTheta);\\n\\n      var x_halfPi = x - halfPi,\\n          sinx = sin(x),\\n          alpha = y / sinx,\\n          delta = x < halfPi ? Infinity : 0,\\n          i = 10;\\n\\n      while (true) {\\n        var rhosinAlpha = rho * sin(alpha),\\n            rhoCosAlpha = rho * cos(alpha),\\n            sinRhoCosAlpha = sin(rhoCosAlpha),\\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\\n            s_ = gingeryLength(alpha, k_);\\n\\n        if (abs(delta) < epsilon2 || !--i) break;\\n\\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\\n          sinx - x_halfPi * 2 * (\\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\\n      }\\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\\n      theta = theta0 + alpha;\\n      x = r * cos(theta);\\n      y = r * sin(theta);\\n    }\\n    return azimuthalEquidistantRaw.invert(x, y);\\n  };\\n\\n  return forward;\\n}\\n\\nfunction gingeryLength(alpha, k) {\\n  return function(x) {\\n    var y_ = alpha * cos(x);\\n    if (x < halfPi) y_ -= k;\\n    return sqrt(1 + y_ * y_);\\n  };\\n}\\n\\n// Numerical integration: trapezoidal rule.\\nfunction gingeryIntegrate(f, a, b) {\\n  var n = 50,\\n      h = (b - a) / n,\\n      s = f(a) + f(b);\\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\\n  return s * 0.5 * h;\\n}\\n\\nexport default function() {\\n  var n = 6,\\n      rho = 30 * radians,\\n      cRho = cos(rho),\\n      sRho = sin(rho),\\n      m = projectionMutator(gingeryRaw),\\n      p = m(rho, n),\\n      stream_ = p.stream,\\n      epsilon = 1e-2,\\n      cr = -cos(epsilon * radians),\\n      sr = sin(epsilon * radians);\\n\\n  p.radius = function(_) {\\n    if (!arguments.length) return rho * degrees;\\n    cRho = cos(rho = _ * radians);\\n    sRho = sin(rho);\\n    return m(rho, n);\\n  };\\n\\n  p.lobes = function(_) {\\n    if (!arguments.length) return n;\\n    return m(rho, n = +_);\\n  };\\n\\n  p.stream = function(stream) {\\n    var rotate = p.rotate(),\\n        rotateStream = stream_(stream),\\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\\n    p.rotate(rotate);\\n    rotateStream.sphere = function() {\\n      sphereStream.polygonStart(), sphereStream.lineStart();\\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\\n      }\\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\\n    };\\n    return rotateStream;\\n  };\\n\\n  return p\\n      .rotate([90, -40])\\n      .scale(91.7095)\\n      .clipAngle(180 - 1e-3);\\n}\\n\",\"import {abs, asin, cos, epsilon, pi, sin, sqrt} from \\\"./math\\\";\\n\\nexport default function(a, b, c, d, e, f, g, h) {\\n  if (arguments.length < 8) h = 0;\\n\\n  function forward(lambda, phi) {\\n    if (!phi) return [a * lambda / pi, 0];\\n    var phi2 = phi * phi,\\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\\n        m = (xB * xB + yB * yB) / (2 * yB),\\n        alpha = lambda * asin(xB / m) / pi;\\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var lambda = pi * x / a,\\n        phi = y,\\n        deltaLambda, deltaPhi, i = 50;\\n    do {\\n      var phi2 = phi * phi,\\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\\n          p = xB * xB + yB * yB,\\n          q = 2 * yB,\\n          m = p / q,\\n          m2 = m * m,\\n          dAlphadLambda = asin(xB / m) / pi,\\n          alpha = lambda * dAlphadLambda,\\n          xB2 = xB * xB,\\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\\n          dqdPhi = 2 * (dyBdPhi - 1),\\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\\n          cosAlpha = cos(alpha),\\n          sinAlpha = sin(alpha),\\n          mcosAlpha = m * cosAlpha,\\n          msinAlpha = m * sinAlpha,\\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\\n          fx = msinAlpha - x,\\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\\n      if (!denominator) break;\\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\\n    return [lambda, phi];\\n  };\\n\\n  return forward;\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport ginzburgPolyconicRaw from \\\"./ginzburgPolyconic\\\";\\n\\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\\n\\nexport default function() {\\n  return projection(ginzburg4Raw)\\n      .scale(149.995);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport ginzburgPolyconicRaw from \\\"./ginzburgPolyconic\\\";\\n\\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\\n\\nexport default function() {\\n  return projection(ginzburg5Raw)\\n      .scale(153.93);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport ginzburgPolyconicRaw from \\\"./ginzburgPolyconic\\\";\\nimport {pi} from \\\"./math\\\";\\n\\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\\n\\nexport default function() {\\n  return projection(ginzburg6Raw)\\n      .scale(130.945);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, epsilon} from \\\"./math\\\";\\n\\nexport function ginzburg8Raw(lambda, phi) {\\n  var lambda2 = lambda * lambda,\\n      phi2 = phi * phi;\\n  return [\\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\\n    phi * (1 + phi2 / 12)\\n  ];\\n}\\n\\nginzburg8Raw.invert = function(x, y) {\\n  var lambda = x,\\n      phi = y,\\n      i = 50, delta;\\n  do {\\n    var phi2 = phi * phi;\\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\\n  } while (abs(delta) > epsilon && --i > 0);\\n  i = 50;\\n  x /= 1 -0.162388 * phi2;\\n  do {\\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\\n  } while (abs(delta) > epsilon && --i > 0);\\n  return [lambda, phi];\\n};\\n\\nexport default function() {\\n  return projection(ginzburg8Raw)\\n      .scale(131.747);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport ginzburgPolyconicRaw from \\\"./ginzburgPolyconic\\\";\\n\\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\\n\\nexport default function() {\\n  return projection(ginzburg9Raw)\\n      .scale(131.087);\\n}\\n\",\"import {halfPi, pi} from \\\"./math\\\";\\n\\nexport default function(project) {\\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\\n\\n  function projectSquare(lambda, phi) {\\n    var s = lambda > 0 ? -0.5 : 0.5,\\n        point = project(lambda + s * pi, phi);\\n    point[0] -= s * dx;\\n    return point;\\n  }\\n\\n  if (project.invert) projectSquare.invert = function(x, y) {\\n    var s = x > 0 ? -0.5 : 0.5,\\n        location = project.invert(x + s * dx, y),\\n        lambda = location[0] - s * pi;\\n    if (lambda < -pi) lambda += 2 * pi;\\n    else if (lambda > pi) lambda -= 2 * pi;\\n    location[0] = lambda;\\n    return location;\\n  };\\n\\n  return projectSquare;\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \\\"./math\\\";\\nimport squareRaw from \\\"./square\\\";\\n\\nexport function gringortenRaw(lambda, phi) {\\n  var sLambda = sign(lambda),\\n      sPhi = sign(phi),\\n      cosPhi = cos(phi),\\n      x = cos(lambda) * cosPhi,\\n      y = sin(lambda) * cosPhi,\\n      z = sin(sPhi * phi);\\n  lambda = abs(atan2(y, z));\\n  phi = asin(x);\\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\\n}\\n\\ngringortenRaw.invert = function(x, y) {\\n  var sx = sign(x),\\n      sy = sign(y),\\n      x0 = -sx * x,\\n      y0 = -sy * y,\\n      t = y0 / x0 < 1,\\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\\n      lambda = p[0],\\n      phi = p[1],\\n      cosPhi = cos(phi);\\n  if (t) lambda = -halfPi - lambda;\\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\\n};\\n\\nfunction gringortenHexadecant(lambda, phi) {\\n  if (phi === halfPi) return [0, 0];\\n\\n  var sinPhi = sin(phi),\\n      r = sinPhi * sinPhi,\\n      r2 = r * r,\\n      j = 1 + r2,\\n      k = 1 + 3 * r2,\\n      q = 1 - r2,\\n      z = asin(1 / sqrt(j)),\\n      v = q + r * j * z,\\n      p2 = (1 - sinPhi) / v,\\n      p = sqrt(p2),\\n      a2 = p2 * j,\\n      a = sqrt(a2),\\n      h = p * q,\\n      x,\\n      i;\\n\\n  if (lambda === 0) return [0, -(h + r * a)];\\n\\n  var cosPhi = cos(phi),\\n      secPhi = 1 / cosPhi,\\n      drdPhi = 2 * sinPhi * cosPhi,\\n      dvdPhi = (-3 * r + z * k) * drdPhi,\\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\\n      dpdPhi = (0.5 * dp2dPhi) / p,\\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\\n      mu = -secPhi * drdPhi,\\n      nu = -secPhi * dra2dPhi,\\n      zeta = -2 * secPhi * dhdPhi,\\n      lambda1 = 4 * lambda / pi,\\n      delta;\\n\\n  // Slower but accurate bisection method.\\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\\n    if (lambda > pi / 4) return [x, x];\\n    var x1 = x, x0 = 0.5 * x;\\n    x = 0.5 * (x0 + x1), i = 50;\\n    do {\\n      var g = sqrt(a2 - x * x),\\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\\n      if (!f) break;\\n      if (f < 0) x0 = x;\\n      else x1 = x;\\n      x = 0.5 * (x0 + x1);\\n    } while (abs(x1 - x0) > epsilon && --i > 0);\\n  }\\n\\n  // Newton-Raphson.\\n  else {\\n    x = epsilon, i = 25;\\n    do {\\n      var x2 = x * x,\\n          g2 = sqrt(a2 - x2),\\n          zetaMug = zeta + mu * g2,\\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\\n          df = zetaMug + (nu - mu * x2) / g2;\\n      x -= delta = g2 ? f2 / df : 0;\\n    } while (abs(delta) > epsilon && --i > 0);\\n  }\\n\\n  return [x, -h - r * sqrt(a2 - x * x)];\\n}\\n\\nfunction gringortenHexadecantInvert(x, y) {\\n  var x0 = 0,\\n      x1 = 1,\\n      r = 0.5,\\n      i = 50;\\n\\n  while (true) {\\n    var r2 = r * r,\\n        sinPhi = sqrt(r),\\n        z = asin(1 / sqrt(1 + r2)),\\n        v = (1 - r2) + r * (1 + r2) * z,\\n        p2 = (1 - sinPhi) / v,\\n        p = sqrt(p2),\\n        a2 = p2 * (1 + r2),\\n        h = p * (1 - r2),\\n        g2 = a2 - x * x,\\n        g = sqrt(g2),\\n        y0 = y + h + r * g;\\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\\n    if (y0 > 0) x0 = r;\\n    else x1 = r;\\n    r = 0.5 * (x0 + x1);\\n  }\\n\\n  if (!i) return null;\\n\\n  var phi = asin(sinPhi),\\n      cosPhi = cos(phi),\\n      secPhi = 1 / cosPhi,\\n      drdPhi = 2 * sinPhi * cosPhi,\\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\\n      dpdPhi = 0.5 * dp2dPhi / p,\\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\\n      zeta = -2 * secPhi * dhdPhi,\\n      mu = -secPhi * drdPhi,\\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\\n\\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\\n}\\n\\nexport default function() {\\n  return projection(squareRaw(gringortenRaw))\\n      .scale(239.75);\\n}\\n\",\"import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \\\"./math\\\";\\n\\n// Returns [sn, cn, dn](u + iv|m).\\nexport function ellipticJi(u, v, m) {\\n  var a, b, c;\\n  if (!u) {\\n    b = ellipticJ(v, 1 - m);\\n    return [\\n      [0, b[0] / b[1]],\\n      [1 / b[1], 0],\\n      [b[2] / b[1], 0]\\n    ];\\n  }\\n  a = ellipticJ(u, m);\\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\\n  b = ellipticJ(v, 1 - m);\\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\\n  return [\\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\\n  ];\\n}\\n\\n// Returns [sn, cn, dn, ph](u|m).\\nexport function ellipticJ(u, m) {\\n  var ai, b, phi, t, twon;\\n  if (m < epsilon) {\\n    t = sin(u);\\n    b = cos(u);\\n    ai = m * (u - t * b) / 4;\\n    return [\\n      t - ai * b,\\n      b + ai * t,\\n      1 - m * t * t / 2,\\n      u - ai\\n    ];\\n  }\\n  if (m >= 1 - epsilon) {\\n    ai = (1 - m) / 4;\\n    b = cosh(u);\\n    t = tanh(u);\\n    phi = 1 / b;\\n    twon = b * sinh(u);\\n    return [\\n      t + ai * (twon - u) / (b * b),\\n      phi - ai * t * phi * (twon - u),\\n      phi + ai * t * phi * (twon + u),\\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\\n    ];\\n  }\\n\\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\\n      i = 0;\\n  b = sqrt(1 - m);\\n  twon = 1;\\n\\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\\n    ai = a[i++];\\n    c[i] = (ai - b) / 2;\\n    a[i] = (ai + b) / 2;\\n    b = sqrt(ai * b);\\n    twon *= 2;\\n  }\\n\\n  phi = twon * a[i] * u;\\n  do {\\n    t = c[i] * sin(b = phi) / a[i];\\n    phi = (asin(t) + phi) / 2;\\n  } while (--i);\\n\\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\\n}\\n\\n// Calculate F(phi+iPsi|m).\\n// See Abramowitz and Stegun, 17.4.11.\\nexport function ellipticFi(phi, psi, m) {\\n  var r = abs(phi),\\n      i = abs(psi),\\n      sinhPsi = sinh(i);\\n  if (r) {\\n    var cscPhi = 1 / sin(r),\\n        cotPhi2 = 1 / (tan(r) * tan(r)),\\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\\n        c = (m - 1) * cotPhi2,\\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\\n    return [\\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\\n    ];\\n  }\\n  return [\\n    0,\\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\\n  ];\\n}\\n\\n// Calculate F(phi|m) where m = k² = sin²α.\\n// See Abramowitz and Stegun, 17.6.7.\\nexport function ellipticF(phi, m) {\\n  if (!m) return phi;\\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\\n  var a = 1,\\n      b = sqrt(1 - m),\\n      c = sqrt(m);\\n  for (var i = 0; abs(c) > epsilon; i++) {\\n    if (phi % pi) {\\n      var dPhi = atan(b * tan(phi) / a);\\n      if (dPhi < 0) dPhi += pi;\\n      phi += dPhi + ~~(phi / pi) * pi;\\n    } else phi += phi;\\n    c = (a + b) / 2;\\n    b = sqrt(a * b);\\n    c = ((a = c) - b) / 2;\\n  }\\n  return phi / (pow(2, i) * a);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {ellipticF, ellipticFi, ellipticJi} from \\\"./elliptic\\\";\\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \\\"./math\\\";\\nimport squareRaw from \\\"./square\\\";\\n\\nexport function guyouRaw(lambda, phi) {\\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\\n      k = sqrt(1 - k_ * k_),\\n      K = ellipticF(halfPi, k * k),\\n      f = -1,\\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\\n      r = exp(f * psi) / sqrt(k_),\\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\\n      t = ellipticFi(at[0], at[1], k * k);\\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\\n}\\n\\nfunction guyouComplexAtan(x, y) {\\n  var x2 = x * x,\\n      y_1 = y + 1,\\n      t = 1 - x2 - y * y;\\n  return [\\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\\n  ];\\n}\\n\\nfunction guyouComplexDivide(a, b) {\\n  var denominator = b[0] * b[0] + b[1] * b[1];\\n  return [\\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\\n    (a[1] * b[0] - a[0] * b[1]) / denominator\\n  ];\\n}\\n\\nguyouRaw.invert = function(x, y) {\\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\\n      k = sqrt(1 - k_ * k_),\\n      K = ellipticF(halfPi, k * k),\\n      f = -1,\\n      j = ellipticJi(0.5 * K - y, -x, k * k),\\n      tn = guyouComplexDivide(j[0], j[1]),\\n      lambda = atan2(tn[1], tn[0]) / f;\\n  return [\\n    lambda,\\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(squareRaw(guyouRaw))\\n      .scale(151.496);\\n}\\n\",\"import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {asin, cos, sin} from \\\"./math\\\";\\n\\nexport function hammerRaw(A, B) {\\n  if (arguments.length < 2) B = A;\\n  if (B === 1) return azimuthalEqualAreaRaw;\\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\\n\\n  function forward(lambda, phi) {\\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\\n    coordinates[0] *= A;\\n    return coordinates;\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\\n    coordinates[0] *= B;\\n    return coordinates;\\n  };\\n\\n  return forward;\\n}\\n\\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\\n  return [\\n    lambda * cos(phi) / cos(phi /= 2),\\n    2 * sin(phi)\\n  ];\\n}\\n\\nhammerQuarticAuthalicRaw.invert = function(x, y) {\\n  var phi = 2 * asin(y / 2);\\n  return [\\n    x * cos(phi / 2) / cos(phi),\\n    phi\\n  ];\\n};\\n\\nexport default function() {\\n  var B = 2,\\n      m = projectionMutator(hammerRaw),\\n      p = m(B);\\n\\n  p.coefficient = function(_) {\\n    if (!arguments.length) return B;\\n    return m(B = +_);\\n  };\\n\\n  return p\\n    .scale(169.529);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator, geoCircle} from \\\"d3-geo\\\";\\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \\\"./math\\\";\\n\\nexport function hammerRetroazimuthalRaw(phi0) {\\n  var sinPhi0 = sin(phi0),\\n      cosPhi0 = cos(phi0),\\n      rotate = hammerRetroazimuthalRotation(phi0);\\n\\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\\n\\n  function forward(lambda, phi) {\\n    var p = rotate(lambda, phi);\\n    lambda = p[0], phi = p[1];\\n    var sinPhi = sin(phi),\\n        cosPhi = cos(phi),\\n        cosLambda = cos(lambda),\\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\\n        sinz = sin(z),\\n        K = abs(sinz) > epsilon ? z / sinz : 1;\\n    return [\\n      K * cosPhi0 * sin(lambda),\\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\\n    ];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var rho = sqrt(x * x + y * y),\\n        sinz = -sin(rho),\\n        cosz = cos(rho),\\n        a = rho * cosz,\\n        b = -y * sinz,\\n        c = rho * sinPhi0,\\n        d = sqrt(a * a + b * b - c * c),\\n        phi = atan2(a * c + b * d, b * c - a * d),\\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\\n    return rotate.invert(lambda, phi);\\n  };\\n\\n  return forward;\\n}\\n\\n// Latitudinal rotation by phi0.\\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\\nfunction hammerRetroazimuthalRotation(phi0) {\\n  var sinPhi0 = sin(phi0),\\n      cosPhi0 = cos(phi0);\\n\\n  return function(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        x = cos(lambda) * cosPhi,\\n        y = sin(lambda) * cosPhi,\\n        z = sin(phi);\\n    return [\\n      atan2(y, x * cosPhi0 - z * sinPhi0),\\n      asin(z * cosPhi0 + x * sinPhi0)\\n    ];\\n  };\\n}\\n\\nexport default function() {\\n  var phi0 = 0,\\n      m = projectionMutator(hammerRetroazimuthalRaw),\\n      p = m(phi0),\\n      rotate_ = p.rotate,\\n      stream_ = p.stream,\\n      circle = geoCircle();\\n\\n  p.parallel = function(_) {\\n    if (!arguments.length) return phi0 * degrees;\\n    var r = p.rotate();\\n    return m(phi0 = _ * radians).rotate(r);\\n  };\\n\\n  // Temporary hack; see hammerRetroazimuthalRotation.\\n  p.rotate = function(_) {\\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\\n    circle.center([-_[0], -_[1]]);\\n    return p;\\n  };\\n\\n  p.stream = function(stream) {\\n    stream = stream_(stream);\\n    stream.sphere = function() {\\n      stream.polygonStart();\\n      var epsilon = 1e-2,\\n          ring = circle.radius(90 - epsilon)().coordinates[0],\\n          n = ring.length - 1,\\n          i = -1,\\n          p;\\n      stream.lineStart();\\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\\n      stream.lineEnd();\\n      ring = circle.radius(90 + epsilon)().coordinates[0];\\n      n = ring.length - 1;\\n      stream.lineStart();\\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\\n      stream.lineEnd();\\n      stream.polygonEnd();\\n    };\\n    return stream;\\n  };\\n\\n  return p\\n      .scale(79.4187)\\n      .parallel(45)\\n      .clipAngle(180 - 1e-3);\\n}\\n\",\"import {range} from \\\"d3-array\\\";\\nimport {geoStream, geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {collignonRaw} from \\\"./collignon\\\";\\nimport {cylindricalEqualAreaRaw} from \\\"./cylindricalEqualArea\\\";\\nimport {abs, floor, max, min, pi, radians, sqrtPi, tau} from \\\"./math\\\";\\n\\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\\n    healpixLambert = cylindricalEqualAreaRaw(0);\\n\\nexport function healpixRaw(H) {\\n  var phi0 = healpixParallel * radians,\\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\\n      y0 = healpixLambert(0, phi0)[1],\\n      y1 = collignonRaw(0, phi0)[1],\\n      dy1 = sqrtPi - y1,\\n      k = tau / H,\\n      w = 4 / tau,\\n      h = y0 + (dy1 * dy1 * 4) / tau;\\n\\n  function forward(lambda, phi) {\\n    var point,\\n        phi2 = abs(phi);\\n    if (phi2 > phi0) {\\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\\n      lambda += pi * (H - 1) / H - i * k;\\n      point = collignonRaw(lambda, phi2);\\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\\n      if (phi < 0) point[1] = -point[1];\\n    } else {\\n      point = healpixLambert(lambda, phi);\\n    }\\n    point[0] *= w, point[1] /= h;\\n    return point;\\n  }\\n\\n  forward.invert = function(x, y) {\\n    x /= w, y *= h;\\n    var y2 = abs(y);\\n    if (y2 > y0) {\\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\\n      point[0] -= pi * (H - 1) / H - i * k;\\n      if (y < 0) point[1] = -point[1];\\n      return point;\\n    }\\n    return healpixLambert.invert(x, y);\\n  };\\n\\n  return forward;\\n}\\n\\nfunction sphere(step) {\\n  return {\\n    type: \\\"Polygon\\\",\\n    coordinates: [\\n      range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })\\n      .concat(range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))\\n    ]\\n  };\\n}\\n\\nexport default function() {\\n  var H = 4,\\n      m = projectionMutator(healpixRaw),\\n      p = m(H),\\n      stream_ = p.stream;\\n\\n  p.lobes = function(_) {\\n    return arguments.length ? m(H = +_) : H;\\n  };\\n\\n  p.stream = function(stream) {\\n    var rotate = p.rotate(),\\n        rotateStream = stream_(stream),\\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\\n    p.rotate(rotate);\\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\\n    return rotateStream;\\n  };\\n\\n  return p\\n      .scale(239.75);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \\\"./math\\\";\\n\\nexport function hillRaw(K) {\\n  var L = 1 + K,\\n      sinBt = sin(1 / L),\\n      Bt = asin(sinBt),\\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\\n      B,\\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\\n      K2 = K * K,\\n      L2 = L * L;\\n\\n  function forward(lambda, phi) {\\n    var t = 1 - sin(phi),\\n        rho,\\n        omega;\\n    if (t && t < 2) {\\n      var theta = halfPi - phi, i = 25, delta;\\n      do {\\n        var sinTheta = sin(theta),\\n            cosTheta = cos(theta),\\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\\n            C = 1 + L2 - 2 * L * cosTheta;\\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\\n      } while (abs(delta) > epsilon2 && --i > 0);\\n      rho = A * sqrt(C);\\n      omega = lambda * Bt_Bt1 / pi;\\n    } else {\\n      rho = A * (K + t);\\n      omega = lambda * Bt / pi;\\n    }\\n    return [\\n      rho * sin(omega),\\n      rho0 - rho * cos(omega)\\n    ];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var rho2 = x * x + (y -= rho0) * y,\\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\\n        theta = acos(cosTheta),\\n        sinTheta = sin(theta),\\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\\n    return [\\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\\n    ];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  var K = 1,\\n      m = projectionMutator(hillRaw),\\n      p = m(K);\\n\\n  p.ratio = function(_) {\\n    return arguments.length ? m(K = +_) : K;\\n  };\\n\\n  return p\\n      .scale(167.774)\\n      .center([0, 18.67]);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {mollweideRaw} from \\\"./mollweide\\\";\\nimport {sinusoidalRaw} from \\\"./sinusoidal\\\";\\n\\nexport var sinuMollweidePhi = 0.7109889596207567;\\n\\nexport var sinuMollweideY = 0.0528035274542;\\n\\nexport function sinuMollweideRaw(lambda, phi) {\\n  return phi > -sinuMollweidePhi\\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\\n      : sinusoidalRaw(lambda, phi);\\n}\\n\\nsinuMollweideRaw.invert = function(x, y) {\\n  return y > -sinuMollweidePhi\\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\\n      : sinusoidalRaw.invert(x, y);\\n};\\n\\nexport default function() {\\n  return projection(sinuMollweideRaw)\\n      .rotate([-20, -55])\\n      .scale(164.263)\\n      .center([0, -5.4036]);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs} from \\\"./math\\\";\\nimport {mollweideRaw} from \\\"./mollweide\\\";\\nimport {sinusoidalRaw} from \\\"./sinusoidal\\\";\\nimport {sinuMollweidePhi, sinuMollweideY} from \\\"./sinuMollweide\\\";\\n\\nexport function homolosineRaw(lambda, phi) {\\n  return abs(phi) > sinuMollweidePhi\\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\\n      : sinusoidalRaw(lambda, phi);\\n}\\n\\nhomolosineRaw.invert = function(x, y) {\\n  return abs(y) > sinuMollweidePhi\\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\\n      : sinusoidalRaw.invert(x, y);\\n};\\n\\nexport default function() {\\n  return projection(homolosineRaw)\\n      .scale(152.63);\\n}\\n\",\"import {merge} from \\\"d3-array\\\";\\nimport {geoStream, geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, epsilon, radians} from \\\"../math\\\";\\n\\nfunction pointEqual(a, b) {\\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\\n}\\n\\nfunction interpolateLine(coordinates, m) {\\n  var i = -1,\\n      n = coordinates.length,\\n      p0 = coordinates[0],\\n      p1,\\n      dx,\\n      dy,\\n      resampled = [];\\n  while (++i < n) {\\n    p1 = coordinates[i];\\n    dx = (p1[0] - p0[0]) / m;\\n    dy = (p1[1] - p0[1]) / m;\\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\\n    p0 = p1;\\n  }\\n  resampled.push(p1);\\n  return resampled;\\n}\\n\\nfunction interpolateSphere(lobes) {\\n  var coordinates = [],\\n      lobe,\\n      lambda0, phi0, phi1,\\n      lambda2, phi2,\\n      i, n = lobes[0].length;\\n\\n  // Northern Hemisphere\\n  for (i = 0; i < n; ++i) {\\n    lobe = lobes[0][i];\\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\\n    coordinates.push(interpolateLine([\\n      [lambda0 + epsilon, phi0 + epsilon],\\n      [lambda0 + epsilon, phi1 - epsilon],\\n      [lambda2 - epsilon, phi1 - epsilon],\\n      [lambda2 - epsilon, phi2 + epsilon]\\n    ], 30));\\n  }\\n\\n  // Southern Hemisphere\\n  for (i = lobes[1].length - 1; i >= 0; --i) {\\n    lobe = lobes[1][i];\\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\\n    coordinates.push(interpolateLine([\\n      [lambda2 - epsilon, phi2 - epsilon],\\n      [lambda2 - epsilon, phi1 + epsilon],\\n      [lambda0 + epsilon, phi1 + epsilon],\\n      [lambda0 + epsilon, phi0 - epsilon]\\n    ], 30));\\n  }\\n\\n  return {\\n    type: \\\"Polygon\\\",\\n    coordinates: [merge(coordinates)]\\n  };\\n}\\n\\nexport default function(project, lobes) {\\n  var sphere = interpolateSphere(lobes);\\n\\n  lobes = lobes.map(function(lobe) {\\n    return lobe.map(function(l) {\\n      return [\\n        [l[0][0] * radians, l[0][1] * radians],\\n        [l[1][0] * radians, l[1][1] * radians],\\n        [l[2][0] * radians, l[2][1] * radians]\\n      ];\\n    });\\n  });\\n\\n  var bounds = lobes.map(function(lobe) {\\n    return lobe.map(function(l) {\\n      var x0 = project(l[0][0], l[0][1])[0],\\n          x1 = project(l[2][0], l[2][1])[0],\\n          y0 = project(l[1][0], l[0][1])[1],\\n          y1 = project(l[1][0], l[1][1])[1],\\n          t;\\n      if (y0 > y1) t = y0, y0 = y1, y1 = t;\\n      return [[x0, y0], [x1, y1]];\\n    });\\n  });\\n\\n  function forward(lambda, phi) {\\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\\n    var p = project(lambda - lobe[i][1][0], phi);\\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\\n    return p;\\n  }\\n\\n  // Assumes mutually exclusive bounding boxes for lobes.\\n  if (project.invert) forward.invert = function(x, y) {\\n    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\\n    for (var i = 0, n = bound.length; i < n; ++i) {\\n      var b = bound[i];\\n      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\\n        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\\n        p[0] += lobe[i][1][0];\\n        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\\n      }\\n    }\\n  };\\n\\n  var p = projection(forward),\\n      stream_ = p.stream;\\n\\n  p.stream = function(stream) {\\n    var rotate = p.rotate(),\\n        rotateStream = stream_(stream),\\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\\n    p.rotate(rotate);\\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\\n    return rotateStream;\\n  };\\n\\n  return p;\\n}\\n\",\"import {boggsRaw} from \\\"../boggs\\\";\\nimport interrupt from \\\"./index\\\";\\n\\nvar lobes = [[ // northern hemisphere\\n  [[-180,   0], [-100,  90], [ -40,   0]],\\n  [[ -40,   0], [  30,  90], [ 180,   0]]\\n], [ // southern hemisphere\\n  [[-180,   0], [-160, -90], [-100,   0]],\\n  [[-100,   0], [ -60, -90], [ -20,   0]],\\n  [[ -20,   0], [  20, -90], [  80,   0]],\\n  [[  80,   0], [ 140, -90], [ 180,   0]]\\n]];\\n\\nexport default function() {\\n  return interrupt(boggsRaw, lobes)\\n      .scale(160.857);\\n}\\n\",\"import {homolosineRaw} from \\\"../homolosine\\\";\\nimport interrupt from \\\"./index\\\";\\n\\nvar lobes = [[ // northern hemisphere\\n  [[-180,   0], [-100,  90], [ -40,   0]],\\n  [[ -40,   0], [  30,  90], [ 180,   0]]\\n], [ // southern hemisphere\\n  [[-180,   0], [-160, -90], [-100,   0]],\\n  [[-100,   0], [ -60, -90], [ -20,   0]],\\n  [[ -20,   0], [  20, -90], [  80,   0]],\\n  [[  80,   0], [ 140, -90], [ 180,   0]]\\n]];\\n\\nexport default function() {\\n  return interrupt(homolosineRaw, lobes)\\n      .scale(152.63);\\n}\\n\",\"import {mollweideRaw} from \\\"../mollweide\\\";\\nimport interrupt from \\\"./index\\\";\\n\\nvar lobes = [[ // northern hemisphere\\n  [[-180,   0], [-100,  90], [ -40,   0]],\\n  [[ -40,   0], [  30,  90], [ 180,   0]]\\n], [ // southern hemisphere\\n  [[-180,   0], [-160, -90], [-100,   0]],\\n  [[-100,   0], [ -60, -90], [ -20,   0]],\\n  [[ -20,   0], [  20, -90], [  80,   0]],\\n  [[  80,   0], [ 140, -90], [ 180,   0]]\\n]];\\n\\nexport default function() {\\n  return interrupt(mollweideRaw, lobes)\\n      .scale(169.529);\\n}\\n\",\"import {mollweideRaw} from \\\"../mollweide\\\";\\nimport interrupt from \\\"./index\\\";\\n\\nvar lobes = [[ // northern hemisphere\\n  [[-180,   0], [ -90,  90], [   0,   0]],\\n  [[   0,   0], [  90,  90], [ 180,   0]]\\n], [ // southern hemisphere\\n  [[-180,   0], [ -90, -90], [   0,   0]],\\n  [[   0,   0], [  90, -90], [ 180,   0]]\\n]];\\n\\nexport default function() {\\n  return interrupt(mollweideRaw, lobes)\\n      .scale(169.529)\\n      .rotate([20, 0]);\\n}\\n\",\"import {sinuMollweideRaw} from \\\"../sinuMollweide\\\";\\nimport interrupt from \\\"./index\\\";\\n\\nvar lobes = [[ // northern hemisphere\\n  [[-180,  35], [ -30,  90], [   0,  35]],\\n  [[   0,  35], [  30,  90], [ 180,  35]]\\n], [ // southern hemisphere\\n  [[-180, -10], [-102, -90], [ -65, -10]],\\n  [[ -65, -10], [   5, -90], [  77, -10]],\\n  [[  77, -10], [ 103, -90], [ 180, -10]]\\n]];\\n\\nexport default function() {\\n  return interrupt(sinuMollweideRaw, lobes)\\n      .rotate([-20, -55])\\n      .scale(164.263)\\n      .center([0, -5.4036]);\\n}\\n\",\"import {sinusoidalRaw} from \\\"../sinusoidal\\\";\\nimport interrupt from \\\"./index\\\";\\n\\nvar lobes = [[ // northern hemisphere\\n  [[-180,   0], [-110,  90], [ -40,   0]],\\n  [[ -40,   0], [   0,  90], [  40,   0]],\\n  [[  40,   0], [ 110,  90], [ 180,   0]]\\n], [ // southern hemisphere\\n  [[-180,   0], [-110, -90], [ -40,   0]],\\n  [[ -40,   0], [   0, -90], [  40,   0]],\\n  [[  40,   0], [ 110, -90], [ 180,   0]]\\n]];\\n\\nexport default function() {\\n  return interrupt(sinusoidalRaw, lobes)\\n      .scale(152.63)\\n      .rotate([-20, 0]);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {pi, sqrt, tau} from \\\"./math\\\";\\n\\nexport function kavrayskiy7Raw(lambda, phi) {\\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\\n}\\n\\nkavrayskiy7Raw.invert = function(x, y) {\\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\\n};\\n\\nexport default function() {\\n  return projection(kavrayskiy7Raw)\\n      .scale(158.837);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \\\"./math\\\";\\n\\nexport function lagrangeRaw(n) {\\n\\n  function forward(lambda, phi) {\\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\\n    var sinPhi = sin(phi),\\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\\n    return [\\n      2 * sin(lambda) / c,\\n      (v - 1 / v) / c\\n    ];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var y0 = abs(y);\\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\\n    if (y0 > 2) return null;\\n\\n    x /= 2, y /= 2;\\n    var x2 = x * x,\\n        y2 = y * y,\\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\\n    t = pow((1 + t) / (1 - t), 1 / n);\\n    return [\\n      atan2(2 * x, 1 - x2 - y2) / n,\\n      asin((t - 1) / (t + 1))\\n    ];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  var n = 0.5,\\n      m = projectionMutator(lagrangeRaw),\\n      p = m(n);\\n\\n  p.spacing = function(_) {\\n    return arguments.length ? m(n = +_) : n;\\n  };\\n\\n  return p\\n      .scale(124.75);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \\\"./math\\\";\\n\\nvar pi_sqrt2 = pi / sqrt2;\\n\\nexport function larriveeRaw(lambda, phi) {\\n  return [\\n    lambda * (1 + sqrt(cos(phi))) / 2,\\n    phi / (cos(phi / 2) * cos(lambda / 6))\\n  ];\\n}\\n\\nlarriveeRaw.invert = function(x, y) {\\n  var x0 = abs(x),\\n      y0 = abs(y),\\n      lambda = epsilon,\\n      phi = halfPi;\\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\\n  else lambda += 6 * acos(pi_sqrt2 / y0);\\n  for (var i = 0; i < 25; i++) {\\n    var sinPhi = sin(phi),\\n        sqrtcosPhi = sqrt(cos(phi)),\\n        sinPhi_2 = sin(phi / 2),\\n        cosPhi_2 = cos(phi / 2),\\n        sinLambda_6 = sin(lambda / 6),\\n        cosLambda_6 = cos(lambda / 6),\\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\\n    phi -= dPhi;\\n    lambda -= dLambda;\\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\\n  }\\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\\n};\\n\\nexport default function() {\\n  return projection(larriveeRaw)\\n      .scale(97.2672);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, epsilon, pi, sign} from \\\"./math\\\";\\n\\nexport function laskowskiRaw(lambda, phi) {\\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\\n  return [\\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\\n  ];\\n}\\n\\nlaskowskiRaw.invert = function(x, y) {\\n  var lambda = sign(x) * pi,\\n      phi = y / 2,\\n      i = 50;\\n  do {\\n    var lambda2 = lambda * lambda,\\n        phi2 = phi * phi,\\n        lambdaPhi = lambda * phi,\\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\\n    lambda -= deltaLambda, phi -= deltaPhi;\\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\\n  return i && [lambda, phi];\\n};\\n\\nexport default function() {\\n  return projection(laskowskiRaw)\\n      .scale(139.98);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \\\"./math\\\";\\n\\nexport function littrowRaw(lambda, phi) {\\n  return [\\n    sin(lambda) / cos(phi),\\n    tan(phi) * cos(lambda)\\n  ];\\n}\\n\\nlittrowRaw.invert = function(x, y) {\\n  var x2 = x * x,\\n      y2 = y * y,\\n      y2_1 = y2 + 1,\\n      cosPhi = x\\n          ? sqrt1_2 * sqrt((y2_1 - sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1)\\n          : 1 / sqrt(y2_1);\\n  return [\\n    asin(x * cosPhi),\\n    sign(y) * acos(cosPhi)\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(littrowRaw)\\n      .scale(144.049)\\n      .clipAngle(90 - 1e-3);\\n}\\n\",\"import parallel1 from \\\"./parallel1\\\";\\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \\\"./math\\\";\\n\\nexport function loximuthalRaw(phi0) {\\n  var cosPhi0 = cos(phi0),\\n      tanPhi0 = tan(quarterPi + phi0 / 2);\\n\\n  function forward(lambda, phi) {\\n    var y = phi - phi0,\\n        x = abs(y) < epsilon ? lambda * cosPhi0\\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\\n    return [x, y];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var lambda,\\n        phi = y + phi0;\\n    return [\\n      abs(y) < epsilon ? x / cosPhi0\\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\\n          : x * log(tan(lambda) / tanPhi0) / y,\\n      phi\\n    ];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  return parallel1(loximuthalRaw)\\n      .parallel(40)\\n      .scale(158.837);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {atan, exp, log, quarterPi, pi, tan} from \\\"./math\\\";\\n\\nexport function millerRaw(lambda, phi) {\\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\\n}\\n\\nmillerRaw.invert = function(x, y) {\\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\\n};\\n\\nexport default function() {\\n  return projection(millerRaw)\\n      .scale(108.318);\\n}\\n\",\"import {geoProjection as projection, geoRotation as rotation} from \\\"d3-geo\\\";\\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \\\"./math\\\";\\n\\nexport function modifiedStereographicRaw(C) {\\n  var m = C.length - 1;\\n\\n  function forward(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        k = 2 / (1 + cosPhi * cos(lambda)),\\n        zr = k * cosPhi * sin(lambda),\\n        zi = k * sin(phi),\\n        i = m,\\n        w = C[i],\\n        ar = w[0],\\n        ai = w[1],\\n        t;\\n    while (--i >= 0) {\\n      w = C[i];\\n      ar = w[0] + zr * (t = ar) - zi * ai;\\n      ai = w[1] + zr * ai + zi * t;\\n    }\\n    ar = zr * (t = ar) - zi * ai;\\n    ai = zr * ai + zi * t;\\n    return [ar, ai];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var i = 20,\\n        zr = x,\\n        zi = y;\\n    do {\\n      var j = m,\\n          w = C[j],\\n          ar = w[0],\\n          ai = w[1],\\n          br = 0,\\n          bi = 0,\\n          t;\\n\\n      while (--j >= 0) {\\n        w = C[j];\\n        br = ar + zr * (t = br) - zi * bi;\\n        bi = ai + zr * bi + zi * t;\\n        ar = w[0] + zr * (t = ar) - zi * ai;\\n        ai = w[1] + zr * ai + zi * t;\\n      }\\n      br = ar + zr * (t = br) - zi * bi;\\n      bi = ai + zr * bi + zi * t;\\n      ar = zr * (t = ar) - zi * ai - x;\\n      ai = zr * ai + zi * t - y;\\n\\n      var denominator = br * br + bi * bi, deltar, deltai;\\n      zr -= deltar = (ar * br + ai * bi) / denominator;\\n      zi -= deltai = (ai * br - ar * bi) / denominator;\\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\\n\\n    if (i) {\\n      var rho = sqrt(zr * zr + zi * zi),\\n          c = 2 * atan(rho * 0.5),\\n          sinc = sin(c);\\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\\n    }\\n  };\\n\\n  return forward;\\n}\\n\\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\\n\\nexport function modifiedStereographicAlaska() {\\n  return modifiedStereographic(alaska, [152, -64])\\n      .scale(1500)\\n      .center([-160.908, 62.4864])\\n      .clipAngle(25);\\n}\\n\\nexport function modifiedStereographicGs48() {\\n  return modifiedStereographic(gs48, [95, -38])\\n      .scale(1000)\\n      .clipAngle(55)\\n      .center([-96.5563, 38.8675]);\\n}\\n\\nexport function modifiedStereographicGs50() {\\n  return modifiedStereographic(gs50, [120, -45])\\n      .scale(359.513)\\n      .clipAngle(55)\\n      .center([-117.474, 53.0628]);\\n}\\n\\nexport function modifiedStereographicMiller() {\\n  return modifiedStereographic(miller, [-20, -18])\\n      .scale(209.091)\\n      .center([20, 16.7214])\\n      .clipAngle(82);\\n}\\n\\nexport function modifiedStereographicLee() {\\n  return modifiedStereographic(lee, [165, 10])\\n      .scale(250)\\n      .clipAngle(130)\\n      .center([-165, -10]);\\n}\\n\\nexport default function modifiedStereographic(coefficients, rotate) {\\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\\n      r = rotation(rotate),\\n      center = p.center;\\n\\n  delete p.rotate;\\n\\n  p.center = function(_) {\\n    return arguments.length ? center(r(_)) : r.invert(center());\\n  };\\n\\n  return p;\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {asin, cos, sin, sqrt} from \\\"./math\\\";\\n\\nvar sqrt6 = sqrt(6),\\n    sqrt7 = sqrt(7);\\n\\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\\n  return [\\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\\n    9 * sin(theta / 3) / sqrt7\\n  ];\\n}\\n\\nmtFlatPolarParabolicRaw.invert = function(x, y) {\\n  var theta = 3 * asin(y * sqrt7 / 9);\\n  return [\\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\\n    asin(sin(theta) * 3 * sqrt6 / 7)\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(mtFlatPolarParabolicRaw)\\n      .scale(164.859);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \\\"./math\\\";\\n\\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\\n  var k = (1 + sqrt1_2) * sin(phi),\\n      theta = phi;\\n  for (var i = 0, delta; i < 25; i++) {\\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\\n    if (abs(delta) < epsilon) break;\\n  }\\n  return [\\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\\n  ];\\n}\\n\\nmtFlatPolarQuarticRaw.invert = function(x, y) {\\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\\n      theta = 2 * asin(sinTheta_2);\\n  return [\\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(mtFlatPolarQuarticRaw)\\n      .scale(188.209);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \\\"./math\\\";\\n\\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\\n  var A = sqrt(6 / (4 + pi)),\\n      k = (1 + pi / 4) * sin(phi),\\n      theta = phi / 2;\\n  for (var i = 0, delta; i < 25; i++) {\\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\\n    if (abs(delta) < epsilon) break;\\n  }\\n  return [\\n    A * (0.5 + cos(theta)) * lambda / 1.5,\\n    A * theta\\n  ];\\n}\\n\\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\\n  var A = sqrt(6 / (4 + pi)),\\n      theta = y / A;\\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\\n  return [\\n    1.5 * x / (A * (0.5 + cos(theta))),\\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(mtFlatPolarSinusoidalRaw)\\n      .scale(166.518);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, epsilon} from \\\"./math\\\";\\n\\nexport function naturalEarthRaw(lambda, phi) {\\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\\n  return [\\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\\n  ];\\n}\\n\\nnaturalEarthRaw.invert = function(x, y) {\\n  var phi = y, i = 25, delta;\\n  do {\\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\\n  } while (abs(delta) > epsilon && --i > 0);\\n  return [\\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\\n    phi\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(naturalEarthRaw)\\n      .scale(175.295);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, cos, epsilon, tan} from \\\"./math\\\";\\n\\nexport function nellHammerRaw(lambda, phi) {\\n  return [\\n    lambda * (1 + cos(phi)) / 2,\\n    2 * (phi - tan(phi / 2))\\n  ];\\n}\\n\\nnellHammerRaw.invert = function(x, y) {\\n  var p = y / 2;\\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\\n    var c = cos(y / 2);\\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\\n  }\\n  return [\\n    2 * x / (1 + cos(y)),\\n    y\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(nellHammerRaw)\\n      .scale(152.63);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, epsilon} from \\\"./math\\\";\\n\\n// Based on Java implementation by Bojan Savric.\\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\\n\\nvar pattersonK1 = 1.0148,\\n    pattersonK2 = 0.23185,\\n    pattersonK3 = -0.14499,\\n    pattersonK4 = 0.02406,\\n    pattersonC1 = pattersonK1,\\n    pattersonC2 = 5 * pattersonK2,\\n    pattersonC3 = 7 * pattersonK3,\\n    pattersonC4 = 9 * pattersonK4,\\n    pattersonYmax = 1.790857183;\\n\\nexport function pattersonRaw(lambda, phi) {\\n  var phi2 = phi * phi;\\n  return [\\n    lambda,\\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\\n  ];\\n}\\n\\npattersonRaw.invert = function(x, y) {\\n  if (y > pattersonYmax) y = pattersonYmax;\\n  else if (y < -pattersonYmax) y = -pattersonYmax;\\n  var yc = y, delta;\\n\\n  do { // Newton-Raphson\\n    var y2 = yc * yc;\\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\\n  } while (abs(delta) > epsilon);\\n\\n  return [x, yc];\\n};\\n\\nexport default function() {\\n  return projection(pattersonRaw)\\n      .scale(139.319);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \\\"./math\\\";\\n\\nexport function polyconicRaw(lambda, phi) {\\n  if (abs(phi) < epsilon) return [lambda, 0];\\n  var tanPhi = tan(phi),\\n      k = lambda * sin(phi);\\n  return [\\n    sin(k) / tanPhi,\\n    phi + (1 - cos(k)) / tanPhi\\n  ];\\n}\\n\\npolyconicRaw.invert = function(x, y) {\\n  if (abs(y) < epsilon) return [x, 0];\\n  var k = x * x + y * y,\\n      phi = y * 0.5,\\n      i = 10, delta;\\n  do {\\n    var tanPhi = tan(phi),\\n        secPhi = 1 / cos(phi),\\n        j = k - 2 * y * phi + phi * phi;\\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\\n  } while (abs(delta) > epsilon && --i > 0);\\n  tanPhi = tan(phi);\\n  return [\\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\\n    phi\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(polyconicRaw)\\n      .scale(103.74);\\n}\\n\",\"import {atan2, cos, sin, sqrt} from \\\"../math\\\";\\n\\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\\n// [a, b, c,\\n//  d, e, f,\\n//  0, 0, 1] - this redundant row is left out.\\n\\n// Transform matrix for [a0, a1] -> [b0, b1].\\nexport default function(a, b) {\\n  var u = subtract(a[1], a[0]),\\n      v = subtract(b[1], b[0]),\\n      phi = angle(u, v),\\n      s = length(u) / length(v);\\n\\n  return multiply([\\n    1, 0, a[0][0],\\n    0, 1, a[0][1]\\n  ], multiply([\\n    s, 0, 0,\\n    0, s, 0\\n  ], multiply([\\n    cos(phi), sin(phi), 0,\\n    -sin(phi), cos(phi), 0\\n  ], [\\n    1, 0, -b[0][0],\\n    0, 1, -b[0][1]\\n  ])));\\n}\\n\\n// Inverts a transform matrix.\\nexport function inverse(m) {\\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\\n  return [\\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\\n  ];\\n}\\n\\n// Multiplies two 3x2 matrices.\\nexport function multiply(a, b) {\\n  return [\\n    a[0] * b[0] + a[1] * b[3],\\n    a[0] * b[1] + a[1] * b[4],\\n    a[0] * b[2] + a[1] * b[5] + a[2],\\n    a[3] * b[0] + a[4] * b[3],\\n    a[3] * b[1] + a[4] * b[4],\\n    a[3] * b[2] + a[4] * b[5] + a[5]\\n  ];\\n}\\n\\n// Subtracts 2D vectors.\\nfunction subtract(a, b) {\\n  return [a[0] - b[0], a[1] - b[1]];\\n}\\n\\n// Magnitude of a 2D vector.\\nfunction length(v) {\\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\\n}\\n\\n// Angle between two 2D vectors.\\nfunction angle(a, b) {\\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\\n}\\n\",\"import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \\\"../math\\\";\\nimport {default as matrix, multiply, inverse} from \\\"./matrix\\\";\\n\\n// Creates a polyhedral projection.\\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\\n//    augmented with a transform matrix.\\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\\n//    point (radians).\\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\\n//    butterflies).\\nexport default function(root, face, r) {\\n\\n  r = r == null ? -pi / 6 : r; // TODO automate\\n\\n  recurse(root, {transform: [\\n    cos(r), sin(r), 0,\\n    -sin(r), cos(r), 0\\n  ]});\\n\\n  function recurse(node, parent) {\\n    node.edges = faceEdges(node.face);\\n    // Find shared edge.\\n    if (parent.face) {\\n      var shared = node.shared = sharedEdge(node.face, parent.face),\\n          m = matrix(shared.map(parent.project), shared.map(node.project));\\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\\n      // Replace shared edge in parent edges array.\\n      var edges = parent.edges;\\n      for (var i = 0, n = edges.length; i < n; ++i) {\\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\\n      }\\n      edges = node.edges;\\n      for (i = 0, n = edges.length; i < n; ++i) {\\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\\n      }\\n    } else {\\n      node.transform = parent.transform;\\n    }\\n    if (node.children) {\\n      node.children.forEach(function(child) {\\n        recurse(child, node);\\n      });\\n    }\\n    return node;\\n  }\\n\\n  function forward(lambda, phi) {\\n    var node = face(lambda, phi),\\n        point = node.project([lambda * degrees, phi * degrees]),\\n        t;\\n    if (t = node.transform) {\\n      return [\\n        t[0] * point[0] + t[1] * point[1] + t[2],\\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\\n      ];\\n    }\\n    point[1] = -point[1];\\n    return point;\\n  }\\n\\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\\n  // polygonal quadtree.\\n  if (hasInverse(root)) forward.invert = function(x, y) {\\n    var coordinates = faceInvert(root, [x, -y]);\\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\\n  };\\n\\n  function faceInvert(node, coordinates) {\\n    var invert = node.project.invert,\\n        t = node.transform,\\n        point = coordinates;\\n    if (t) {\\n      t = inverse(t);\\n      point = [\\n        t[0] * point[0] + t[1] * point[1] + t[2],\\n        (t[3] * point[0] + t[4] * point[1] + t[5])\\n      ];\\n    }\\n    if (invert && node === faceDegrees(p = invert(point))) return p;\\n    var p,\\n        children = node.children;\\n    for (var i = 0, n = children && children.length; i < n; ++i) {\\n      if (p = faceInvert(children[i], coordinates)) return p;\\n    }\\n  }\\n\\n  function faceDegrees(coordinates) {\\n    return face(coordinates[0] * radians, coordinates[1] * radians);\\n  }\\n\\n  var proj = projection(forward),\\n      stream_ = proj.stream;\\n\\n  proj.stream = function(stream) {\\n    var rotate = proj.rotate(),\\n        rotateStream = stream_(stream),\\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\\n    proj.rotate(rotate);\\n    rotateStream.sphere = function() {\\n      sphereStream.polygonStart();\\n      sphereStream.lineStart();\\n      outline(sphereStream, root);\\n      sphereStream.lineEnd();\\n      sphereStream.polygonEnd();\\n    };\\n    return rotateStream;\\n  };\\n\\n  return proj;\\n}\\n\\nfunction outline(stream, node, parent) {\\n  var point,\\n      edges = node.edges,\\n      n = edges.length,\\n      edge,\\n      multiPoint = {type: \\\"MultiPoint\\\", coordinates: node.face},\\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\\n      b = bounds({type: \\\"MultiPoint\\\", coordinates: notPoles}),\\n      inside = false,\\n      j = -1,\\n      dx = b[1][0] - b[0][0];\\n  // TODO\\n  var c = dx === 180 || dx === 360\\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\\n      : centroid(multiPoint);\\n  // First find the shared edge…\\n  if (parent) while (++j < n) {\\n    if (edges[j] === parent) break;\\n  }\\n  ++j;\\n  for (var i = 0; i < n; ++i) {\\n    edge = edges[(i + j) % n];\\n    if (Array.isArray(edge)) {\\n      if (!inside) {\\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\\n        inside = true;\\n      }\\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\\n    } else {\\n      inside = false;\\n      if (edge !== parent) outline(stream, edge, node);\\n    }\\n  }\\n}\\n\\n// Tests equality of two spherical points.\\nfunction pointEqual(a, b) {\\n  return a && b && a[0] === b[0] && a[1] === b[1];\\n}\\n\\n// Finds a shared edge given two clockwise polygons.\\nfunction sharedEdge(a, b) {\\n  var x, y, n = a.length, found = null;\\n  for (var i = 0; i < n; ++i) {\\n    x = a[i];\\n    for (var j = b.length; --j >= 0;) {\\n      y = b[j];\\n      if (x[0] === y[0] && x[1] === y[1]) {\\n        if (found) return [found, x];\\n        found = x;\\n      }\\n    }\\n  }\\n}\\n\\n// Converts an array of n face vertices to an array of n + 1 edges.\\nfunction faceEdges(face) {\\n  var n = face.length,\\n      edges = [];\\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\\n  return edges;\\n}\\n\\nfunction hasInverse(node) {\\n  return node.project.invert || node.children && node.children.some(hasInverse);\\n}\\n\",\"// TODO generate on-the-fly to avoid external modification.\\nvar octahedron = [\\n  [0, 90],\\n  [-90, 0], [0, 0], [90, 0], [180, 0],\\n  [0, -90]\\n];\\n\\nexport default [\\n  [0, 2, 1],\\n  [0, 3, 2],\\n  [5, 1, 2],\\n  [5, 2, 3],\\n  [0, 1, 4],\\n  [0, 4, 3],\\n  [5, 4, 1],\\n  [5, 3, 4]\\n].map(function(face) {\\n  return face.map(function(i) {\\n    return octahedron[i];\\n  });\\n});\\n\",\"import {geoCentroid as centroid, geoGnomonic as gnomonic} from \\\"d3-geo\\\";\\nimport {pi} from \\\"../math\\\";\\nimport polyhedral from \\\"./index\\\";\\nimport octahedron from \\\"./octahedron\\\";\\n\\nexport default function(faceProjection) {\\n\\n  faceProjection = faceProjection || function(face) {\\n    var c = centroid({type: \\\"MultiPoint\\\", coordinates: face});\\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\\n  };\\n\\n  var faces = octahedron.map(function(face) {\\n    return {face: face, project: faceProjection(face)};\\n  });\\n\\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\\n    var node = faces[d];\\n    node && (node.children || (node.children = [])).push(faces[i]);\\n  });\\n\\n  return polyhedral(faces[0], function(lambda, phi) {\\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\\n            : lambda < 0 ? phi < 0 ? 2 : 0\\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\\n            : phi < 0 ? 7 : 5];\\n      })\\n      .scale(101.858)\\n      .center([0, 45]);\\n}\\n\",\"import {geoCentroid as centroid, geoProjection as projection} from \\\"d3-geo\\\";\\nimport {collignonRaw} from \\\"../collignon\\\";\\nimport {pi, sqrt} from \\\"../math\\\";\\nimport polyhedral from \\\"./index\\\";\\nimport octahedron from \\\"./octahedron\\\";\\n\\nvar kx = 2 / sqrt(3);\\n\\nfunction collignonK(a, b) {\\n  var p = collignonRaw(a, b);\\n  return [p[0] * kx, p[1]];\\n}\\n\\ncollignonK.invert = function(x,y) {\\n  return collignonRaw.invert(x / kx, y);\\n};\\n\\nexport default function(faceProjection) {\\n\\n  faceProjection = faceProjection || function(face) {\\n    var c = centroid({type: \\\"MultiPoint\\\", coordinates: face});\\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\\n  };\\n\\n  var faces = octahedron.map(function(face) {\\n    return {face: face, project: faceProjection(face)};\\n  });\\n\\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\\n    var node = faces[d];\\n    node && (node.children || (node.children = [])).push(faces[i]);\\n  });\\n\\n  return polyhedral(faces[0], function(lambda, phi) {\\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\\n            : lambda < 0 ? phi < 0 ? 2 : 0\\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\\n            : phi < 0 ? 7 : 5];\\n      })\\n      .scale(121.906)\\n      .center([0, 48.5904]);\\n}\\n\",\"import {geoCentroid as centroid, geoGnomonic as gnomonic} from \\\"d3-geo\\\";\\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \\\"../math\\\";\\nimport polyhedral from \\\"./index\\\";\\nimport octahedron from \\\"./octahedron\\\";\\n\\nexport default function(faceProjection) {\\n\\n  faceProjection = faceProjection || function(face) {\\n    var c = face.length === 6 ? centroid({type: \\\"MultiPoint\\\", coordinates: face}) : face[0];\\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\\n  };\\n\\n  var w5 = octahedron.map(function(face) {\\n    var xyz = face.map(cartesian),\\n        n = xyz.length,\\n        a = xyz[n - 1],\\n        b,\\n        hexagon = [];\\n    for (var i = 0; i < n; ++i) {\\n      b = xyz[i];\\n      hexagon.push(spherical([\\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\\n      ]), spherical([\\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\\n      ]));\\n      a = b;\\n    }\\n    return hexagon;\\n  });\\n\\n  var cornerNormals = [];\\n\\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\\n\\n  w5.forEach(function(hexagon, j) {\\n    var face = octahedron[j],\\n        n = face.length,\\n        normals = cornerNormals[j] = [];\\n    for (var i = 0; i < n; ++i) {\\n      w5.push([\\n        face[i],\\n        hexagon[(i * 2 + 2) % (2 * n)],\\n        hexagon[(i * 2 + 1) % (2 * n)]\\n      ]);\\n      parents.push(j);\\n      normals.push(cross(\\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\\n      ));\\n    }\\n  });\\n\\n  var faces = w5.map(function(face) {\\n    return {\\n      project: faceProjection(face),\\n      face: face\\n    };\\n  });\\n\\n  parents.forEach(function(d, i) {\\n    var parent = faces[d];\\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\\n  });\\n\\n  function face(lambda, phi) {\\n    var cosphi = cos(phi),\\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\\n\\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\\n        : lambda < 0 ? phi < 0 ? 2 : 0\\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\\n        : phi < 0 ? 7 : 5;\\n\\n    var n = cornerNormals[hexagon];\\n\\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\\n        : hexagon];\\n  }\\n\\n  return polyhedral(faces[0], face)\\n      .scale(110.625)\\n      .center([0,45]);\\n}\\n\\nfunction dot(a, b) {\\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\\n  return s;\\n}\\n\\nfunction cross(a, b) {\\n  return [\\n    a[1] * b[2] - a[2] * b[1],\\n    a[2] * b[0] - a[0] * b[2],\\n    a[0] * b[1] - a[1] * b[0]\\n  ];\\n}\\n\\n// Converts 3D Cartesian to spherical coordinates (degrees).\\nfunction spherical(cartesian) {\\n  return [\\n    atan2(cartesian[1], cartesian[0]) * degrees,\\n    asin(max(-1, min(1, cartesian[2]))) * degrees\\n  ];\\n}\\n\\n// Converts spherical coordinates (degrees) to 3D Cartesian.\\nfunction cartesian(coordinates) {\\n  var lambda = coordinates[0] * radians,\\n      phi = coordinates[1] * radians,\\n      cosphi = cos(phi);\\n  return [\\n    cosphi * cos(lambda),\\n    cosphi * sin(lambda),\\n    sin(phi)\\n  ];\\n}\\n\",\"export default function() {}\\n\",\"import {geoStream} from \\\"d3-geo\\\";\\nimport noop from \\\"../noop\\\";\\nimport clockwise from \\\"./clockwise\\\";\\nimport contains from \\\"./contains\\\";\\n\\nexport default function(object, projection) {\\n  var stream = projection.stream, project;\\n  if (!stream) throw new Error(\\\"invalid projection\\\");\\n  switch (object && object.type) {\\n    case \\\"Feature\\\": project = projectFeature; break;\\n    case \\\"FeatureCollection\\\": project = projectFeatureCollection; break;\\n    default: project = projectGeometry; break;\\n  }\\n  return project(object, stream);\\n}\\n\\nfunction projectFeatureCollection(o, stream) {\\n  return {\\n    type: \\\"FeatureCollection\\\",\\n    features: o.features.map(function(f) {\\n      return projectFeature(f, stream);\\n    })\\n  };\\n}\\n\\nfunction projectFeature(o, stream) {\\n  return {\\n    type: \\\"Feature\\\",\\n    id: o.id,\\n    properties: o.properties,\\n    geometry: projectGeometry(o.geometry, stream)\\n  };\\n}\\n\\nfunction projectGeometryCollection(o, stream) {\\n  return {\\n    type: \\\"GeometryCollection\\\",\\n    geometries: o.geometries.map(function(o) {\\n      return projectGeometry(o, stream);\\n    })\\n  };\\n}\\n\\nfunction projectGeometry(o, stream) {\\n  if (!o) return null;\\n  if (o.type === \\\"GeometryCollection\\\") return projectGeometryCollection(o, stream);\\n  var sink;\\n  switch (o.type) {\\n    case \\\"Point\\\": sink = sinkPoint; break;\\n    case \\\"MultiPoint\\\": sink = sinkPoint; break;\\n    case \\\"LineString\\\": sink = sinkLine; break;\\n    case \\\"MultiLineString\\\": sink = sinkLine; break;\\n    case \\\"Polygon\\\": sink = sinkPolygon; break;\\n    case \\\"MultiPolygon\\\": sink = sinkPolygon; break;\\n    case \\\"Sphere\\\": sink = sinkPolygon; break;\\n    default: return null;\\n  }\\n  geoStream(o, stream(sink));\\n  return sink.result();\\n}\\n\\nvar points = [],\\n    lines = [];\\n\\nvar sinkPoint = {\\n  point: function(x, y) {\\n    points.push([x, y]);\\n  },\\n  result: function() {\\n    var result = !points.length ? null\\n        : points.length < 2 ? {type: \\\"Point\\\", coordinates: points[0]}\\n        : {type: \\\"MultiPoint\\\", coordinates: points};\\n    points = [];\\n    return result;\\n  }\\n};\\n\\nvar sinkLine = {\\n  lineStart: noop,\\n  point: function(x, y) {\\n    points.push([x, y]);\\n  },\\n  lineEnd: function() {\\n    if (points.length) lines.push(points), points = [];\\n  },\\n  result: function() {\\n    var result = !lines.length ? null\\n        : lines.length < 2 ? {type: \\\"LineString\\\", coordinates: lines[0]}\\n        : {type: \\\"MultiLineString\\\", coordinates: lines};\\n    lines = [];\\n    return result;\\n  }\\n};\\n\\nvar sinkPolygon = {\\n  polygonStart: noop,\\n  lineStart: noop,\\n  point: function(x, y) {\\n    points.push([x, y]);\\n  },\\n  lineEnd: function() {\\n    var n = points.length;\\n    if (n) {\\n      do points.push(points[0].slice()); while (++n < 4);\\n      lines.push(points), points = [];\\n    }\\n  },\\n  polygonEnd: noop,\\n  result: function() {\\n    if (!lines.length) return null;\\n    var polygons = [],\\n        holes = [];\\n\\n    // https://github.com/d3/d3/issues/1558\\n    lines.forEach(function(ring) {\\n      if (clockwise(ring)) polygons.push([ring]);\\n      else holes.push(ring);\\n    });\\n\\n    holes.forEach(function(hole) {\\n      var point = hole[0];\\n      polygons.some(function(polygon) {\\n        if (contains(polygon[0], point)) {\\n          polygon.push(hole);\\n          return true;\\n        }\\n      }) || polygons.push([hole]);\\n    });\\n\\n    lines = [];\\n\\n    return !polygons.length ? null\\n        : polygons.length > 1 ? {type: \\\"MultiPolygon\\\", coordinates: polygons}\\n        : {type: \\\"Polygon\\\", coordinates: polygons[0]};\\n  }\\n};\\n\",\"export default function(ring) {\\n  if ((n = ring.length) < 4) return false;\\n  var i = 0,\\n      n,\\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\\n  return area <= 0;\\n}\\n\",\"export default function(ring, point) {\\n  var x = point[0],\\n      y = point[1],\\n      contains = false;\\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\\n    var pi = ring[i], xi = pi[0], yi = pi[1],\\n        pj = ring[j], xj = pj[0], yj = pj[1];\\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\\n  }\\n  return contains;\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, halfPi, pi, sign, sqrt1_2} from \\\"../math\\\";\\n\\nexport default function(project) {\\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\\n\\n  function projectQuincuncial(lambda, phi) {\\n    var t = abs(lambda) < halfPi,\\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\\n        x = (p[0] - p[1]) * sqrt1_2,\\n        y = (p[0] + p[1]) * sqrt1_2;\\n    if (t) return [x, y];\\n    var d = dx * sqrt1_2,\\n        s = x > 0 ^ y > 0 ? -1 : 1;\\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\\n  }\\n\\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\\n    var x = (x0 + y0) * sqrt1_2,\\n        y = (y0 - x0) * sqrt1_2,\\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\\n\\n    if (!t) {\\n      var d = dx * sqrt1_2,\\n          s = x > 0 ^ y > 0 ? -1 : 1,\\n          x1 = -s * (x0 + (y > 0 ? 1 : -1) * d),\\n          y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);\\n      x = (-x1 - y1) * sqrt1_2;\\n      y = (x1 - y1) * sqrt1_2;\\n    }\\n\\n    var p = project.invert(x, y);\\n    if (!t) p[0] += x > 0 ? pi : -pi;\\n    return p;\\n  };\\n\\n  return projection(projectQuincuncial)\\n      .rotate([-90, -90, 45])\\n      .clipAngle(180 - 1e-3);\\n}\\n\",\"import {gringortenRaw} from \\\"../gringorten\\\";\\nimport quincuncial from \\\"./index\\\";\\n\\nexport default function() {\\n  return quincuncial(gringortenRaw)\\n      .scale(176.423);\\n}\\n\",\"import {guyouRaw} from \\\"../guyou\\\";\\nimport quincuncial from \\\"./index\\\";\\n\\nexport default function() {\\n  return quincuncial(guyouRaw)\\n      .scale(111.48);\\n}\\n\",\"export default function(o, digits) {\\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\\\"invalid digits\\\");\\n\\n  function quantizePoint(coordinates) {\\n    coordinates[0] = +coordinates[0].toFixed(digits);\\n    coordinates[1] = +coordinates[1].toFixed(digits);\\n  }\\n\\n  function quantizePoints(coordinates) {\\n    coordinates.forEach(quantizePoint);\\n  }\\n\\n  function quantizePolygon(coordinates) {\\n    coordinates.forEach(quantizePoints);\\n  }\\n\\n  function quantizeGeometry(o) {\\n    if (o) switch (o.type) {\\n      case \\\"GeometryCollection\\\": o.geometries.forEach(quantizeGeometry); break;\\n      case \\\"Point\\\": quantizePoint(o.coordinates); break;\\n      case \\\"MultiPoint\\\": case \\\"LineString\\\": quantizePoints(o.coordinates); break;\\n      case \\\"MultiLineString\\\": case \\\"Polygon\\\": quantizePolygon(o.coordinates); break;\\n      case \\\"MultiPolygon\\\": o.coordinates.forEach(quantizePolygon); break;\\n      default: return;\\n    }\\n  }\\n\\n  function quantizeFeature(o) {\\n    quantizeGeometry(o.geometry);\\n  }\\n\\n  if (o) switch (o.type) {\\n    case \\\"Feature\\\": quantizeFeature(o); break;\\n    case \\\"FeatureCollection\\\": o.features.forEach(quantizeFeature); break;\\n    default: quantizeGeometry(o); break;\\n  }\\n\\n  return o;\\n}\\n\",\"import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \\\"./math\\\";\\nimport parallel1 from \\\"./parallel1\\\";\\n\\nexport function rectangularPolyconicRaw(phi0) {\\n  var sinPhi0 = sin(phi0);\\n\\n  function forward(lambda, phi) {\\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\\n    if (!phi) return [2 * A, -phi0];\\n    var E = 2 * atan(A * sin(phi)),\\n        cotPhi = 1 / tan(phi);\\n    return [\\n      sin(E) * cotPhi,\\n      phi + (1 - cos(E)) * cotPhi - phi0\\n    ];\\n  }\\n\\n  // TODO return null for points outside outline.\\n  forward.invert = function(x, y) {\\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\\n    var k = x * x + y * y,\\n        phi = 0,\\n        i = 10, delta;\\n    do {\\n      var tanPhi = tan(phi),\\n          secPhi = 1 / cos(phi),\\n          j = k - 2 * y * phi + phi * phi;\\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\\n    } while (abs(delta) > epsilon && --i > 0);\\n    var E = x * (tanPhi = tan(phi)),\\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\\n    return [\\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\\n      phi\\n    ];\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  return parallel1(rectangularPolyconicRaw)\\n      .scale(131.215);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \\\"./math\\\";\\n\\nvar K = [\\n  [0.9986, -0.062],\\n  [1.0000, 0.0000],\\n  [0.9986, 0.0620],\\n  [0.9954, 0.1240],\\n  [0.9900, 0.1860],\\n  [0.9822, 0.2480],\\n  [0.9730, 0.3100],\\n  [0.9600, 0.3720],\\n  [0.9427, 0.4340],\\n  [0.9216, 0.4958],\\n  [0.8962, 0.5571],\\n  [0.8679, 0.6176],\\n  [0.8350, 0.6769],\\n  [0.7986, 0.7346],\\n  [0.7597, 0.7903],\\n  [0.7186, 0.8435],\\n  [0.6732, 0.8936],\\n  [0.6213, 0.9394],\\n  [0.5722, 0.9761],\\n  [0.5322, 1.0000]\\n];\\n\\nK.forEach(function(d) {\\n  d[1] *= 1.0144;\\n});\\n\\nexport function robinsonRaw(lambda, phi) {\\n  var i = min(18, abs(phi) * 36 / pi),\\n      i0 = floor(i),\\n      di = i - i0,\\n      ax = (k = K[i0])[0],\\n      ay = k[1],\\n      bx = (k = K[++i0])[0],\\n      by = k[1],\\n      cx = (k = K[min(19, ++i0)])[0],\\n      cy = k[1],\\n      k;\\n  return [\\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\\n  ];\\n}\\n\\nrobinsonRaw.invert = function(x, y) {\\n  var yy = y / halfPi,\\n      phi = yy * 90,\\n      i = min(18, abs(phi / 5)),\\n      i0 = max(0, floor(i));\\n  do {\\n    var ay = K[i0][1],\\n        by = K[i0 + 1][1],\\n        cy = K[min(19, i0 + 2)][1],\\n        u = cy - ay,\\n        v = cy - 2 * by + ay,\\n        t = 2 * (abs(yy) - by) / u,\\n        c = v / u,\\n        di = t * (1 - c * t * (1 - 2 * c * t));\\n    if (di >= 0 || i0 === 1) {\\n      phi = (y >= 0 ? 5 : -5) * (di + i);\\n      var j = 50, delta;\\n      do {\\n        i = min(18, abs(phi) / 5);\\n        i0 = floor(i);\\n        di = i - i0;\\n        ay = K[i0][1];\\n        by = K[i0 + 1][1];\\n        cy = K[min(19, i0 + 2)][1];\\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\\n      } while (abs(delta) > epsilon2 && --j > 0);\\n      break;\\n    }\\n  } while (--i0 >= 0);\\n  var ax = K[i0][0],\\n      bx = K[i0 + 1][0],\\n      cx = K[min(19, i0 + 2)][0];\\n  return [\\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\\n    phi * radians\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(robinsonRaw)\\n      .scale(152.63);\\n}\\n\",\"import {geoProjectionMutator as projectionMutator} from \\\"d3-geo\\\";\\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \\\"./math\\\";\\n\\nfunction satelliteVerticalRaw(P) {\\n  function forward(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        k = (P - 1) / (P - cosPhi * cos(lambda));\\n    return [\\n      k * cosPhi * sin(lambda),\\n      k * sin(phi)\\n    ];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var rho2 = x * x + y * y,\\n        rho = sqrt(rho2),\\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\\n    return [\\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\\n      rho ? asin(y * sinc / rho) : 0\\n    ];\\n  };\\n\\n  return forward;\\n}\\n\\nexport function satelliteRaw(P, omega) {\\n  var vertical = satelliteVerticalRaw(P);\\n  if (!omega) return vertical;\\n  var cosOmega = cos(omega),\\n      sinOmega = sin(omega);\\n\\n  function forward(lambda, phi) {\\n    var coordinates = vertical(lambda, phi),\\n        y = coordinates[1],\\n        A = y * sinOmega / (P - 1) + cosOmega;\\n    return [\\n      coordinates[0] * cosOmega / A,\\n      y / A\\n    ];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var k = (P - 1) / (P - 1 - y * sinOmega);\\n    return vertical.invert(k * x, k * y * cosOmega);\\n  };\\n\\n  return forward;\\n}\\n\\nexport default function() {\\n  var distance = 2,\\n      omega = 0,\\n      m = projectionMutator(satelliteRaw),\\n      p = m(distance, omega);\\n\\n  // As a multiple of radius.\\n  p.distance = function(_) {\\n    if (!arguments.length) return distance;\\n    return m(distance = +_, omega);\\n  };\\n\\n  p.tilt = function(_) {\\n    if (!arguments.length) return omega * degrees;\\n    return m(distance, omega = _ * radians);\\n  };\\n\\n  return p\\n      .scale(432.147)\\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\\n}\\n\",\"var epsilon = 1e-4,\\n    epsilonInverse = 1e4,\\n    x0 = -180, x0e = x0 + epsilon,\\n    x1 = 180, x1e = x1 - epsilon,\\n    y0 = -90, y0e = y0 + epsilon,\\n    y1 = 90, y1e = y1 - epsilon;\\n\\nfunction quantize(x) {\\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\\n}\\n\\nfunction normalizePoint(y) {\\n  return y === y0 || y === y1\\n      ? [0, y] // pole\\n      : [x0, quantize(y)]; // antimeridian\\n}\\n\\nfunction clampPoint(p) {\\n  if (p[0] <= x0e) p[0] = x0;\\n  else if (p[0] >= x1e) p[0] = x1;\\n  if (p[1] <= y0e) p[1] = y0;\\n  else if (p[1] >= y1e) p[1] = y1;\\n}\\n\\nfunction clampPoints(points) {\\n  points.forEach(clampPoint);\\n}\\n\\n// For each ring, detect where it crosses the antimeridian or pole.\\nfunction extractFragments(polygon, fragments) {\\n  for (var j = 0, m = polygon.length; j < m; ++j) {\\n    var ring = polygon[j];\\n    ring.polygon = polygon;\\n\\n    // By default, assume that this ring doesn’t need any stitching.\\n    fragments.push(ring);\\n\\n    for (var i = 0, n = ring.length; i < n; ++i) {\\n      var point = ring[i],\\n          x = point[0],\\n          y = point[1];\\n\\n      // If this is an antimeridian or polar point…\\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\\n        clampPoint(point);\\n\\n        // Advance through any antimeridian or polar points…\\n        for (var k = i + 1; k < n; ++k) {\\n          var pointk = ring[k],\\n              xk = pointk[0],\\n              yk = pointk[1];\\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\\n        }\\n\\n        // If this was just a single antimeridian or polar point,\\n        // we don’t need to cut this ring into a fragment;\\n        // we can just leave it as-is.\\n        if (k === i + 1) continue;\\n\\n        // Otherwise, if this is not the first point in the ring,\\n        // cut the current fragment so that it ends at the current point.\\n        // The current point is also normalized for later joining.\\n        if (i) {\\n          var fragmentBefore = ring.slice(0, i + 1);\\n          fragmentBefore.polygon = polygon;\\n          fragmentBefore[fragmentBefore.length - 1] = normalizePoint(y);\\n          fragments[fragments.length - 1] = fragmentBefore;\\n        }\\n\\n        // If the ring started with an antimeridian fragment,\\n        // we can ignore that fragment entirely.\\n        else fragments.pop();\\n\\n        // If the remainder of the ring is an antimeridian fragment,\\n        // move on to the next ring.\\n        if (k >= n) break;\\n\\n        // Otherwise, add the remaining ring fragment and continue.\\n        fragments.push(ring = ring.slice(k - 1));\\n        ring[0] = normalizePoint(ring[0][1]);\\n        ring.polygon = polygon;\\n        i = -1;\\n        n = ring.length;\\n      }\\n    }\\n  }\\n  polygon.length = 0;\\n}\\n\\n// Now stitch the fragments back together into rings.\\n// TODO remove empty polygons.\\nfunction stitchFragments(fragments) {\\n  var i, n = fragments.length;\\n\\n  // To connect the fragments start-to-end, create a simple index by end.\\n  var fragmentByStart = {},\\n      fragmentByEnd = {},\\n      fragment,\\n      start,\\n      startFragment,\\n      end,\\n      endFragment;\\n\\n  // For each fragment…\\n  for (i = 0; i < n; ++i) {\\n    fragment = fragments[i];\\n    start = fragment[0];\\n    end = fragment[fragment.length - 1];\\n\\n    // If this fragment is closed, add it as a standalone ring.\\n    if (start[0] === end[0] && start[1] === end[1]) {\\n      fragment.polygon.push(fragment);\\n      fragments[i] = null;\\n      continue;\\n    }\\n\\n    fragment.index = i;\\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\\n  }\\n\\n  // For each open fragment…\\n  for (i = 0; i < n; ++i) {\\n    fragment = fragments[i];\\n    if (fragment) {\\n      start = fragment[0];\\n      end = fragment[fragment.length - 1];\\n      startFragment = fragmentByEnd[start];\\n      endFragment = fragmentByStart[end];\\n\\n      delete fragmentByStart[start];\\n      delete fragmentByEnd[end];\\n\\n      // If this fragment is closed, add it as a standalone ring.\\n      if (start[0] === end[0] && start[1] === end[1]) {\\n        fragment.polygon.push(fragment);\\n        continue;\\n      }\\n\\n      if (startFragment) {\\n        delete fragmentByEnd[start];\\n        delete fragmentByStart[startFragment[0]];\\n        startFragment.pop(); // drop the shared coordinate\\n        fragments[startFragment.index] = null;\\n        fragment = startFragment.concat(fragment);\\n        fragment.polygon = startFragment.polygon;\\n\\n        if (startFragment === endFragment) {\\n          // Connect both ends to this single fragment to create a ring.\\n          fragment.polygon.push(fragment);\\n        } else {\\n          fragment.index = n++;\\n          fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\\n        }\\n      } else if (endFragment) {\\n        delete fragmentByStart[end];\\n        delete fragmentByEnd[endFragment[endFragment.length - 1]];\\n        fragment.pop(); // drop the shared coordinate\\n        fragment = fragment.concat(endFragment);\\n        fragment.polygon = endFragment.polygon;\\n        fragment.index = n++;\\n        fragments[endFragment.index] = null;\\n        fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\\n      } else {\\n        fragment.push(fragment[0]); // close ring\\n        fragment.polygon.push(fragment);\\n      }\\n    }\\n  }\\n}\\n\\nfunction stitchFeature(o) {\\n  stitchGeometry(o.geometry);\\n}\\n\\nfunction stitchGeometry(o) {\\n  if (!o) return;\\n  var fragments, i, n;\\n\\n  switch (o.type) {\\n    case \\\"GeometryCollection\\\": {\\n      o.geometries.forEach(stitchGeometry);\\n      return;\\n    }\\n    case \\\"Point\\\": {\\n      clampPoint(o.coordinates);\\n      break;\\n    }\\n    case \\\"MultiPoint\\\":\\n    case \\\"LineString\\\": {\\n      clampPoints(o.coordinates);\\n      break;\\n    }\\n    case \\\"MultiLineString\\\": {\\n      o.coordinates.forEach(clampPoints);\\n      break;\\n    }\\n    case \\\"Polygon\\\": {\\n      extractFragments(o.coordinates, fragments = []);\\n      break;\\n    }\\n    case \\\"MultiPolygon\\\": {\\n      fragments = [], i = -1, n = o.coordinates.length;\\n      while (++i < n) extractFragments(o.coordinates[i], fragments);\\n      break;\\n    }\\n    default: return;\\n  }\\n\\n  stitchFragments(fragments);\\n}\\n\\nexport default function(o) {\\n  if (o) switch (o.type) {\\n    case \\\"Feature\\\": stitchFeature(o); break;\\n    case \\\"FeatureCollection\\\": o.features.forEach(stitchFeature); break;\\n    default: stitchGeometry(o); break;\\n  }\\n  return o;\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {atan, quarterPi, sin, tan} from \\\"./math\\\";\\n\\nexport function timesRaw(lambda, phi) {\\n  var t = tan(phi / 2),\\n      s = sin(quarterPi * t);\\n  return [\\n    lambda * (0.74482 - 0.34588 * s * s),\\n    1.70711 * t\\n  ];\\n}\\n\\ntimesRaw.invert = function(x, y) {\\n  var t = y / 1.70711,\\n      s = sin(quarterPi * t);\\n  return [\\n    x / (0.74482 - 0.34588 * s * s),\\n    2 * atan(t)\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(timesRaw)\\n      .scale(146.153);\\n}\\n\",\"import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \\\"d3-geo\\\";\\nimport {asin, degrees, pi, sin, radians} from \\\"./math\\\";\\n\\n// Compute the origin as the midpoint of the two reference points.\\n// Rotate one of the reference points by the origin.\\n// Apply the spherical law of sines to compute gamma rotation.\\nexport default function(raw, p0, p1) {\\n  var i = interpolate(p0, p1),\\n      o = i(0.5),\\n      a = rotation([-o[0], -o[1]])(p0),\\n      b = i.distance / 2,\\n      y = -asin(sin(a[1] * radians) / sin(b)),\\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\\n      p = projection(raw(b)).rotate(R),\\n      r = rotation(R),\\n      center = p.center;\\n\\n  delete p.rotate;\\n\\n  p.center = function(_) {\\n    return arguments.length ? center(r(_)) : r.invert(center());\\n  };\\n\\n  return p\\n      .clipAngle(90);\\n}\\n\",\"import {geoGnomonicRaw as gnomonicRaw} from \\\"d3-geo\\\";\\nimport {cos} from \\\"./math\\\";\\nimport twoPoint from \\\"./twoPoint\\\";\\n\\nexport function twoPointAzimuthalRaw(d) {\\n  var cosd = cos(d);\\n\\n  function forward(lambda, phi) {\\n    var coordinates = gnomonicRaw(lambda, phi);\\n    coordinates[0] *= cosd;\\n    return coordinates;\\n  }\\n\\n  forward.invert = function(x, y) {\\n    return gnomonicRaw.invert(x / cosd, y);\\n  };\\n\\n  return forward;\\n}\\n\\nexport function twoPointAzimuthalUsa() {\\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\\n      .clipAngle(60)\\n      .scale(400);\\n}\\n\\nexport default function twoPointAzimuthal(p0, p1) {\\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\\n}\\n\",\"import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \\\"d3-geo\\\";\\nimport {acos, atan2, cos, sin, sqrt, tan} from \\\"./math\\\";\\nimport twoPoint from \\\"./twoPoint\\\";\\n\\n// TODO clip to ellipse\\nexport function twoPointEquidistantRaw(z0) {\\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\\n  var lambdaa = -z0 / 2,\\n      lambdab = -lambdaa,\\n      z02 = z0 * z0,\\n      tanLambda0 = tan(lambdab),\\n      S = 0.5 / sin(lambdab);\\n\\n  function forward(lambda, phi) {\\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\\n        ys = phi < 0 ? -1 : 1;\\n    za *= za, zb *= zb;\\n    return [\\n      (za - zb) / (2 * z0),\\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\\n    ];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    var y2 = y * y,\\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\\n        t,\\n        d;\\n    return [\\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\\n    ];\\n  };\\n\\n  return forward;\\n}\\n\\nexport function twoPointEquidistantUsa() {\\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\\n      .clipAngle(130)\\n      .scale(122.571);\\n}\\n\\nexport default function twoPointEquidistant(p0, p1) {\\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \\\"./math\\\";\\n\\nexport function vanDerGrintenRaw(lambda, phi) {\\n  if (abs(phi) < epsilon) return [lambda, 0];\\n  var sinTheta = abs(phi / halfPi),\\n      theta = asin(sinTheta);\\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\\n  var cosTheta = cos(theta),\\n      A = abs(pi / lambda - lambda / pi) / 2,\\n      A2 = A * A,\\n      G = cosTheta / (sinTheta + cosTheta - 1),\\n      P = G * (2 / sinTheta - 1),\\n      P2 = P * P,\\n      P2_A2 = P2 + A2,\\n      G_P2 = G - P2,\\n      Q = A2 + G;\\n  return [\\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\\n  ];\\n}\\n\\nvanDerGrintenRaw.invert = function(x, y) {\\n  if (abs(y) < epsilon) return [x, 0];\\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\\n  var x2 = (x /= pi) * x,\\n      y2 = (y /= pi) * y,\\n      x2_y2 = x2 + y2,\\n      z = x2_y2 * x2_y2,\\n      c1 = -abs(y) * (1 + x2_y2),\\n      c2 = c1 - 2 * y2 + x2,\\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\\n      m1 = 2 * sqrt(-a1 / 3),\\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\\n  return [\\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(vanDerGrintenRaw)\\n      .scale(79.4183);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \\\"./math\\\";\\n\\nexport function vanDerGrinten2Raw(lambda, phi) {\\n  if (abs(phi) < epsilon) return [lambda, 0];\\n  var sinTheta = abs(phi / halfPi),\\n      theta = asin(sinTheta);\\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\\n  var cosTheta = cos(theta),\\n      A = abs(pi / lambda - lambda / pi) / 2,\\n      A2 = A * A,\\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\\n  return [\\n    sign(lambda) * pi * x1,\\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\\n  ];\\n}\\n\\nvanDerGrinten2Raw.invert = function(x, y) {\\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\\n  var x1 = abs(x / pi),\\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\\n      A2 = A * A,\\n      B = sqrt(A2 + 1);\\n  return [\\n    sign(x) * pi * (B - A),\\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(vanDerGrinten2Raw)\\n      .scale(79.4183);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \\\"./math\\\";\\n\\nexport function vanDerGrinten3Raw(lambda, phi) {\\n  if (abs(phi) < epsilon) return [lambda, 0];\\n  var sinTheta = phi / halfPi,\\n      theta = asin(sinTheta);\\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\\n  var A = (pi / lambda - lambda / pi) / 2,\\n      y1 = sinTheta / (1 + cos(theta));\\n  return [\\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\\n    pi * y1\\n  ];\\n}\\n\\nvanDerGrinten3Raw.invert = function(x, y) {\\n  if (!y) return [x, 0];\\n  var y1 = y / pi,\\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\\n  return [\\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\\n    halfPi * sin(2 * atan(y1))\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(vanDerGrinten3Raw)\\n        .scale(79.4183);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \\\"./math\\\";\\n\\nexport function vanDerGrinten4Raw(lambda, phi) {\\n  if (!phi) return [lambda, 0];\\n  var phi0 = abs(phi);\\n  if (!lambda || phi0 === halfPi) return [0, phi];\\n  var B = phi0 / halfPi,\\n      B2 = B * B,\\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\\n      C2 = C * C,\\n      BC = B * C,\\n      B_C2 = B2 + C2 + 2 * BC,\\n      B_3C = B + 3 * C,\\n      lambda0 = lambda / halfPi,\\n      lambda1 = lambda0 + 1 / lambda0,\\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\\n      D2 = D * D,\\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\\n  return [\\n    sign(lambda) * halfPi * x1,\\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\\n  ];\\n}\\n\\nvanDerGrinten4Raw.invert = function(x, y) {\\n  var delta;\\n  if (!x || !y) return [x, y];\\n  y /= pi;\\n  var x1 = sign(x) * x / halfPi,\\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\\n      D2 = D * D,\\n      B = 2 * y,\\n      i = 50;\\n  do {\\n    var B2 = B * B,\\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\\n        C2 = C * C,\\n        BC = B * C,\\n        B_C = B + C,\\n        B_C2 = B_C * B_C,\\n        B_3C = B + 3 * C,\\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\\n        sqrtF = sqrt(F),\\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\\n    B -= delta = f / f_;\\n  } while (delta > epsilon && --i > 0);\\n  return [\\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\\n    halfPi * B\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(vanDerGrinten4Raw)\\n      .scale(127.16);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {sqrt, pi} from \\\"./math\\\";\\nimport {mollweideBromleyRaw} from \\\"./mollweide\\\";\\n\\nvar A = 4 * pi + 3 * sqrt(3),\\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\\n\\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\\n\\nexport default function() {\\n  return projection(wagner4Raw)\\n      .scale(176.84);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {pi, sqrt} from \\\"./math\\\";\\n\\nexport function wagner6Raw(lambda, phi) {\\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\\n}\\n\\nwagner6Raw.invert = function(x, y) {\\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\\n};\\n\\nexport default function() {\\n  return projection(wagner6Raw)\\n      .scale(152.63);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {asin, atan2, cos, sin, sqrt, tan} from \\\"./math\\\";\\n\\nexport function wagner7Raw(lambda, phi) {\\n  var s = 0.90631 * sin(phi),\\n      c0 = sqrt(1 - s * s),\\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\\n  return [\\n    2.66723 * c0 * c1 * sin(lambda),\\n    1.24104 * s * c1\\n  ];\\n}\\n\\nwagner7Raw.invert = function(x, y) {\\n  var t1 = x / 2.66723,\\n      t2 = y / 1.24104,\\n      p = sqrt(t1 * t1 + t2 * t2),\\n      c = 2 * asin(p / 2);\\n  return [\\n    3 * atan2(x * tan(c), 2.66723 * p),\\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(wagner7Raw)\\n      .scale(172.632);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {asin, atan2, cos, sin, sqrt} from \\\"./math\\\";\\n\\nexport function wiechelRaw(lambda, phi) {\\n  var cosPhi = cos(phi),\\n      sinPhi = cos(lambda) * cosPhi,\\n      sin1_Phi = 1 - sinPhi,\\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\\n      sinLambda = sin(lambda);\\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\\n  return [\\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\\n  ];\\n}\\n\\nwiechelRaw.invert = function(x, y) {\\n  var w = (x * x + y * y) / -2,\\n      k = sqrt(-w * (2 + w)),\\n      b = y * w + x * k,\\n      a = x * w - y * k,\\n      D = sqrt(a * a + b * b);\\n  return [\\n    atan2(k * b, D * (1 + w)),\\n    D ? -asin(k * a / D) : 0\\n  ];\\n};\\n\\nexport default function() {\\n  return projection(wiechelRaw)\\n      .rotate([0, -90, 45])\\n      .scale(124.75)\\n      .clipAngle(180 - 1e-3);\\n}\\n\",\"import {geoProjection as projection} from \\\"d3-geo\\\";\\nimport {aitoffRaw} from \\\"./aitoff\\\";\\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \\\"./math\\\";\\n\\nexport function winkel3Raw(lambda, phi) {\\n  var coordinates = aitoffRaw(lambda, phi);\\n  return [\\n    (coordinates[0] + lambda / halfPi) / 2,\\n    (coordinates[1] + phi) / 2\\n  ];\\n}\\n\\nwinkel3Raw.invert = function(x, y) {\\n  var lambda = x, phi = y, i = 25;\\n  do {\\n    var cosphi = cos(phi),\\n        sinphi = sin(phi),\\n        sin_2phi = sin(2 * phi),\\n        sin2phi = sinphi * sinphi,\\n        cos2phi = cosphi * cosphi,\\n        sinlambda = sin(lambda),\\n        coslambda_2 = cos(lambda / 2),\\n        sinlambda_2 = sin(lambda / 2),\\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\\n        F,\\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\\n        fy = 0.5 * (E * sinphi + phi) - y,\\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\\n    lambda -= dlambda, phi -= dphi;\\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\\n  return [lambda, phi];\\n};\\n\\nexport default function() {\\n  return projection(winkel3Raw)\\n      .scale(158.837);\\n}\\n\",\"export {default as geoAiry, airyRaw as geoAiryRaw} from \\\"./src/airy\\\";\\nexport {default as geoAitoff, aitoffRaw as geoAitoffRaw} from \\\"./src/aitoff\\\";\\nexport {default as geoArmadillo, armadilloRaw as geoArmadilloRaw} from \\\"./src/armadillo\\\";\\nexport {default as geoAugust, augustRaw as geoAugustRaw} from \\\"./src/august\\\";\\nexport {default as geoBaker, bakerRaw as geoBakerRaw} from \\\"./src/baker\\\";\\nexport {default as geoBerghaus, berghausRaw as geoBerghausRaw} from \\\"./src/berghaus\\\";\\nexport {default as geoBoggs, boggsRaw as geoBoggsRaw} from \\\"./src/boggs\\\";\\nexport {default as geoBonne, bonneRaw as geoBonneRaw} from \\\"./src/bonne\\\";\\nexport {default as geoBottomley, bottomleyRaw as geoBottomleyRaw} from \\\"./src/bottomley\\\";\\nexport {default as geoBromley, bromleyRaw as geoBromleyRaw} from \\\"./src/bromley\\\";\\nexport {default as geoChamberlin, chamberlinRaw as geoChamberlinRaw, chamberlinAfrica as geoChamberlinAfrica} from \\\"./src/chamberlin\\\";\\nexport {default as geoCollignon, collignonRaw as geoCollignonRaw} from \\\"./src/collignon\\\";\\nexport {default as geoCraig, craigRaw as geoCraigRaw} from \\\"./src/craig\\\";\\nexport {default as geoCraster, crasterRaw as geoCrasterRaw} from \\\"./src/craster\\\";\\nexport {default as geoCylindricalEqualArea, cylindricalEqualAreaRaw as geoCylindricalEqualAreaRaw} from \\\"./src/cylindricalEqualArea\\\";\\nexport {default as geoCylindricalStereographic, cylindricalStereographicRaw as geoCylindricalStereographicRaw} from \\\"./src/cylindricalStereographic\\\";\\nexport {default as geoEckert1, eckert1Raw as geoEckert1Raw} from \\\"./src/eckert1.js\\\";\\nexport {default as geoEckert2, eckert2Raw as geoEckert2Raw} from \\\"./src/eckert2.js\\\";\\nexport {default as geoEckert3, eckert3Raw as geoEckert3Raw} from \\\"./src/eckert3.js\\\";\\nexport {default as geoEckert4, eckert4Raw as geoEckert4Raw} from \\\"./src/eckert4.js\\\";\\nexport {default as geoEckert5, eckert5Raw as geoEckert5Raw} from \\\"./src/eckert5.js\\\";\\nexport {default as geoEckert6, eckert6Raw as geoEckert6Raw} from \\\"./src/eckert6.js\\\";\\nexport {default as geoEisenlohr, eisenlohrRaw as geoEisenlohrRaw} from \\\"./src/eisenlohr.js\\\";\\nexport {default as geoFahey, faheyRaw as geoFaheyRaw} from \\\"./src/fahey.js\\\";\\nexport {default as geoFoucaut, foucautRaw as geoFoucautRaw} from \\\"./src/foucaut.js\\\";\\nexport {default as geoGilbert} from \\\"./src/gilbert.js\\\";\\nexport {default as geoGingery, gingeryRaw as geoGingeryRaw} from \\\"./src/gingery.js\\\";\\nexport {default as geoGinzburg4, ginzburg4Raw as geoGinzburg4Raw} from \\\"./src/ginzburg4.js\\\";\\nexport {default as geoGinzburg5, ginzburg5Raw as geoGinzburg5Raw} from \\\"./src/ginzburg5.js\\\";\\nexport {default as geoGinzburg6, ginzburg6Raw as geoGinzburg6Raw} from \\\"./src/ginzburg6.js\\\";\\nexport {default as geoGinzburg8, ginzburg8Raw as geoGinzburg8Raw} from \\\"./src/ginzburg8.js\\\";\\nexport {default as geoGinzburg9, ginzburg9Raw as geoGinzburg9Raw} from \\\"./src/ginzburg9.js\\\";\\nexport {default as geoGringorten, gringortenRaw as geoGringortenRaw} from \\\"./src/gringorten.js\\\";\\nexport {default as geoGuyou, guyouRaw as geoGuyouRaw} from \\\"./src/guyou.js\\\";\\nexport {default as geoHammer, hammerRaw as geoHammerRaw} from \\\"./src/hammer.js\\\";\\nexport {default as geoHammerRetroazimuthal, hammerRetroazimuthalRaw as geoHammerRetroazimuthalRaw} from \\\"./src/hammerRetroazimuthal.js\\\";\\nexport {default as geoHealpix, healpixRaw as geoHealpixRaw} from \\\"./src/healpix.js\\\";\\nexport {default as geoHill, hillRaw as geoHillRaw} from \\\"./src/hill.js\\\";\\nexport {default as geoHomolosine, homolosineRaw as geoHomolosineRaw} from \\\"./src/homolosine.js\\\";\\nexport {default as geoInterrupt} from \\\"./src/interrupted/index\\\";\\nexport {default as geoInterruptedBoggs} from \\\"./src/interrupted/boggs\\\";\\nexport {default as geoInterruptedHomolosine} from \\\"./src/interrupted/homolosine\\\";\\nexport {default as geoInterruptedMollweide} from \\\"./src/interrupted/mollweide\\\";\\nexport {default as geoInterruptedMollweideHemispheres} from \\\"./src/interrupted/mollweideHemispheres\\\";\\nexport {default as geoInterruptedSinuMollweide} from \\\"./src/interrupted/sinuMollweide\\\";\\nexport {default as geoInterruptedSinusoidal} from \\\"./src/interrupted/sinusoidal\\\";\\nexport {default as geoKavrayskiy7, kavrayskiy7Raw as geoKavrayskiy7Raw} from \\\"./src/kavrayskiy7.js\\\";\\nexport {default as geoLagrange, lagrangeRaw as geoLagrangeRaw} from \\\"./src/lagrange.js\\\";\\nexport {default as geoLarrivee, larriveeRaw as geoLarriveeRaw} from \\\"./src/larrivee\\\";\\nexport {default as geoLaskowski, laskowskiRaw as geoLaskowskiRaw} from \\\"./src/laskowski\\\";\\nexport {default as geoLittrow, littrowRaw as geoLittrowRaw} from \\\"./src/littrow.js\\\";\\nexport {default as geoLoximuthal, loximuthalRaw as geoLoximuthalRaw} from \\\"./src/loximuthal.js\\\";\\nexport {default as geoMiller, millerRaw as geoMillerRaw} from \\\"./src/miller\\\";\\nexport {default as geoModifiedStereographic, modifiedStereographicRaw as geoModifiedStereographicRaw, modifiedStereographicAlaska as geoModifiedStereographicAlaska, modifiedStereographicGs48 as geoModifiedStereographicGs48, modifiedStereographicGs50 as geoModifiedStereographicGs50, modifiedStereographicMiller as geoModifiedStereographicMiller, modifiedStereographicLee as geoModifiedStereographicLee} from \\\"./src/modifiedStereographic\\\";\\nexport {default as geoMollweide, mollweideRaw as geoMollweideRaw} from \\\"./src/mollweide\\\";\\nexport {default as geoMtFlatPolarParabolic, mtFlatPolarParabolicRaw as geoMtFlatPolarParabolicRaw} from \\\"./src/mtFlatPolarParabolic\\\";\\nexport {default as geoMtFlatPolarQuartic, mtFlatPolarQuarticRaw as geoMtFlatPolarQuarticRaw} from \\\"./src/mtFlatPolarQuartic\\\";\\nexport {default as geoMtFlatPolarSinusoidal, mtFlatPolarSinusoidalRaw as geoMtFlatPolarSinusoidalRaw} from \\\"./src/mtFlatPolarSinusoidal\\\";\\nexport {default as geoNaturalEarth, naturalEarthRaw as geoNaturalEarthRaw} from \\\"./src/naturalEarth\\\";\\nexport {default as geoNellHammer, nellHammerRaw as geoNellHammerRaw} from \\\"./src/nellHammer\\\";\\nexport {default as geoPatterson, pattersonRaw as geoPattersonRaw} from \\\"./src/patterson\\\";\\nexport {default as geoPolyconic, polyconicRaw as geoPolyconicRaw} from \\\"./src/polyconic\\\";\\nexport {default as geoPolyhedral} from \\\"./src/polyhedral/index.js\\\";\\nexport {default as geoPolyhedralButterfly} from \\\"./src/polyhedral/butterfly.js\\\";\\nexport {default as geoPolyhedralCollignon} from \\\"./src/polyhedral/collignon.js\\\";\\nexport {default as geoPolyhedralWaterman} from \\\"./src/polyhedral/waterman.js\\\";\\nexport {default as geoProject} from \\\"./src/project/index\\\";\\nexport {default as geoGringortenQuincuncial} from \\\"./src/quincuncial/gringorten.js\\\";\\nexport {default as geoPeirceQuincuncial} from \\\"./src/quincuncial/peirce.js\\\";\\nexport {default as geoPierceQuincuncial} from \\\"./src/quincuncial/peirce.js\\\"; // DEPRECATED misspelling\\nexport {default as geoQuantize} from \\\"./src/quantize\\\";\\nexport {default as geoQuincuncial} from \\\"./src/quincuncial/index.js\\\";\\nexport {default as geoRectangularPolyconic, rectangularPolyconicRaw as geoRectangularPolyconicRaw} from \\\"./src/rectangularPolyconic\\\";\\nexport {default as geoRobinson, robinsonRaw as geoRobinsonRaw} from \\\"./src/robinson\\\";\\nexport {default as geoSatellite, satelliteRaw as geoSatelliteRaw} from \\\"./src/satellite\\\";\\nexport {default as geoSinuMollweide, sinuMollweideRaw as geoSinuMollweideRaw} from \\\"./src/sinuMollweide\\\";\\nexport {default as geoSinusoidal, sinusoidalRaw as geoSinusoidalRaw} from \\\"./src/sinusoidal\\\";\\nexport {default as geoStitch} from \\\"./src/stitch\\\";\\nexport {default as geoTimes, timesRaw as geoTimesRaw} from \\\"./src/times\\\";\\nexport {default as geoTwoPointAzimuthal, twoPointAzimuthalRaw as geoTwoPointAzimuthalRaw, twoPointAzimuthalUsa as geoTwoPointAzimuthalUsa} from \\\"./src/twoPointAzimuthal\\\";\\nexport {default as geoTwoPointEquidistant, twoPointEquidistantRaw as geoTwoPointEquidistantRaw, twoPointEquidistantUsa as geoTwoPointEquidistantUsa} from \\\"./src/twoPointEquidistant\\\";\\nexport {default as geoVanDerGrinten, vanDerGrintenRaw as geoVanDerGrintenRaw} from \\\"./src/vanDerGrinten\\\";\\nexport {default as geoVanDerGrinten2, vanDerGrinten2Raw as geoVanDerGrinten2Raw} from \\\"./src/vanDerGrinten2\\\";\\nexport {default as geoVanDerGrinten3, vanDerGrinten3Raw as geoVanDerGrinten3Raw} from \\\"./src/vanDerGrinten3\\\";\\nexport {default as geoVanDerGrinten4, vanDerGrinten4Raw as geoVanDerGrinten4Raw} from \\\"./src/vanDerGrinten4\\\";\\nexport {default as geoWagner4, wagner4Raw as geoWagner4Raw} from \\\"./src/wagner4.js\\\";\\nexport {default as geoWagner6, wagner6Raw as geoWagner6Raw} from \\\"./src/wagner6.js\\\";\\nexport {default as geoWagner7, wagner7Raw as geoWagner7Raw} from \\\"./src/wagner7.js\\\";\\nexport {default as geoWiechel, wiechelRaw as geoWiechelRaw} from \\\"./src/wiechel.js\\\";\\nexport {default as geoWinkel3, winkel3Raw as geoWinkel3Raw} from \\\"./src/winkel3\\\";\\n\",\"export default function(x) {\\n  return x;\\n}\\n\",\"import identity from \\\"./identity\\\";\\n\\nexport default function(topology) {\\n  if ((transform = topology.transform) == null) return identity;\\n  var transform,\\n      x0,\\n      y0,\\n      kx = transform.scale[0],\\n      ky = transform.scale[1],\\n      dx = transform.translate[0],\\n      dy = transform.translate[1];\\n  return function(point, i) {\\n    if (!i) x0 = y0 = 0;\\n    point[0] = (x0 += point[0]) * kx + dx;\\n    point[1] = (y0 += point[1]) * ky + dy;\\n    return point;\\n  };\\n}\\n\",\"import transform from \\\"./transform\\\";\\n\\nexport default function(topology) {\\n  var bbox = topology.bbox;\\n\\n  function bboxPoint(p0) {\\n    p1[0] = p0[0], p1[1] = p0[1], t(p1);\\n    if (p1[0] < x0) x0 = p1[0];\\n    if (p1[0] > x1) x1 = p1[0];\\n    if (p1[1] < y0) y0 = p1[1];\\n    if (p1[1] > y1) y1 = p1[1];\\n  }\\n\\n  function bboxGeometry(o) {\\n    switch (o.type) {\\n      case \\\"GeometryCollection\\\": o.geometries.forEach(bboxGeometry); break;\\n      case \\\"Point\\\": bboxPoint(o.coordinates); break;\\n      case \\\"MultiPoint\\\": o.coordinates.forEach(bboxPoint); break;\\n    }\\n  }\\n\\n  if (!bbox) {\\n    var t = transform(topology), p0, p1 = new Array(2), name,\\n        x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\\n\\n    topology.arcs.forEach(function(arc) {\\n      var i = -1, n = arc.length;\\n      while (++i < n) {\\n        p0 = arc[i], p1[0] = p0[0], p1[1] = p0[1], t(p1, i);\\n        if (p1[0] < x0) x0 = p1[0];\\n        if (p1[0] > x1) x1 = p1[0];\\n        if (p1[1] < y0) y0 = p1[1];\\n        if (p1[1] > y1) y1 = p1[1];\\n      }\\n    });\\n\\n    for (name in topology.objects) {\\n      bboxGeometry(topology.objects[name]);\\n    }\\n\\n    bbox = topology.bbox = [x0, y0, x1, y1];\\n  }\\n\\n  return bbox;\\n}\\n\",\"export default function(array, n) {\\n  var t, j = array.length, i = j - n;\\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\\n}\\n\",\"import reverse from \\\"./reverse\\\";\\nimport transform from \\\"./transform\\\";\\n\\nexport default function(topology, o) {\\n  return o.type === \\\"GeometryCollection\\\"\\n      ? {type: \\\"FeatureCollection\\\", features: o.geometries.map(function(o) { return feature(topology, o); })}\\n      : feature(topology, o);\\n}\\n\\nexport function feature(topology, o) {\\n  var id = o.id,\\n      bbox = o.bbox,\\n      properties = o.properties == null ? {} : o.properties,\\n      geometry = object(topology, o);\\n  return id == null && bbox == null ? {type: \\\"Feature\\\", properties: properties, geometry: geometry}\\n      : bbox == null ? {type: \\\"Feature\\\", id: id, properties: properties, geometry: geometry}\\n      : {type: \\\"Feature\\\", id: id, bbox: bbox, properties: properties, geometry: geometry};\\n}\\n\\nexport function object(topology, o) {\\n  var transformPoint = transform(topology),\\n      arcs = topology.arcs;\\n\\n  function arc(i, points) {\\n    if (points.length) points.pop();\\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\\n      points.push(transformPoint(a[k].slice(), k));\\n    }\\n    if (i < 0) reverse(points, n);\\n  }\\n\\n  function point(p) {\\n    return transformPoint(p.slice());\\n  }\\n\\n  function line(arcs) {\\n    var points = [];\\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\\n    if (points.length < 2) points.push(points[0].slice());\\n    return points;\\n  }\\n\\n  function ring(arcs) {\\n    var points = line(arcs);\\n    while (points.length < 4) points.push(points[0].slice());\\n    return points;\\n  }\\n\\n  function polygon(arcs) {\\n    return arcs.map(ring);\\n  }\\n\\n  function geometry(o) {\\n    var type = o.type, coordinates;\\n    switch (type) {\\n      case \\\"GeometryCollection\\\": return {type: type, geometries: o.geometries.map(geometry)};\\n      case \\\"Point\\\": coordinates = point(o.coordinates); break;\\n      case \\\"MultiPoint\\\": coordinates = o.coordinates.map(point); break;\\n      case \\\"LineString\\\": coordinates = line(o.arcs); break;\\n      case \\\"MultiLineString\\\": coordinates = o.arcs.map(line); break;\\n      case \\\"Polygon\\\": coordinates = polygon(o.arcs); break;\\n      case \\\"MultiPolygon\\\": coordinates = o.arcs.map(polygon); break;\\n      default: return null;\\n    }\\n    return {type: type, coordinates: coordinates};\\n  }\\n\\n  return geometry(o);\\n}\\n\",\"export default function(topology, arcs) {\\n  var stitchedArcs = {},\\n      fragmentByStart = {},\\n      fragmentByEnd = {},\\n      fragments = [],\\n      emptyIndex = -1;\\n\\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\\n  arcs.forEach(function(i, j) {\\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\\n    }\\n  });\\n\\n  arcs.forEach(function(i) {\\n    var e = ends(i),\\n        start = e[0],\\n        end = e[1],\\n        f, g;\\n\\n    if (f = fragmentByEnd[start]) {\\n      delete fragmentByEnd[f.end];\\n      f.push(i);\\n      f.end = end;\\n      if (g = fragmentByStart[end]) {\\n        delete fragmentByStart[g.start];\\n        var fg = g === f ? f : f.concat(g);\\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\\n      } else {\\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\\n      }\\n    } else if (f = fragmentByStart[end]) {\\n      delete fragmentByStart[f.start];\\n      f.unshift(i);\\n      f.start = start;\\n      if (g = fragmentByEnd[start]) {\\n        delete fragmentByEnd[g.end];\\n        var gf = g === f ? f : g.concat(f);\\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\\n      } else {\\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\\n      }\\n    } else {\\n      f = [i];\\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\\n    }\\n  });\\n\\n  function ends(i) {\\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\\n    else p1 = arc[arc.length - 1];\\n    return i < 0 ? [p1, p0] : [p0, p1];\\n  }\\n\\n  function flush(fragmentByEnd, fragmentByStart) {\\n    for (var k in fragmentByEnd) {\\n      var f = fragmentByEnd[k];\\n      delete fragmentByStart[f.start];\\n      delete f.start;\\n      delete f.end;\\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\\n      fragments.push(f);\\n    }\\n  }\\n\\n  flush(fragmentByEnd, fragmentByStart);\\n  flush(fragmentByStart, fragmentByEnd);\\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\\n\\n  return fragments;\\n}\\n\",\"import {object} from \\\"./feature\\\";\\nimport stitch from \\\"./stitch\\\";\\n\\nexport default function(topology) {\\n  return object(topology, meshArcs.apply(this, arguments));\\n}\\n\\nexport function meshArcs(topology, object, filter) {\\n  var arcs, i, n;\\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\\n  return {type: \\\"MultiLineString\\\", arcs: stitch(topology, arcs)};\\n}\\n\\nfunction extractArcs(topology, object, filter) {\\n  var arcs = [],\\n      geomsByArc = [],\\n      geom;\\n\\n  function extract0(i) {\\n    var j = i < 0 ? ~i : i;\\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\\n  }\\n\\n  function extract1(arcs) {\\n    arcs.forEach(extract0);\\n  }\\n\\n  function extract2(arcs) {\\n    arcs.forEach(extract1);\\n  }\\n\\n  function extract3(arcs) {\\n    arcs.forEach(extract2);\\n  }\\n\\n  function geometry(o) {\\n    switch (geom = o, o.type) {\\n      case \\\"GeometryCollection\\\": o.geometries.forEach(geometry); break;\\n      case \\\"LineString\\\": extract1(o.arcs); break;\\n      case \\\"MultiLineString\\\": case \\\"Polygon\\\": extract2(o.arcs); break;\\n      case \\\"MultiPolygon\\\": extract3(o.arcs); break;\\n    }\\n  }\\n\\n  geometry(object);\\n\\n  geomsByArc.forEach(filter == null\\n      ? function(geoms) { arcs.push(geoms[0].i); }\\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\\n\\n  return arcs;\\n}\\n\",\"import {object} from \\\"./feature\\\";\\nimport stitch from \\\"./stitch\\\";\\n\\nfunction planarRingArea(ring) {\\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\\n  return Math.abs(area); // Note: doubled area!\\n}\\n\\nexport default function(topology) {\\n  return object(topology, mergeArcs.apply(this, arguments));\\n}\\n\\nexport function mergeArcs(topology, objects) {\\n  var polygonsByArc = {},\\n      polygons = [],\\n      groups = [];\\n\\n  objects.forEach(geometry);\\n\\n  function geometry(o) {\\n    switch (o.type) {\\n      case \\\"GeometryCollection\\\": o.geometries.forEach(geometry); break;\\n      case \\\"Polygon\\\": extract(o.arcs); break;\\n      case \\\"MultiPolygon\\\": o.arcs.forEach(extract); break;\\n    }\\n  }\\n\\n  function extract(polygon) {\\n    polygon.forEach(function(ring) {\\n      ring.forEach(function(arc) {\\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\\n      });\\n    });\\n    polygons.push(polygon);\\n  }\\n\\n  function area(ring) {\\n    return planarRingArea(object(topology, {type: \\\"Polygon\\\", arcs: [ring]}).coordinates[0]);\\n  }\\n\\n  polygons.forEach(function(polygon) {\\n    if (!polygon._) {\\n      var group = [],\\n          neighbors = [polygon];\\n      polygon._ = 1;\\n      groups.push(group);\\n      while (polygon = neighbors.pop()) {\\n        group.push(polygon);\\n        polygon.forEach(function(ring) {\\n          ring.forEach(function(arc) {\\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\\n              if (!polygon._) {\\n                polygon._ = 1;\\n                neighbors.push(polygon);\\n              }\\n            });\\n          });\\n        });\\n      }\\n    }\\n  });\\n\\n  polygons.forEach(function(polygon) {\\n    delete polygon._;\\n  });\\n\\n  return {\\n    type: \\\"MultiPolygon\\\",\\n    arcs: groups.map(function(polygons) {\\n      var arcs = [], n;\\n\\n      // Extract the exterior (unique) arcs.\\n      polygons.forEach(function(polygon) {\\n        polygon.forEach(function(ring) {\\n          ring.forEach(function(arc) {\\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\\n              arcs.push(arc);\\n            }\\n          });\\n        });\\n      });\\n\\n      // Stitch the arcs into one or more rings.\\n      arcs = stitch(topology, arcs);\\n\\n      // If more than one ring is returned,\\n      // at most one of these rings can be the exterior;\\n      // choose the one with the greatest absolute area.\\n      if ((n = arcs.length) > 1) {\\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\\n          if ((ki = area(arcs[i])) > k) {\\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\\n          }\\n        }\\n      }\\n\\n      return arcs;\\n    })\\n  };\\n}\\n\",\"export default function(a, x) {\\n  var lo = 0, hi = a.length;\\n  while (lo < hi) {\\n    var mid = lo + hi >>> 1;\\n    if (a[mid] < x) lo = mid + 1;\\n    else hi = mid;\\n  }\\n  return lo;\\n}\\n\",\"import bisect from \\\"./bisect\\\";\\n\\nexport default function(objects) {\\n  var indexesByArc = {}, // arc index -> array of object indexes\\n      neighbors = objects.map(function() { return []; });\\n\\n  function line(arcs, i) {\\n    arcs.forEach(function(a) {\\n      if (a < 0) a = ~a;\\n      var o = indexesByArc[a];\\n      if (o) o.push(i);\\n      else indexesByArc[a] = [i];\\n    });\\n  }\\n\\n  function polygon(arcs, i) {\\n    arcs.forEach(function(arc) { line(arc, i); });\\n  }\\n\\n  function geometry(o, i) {\\n    if (o.type === \\\"GeometryCollection\\\") o.geometries.forEach(function(o) { geometry(o, i); });\\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\\n  }\\n\\n  var geometryType = {\\n    LineString: line,\\n    MultiLineString: polygon,\\n    Polygon: polygon,\\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\\n  };\\n\\n  objects.forEach(geometry);\\n\\n  for (var i in indexesByArc) {\\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\\n      for (var k = j + 1; k < m; ++k) {\\n        var ij = indexes[j], ik = indexes[k], n;\\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\\n      }\\n    }\\n  }\\n\\n  return neighbors;\\n}\\n\",\"import bbox from \\\"./bbox\\\";\\n\\nexport default function(topology, n) {\\n  if (!((n = Math.floor(n)) >= 2)) throw new Error(\\\"n must be ≥2\\\");\\n  if (topology.transform) throw new Error(\\\"already quantized\\\");\\n  var bb = bbox(topology), name,\\n      dx = bb[0], kx = (bb[2] - dx) / (n - 1) || 1,\\n      dy = bb[1], ky = (bb[3] - dy) / (n - 1) || 1;\\n\\n  function quantizePoint(p) {\\n    p[0] = Math.round((p[0] - dx) / kx);\\n    p[1] = Math.round((p[1] - dy) / ky);\\n  }\\n\\n  function quantizeGeometry(o) {\\n    switch (o.type) {\\n      case \\\"GeometryCollection\\\": o.geometries.forEach(quantizeGeometry); break;\\n      case \\\"Point\\\": quantizePoint(o.coordinates); break;\\n      case \\\"MultiPoint\\\": o.coordinates.forEach(quantizePoint); break;\\n    }\\n  }\\n\\n  topology.arcs.forEach(function(arc) {\\n    var i = 1,\\n        j = 1,\\n        n = arc.length,\\n        pi = arc[0],\\n        x0 = pi[0] = Math.round((pi[0] - dx) / kx),\\n        y0 = pi[1] = Math.round((pi[1] - dy) / ky),\\n        pj,\\n        x1,\\n        y1;\\n\\n    for (; i < n; ++i) {\\n      pi = arc[i];\\n      x1 = Math.round((pi[0] - dx) / kx);\\n      y1 = Math.round((pi[1] - dy) / ky);\\n      if (x1 !== x0 || y1 !== y0) {\\n        pj = arc[j++];\\n        pj[0] = x1 - x0, x0 = x1;\\n        pj[1] = y1 - y0, y0 = y1;\\n      }\\n    }\\n\\n    if (j < 2) {\\n      pj = arc[j++];\\n      pj[0] = 0;\\n      pj[1] = 0;\\n    }\\n\\n    arc.length = j;\\n  });\\n\\n  for (name in topology.objects) {\\n    quantizeGeometry(topology.objects[name]);\\n  }\\n\\n  topology.transform = {\\n    scale: [kx, ky],\\n    translate: [dx, dy]\\n  };\\n\\n  return topology;\\n}\\n\",\"import identity from \\\"./identity\\\";\\n\\nexport default function(topology) {\\n  if ((transform = topology.transform) == null) return identity;\\n  var transform,\\n      x0,\\n      y0,\\n      kx = transform.scale[0],\\n      ky = transform.scale[1],\\n      dx = transform.translate[0],\\n      dy = transform.translate[1];\\n  return function(point, i) {\\n    if (!i) x0 = y0 = 0;\\n    var x1 = Math.round((point[0] - dx) / kx),\\n        y1 = Math.round((point[1] - dy) / ky);\\n    point[0] = x1 - x0, x0 = x1;\\n    point[1] = y1 - y0, y0 = y1;\\n    return point;\\n  };\\n}\\n\",\"export {default as bbox} from \\\"./src/bbox\\\";\\nexport {default as feature} from \\\"./src/feature\\\";\\nexport {default as mesh, meshArcs} from \\\"./src/mesh\\\";\\nexport {default as merge, mergeArcs} from \\\"./src/merge\\\";\\nexport {default as neighbors} from \\\"./src/neighbors\\\";\\nexport {default as quantize} from \\\"./src/quantize\\\";\\nexport {default as transform} from \\\"./src/transform\\\";\\nexport {default as untransform} from \\\"./src/untransform\\\";\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{369:function(n,t,e){\"use strict\";e.r(t);var r=function(){return new o};function o(){this.reset()}o.prototype={constructor:o,reset:function(){this.s=this.t=0},add:function(n){u(i,n,this.t),u(this,i.s,this.s),this.s?this.t+=i.t:this.s=i.t},valueOf:function(){return this.s}};var i=new o;function u(n,t,e){var r=n.s=t+e,o=r-t,i=r-o;n.t=t-i+(e-o)}var a=1e-6,c=Math.PI,f=c/2,l=c/4,s=2*c,p=180/c,h=c/180,d=Math.abs,v=Math.atan,g=Math.atan2,y=Math.cos,b=Math.ceil,m=Math.exp,j=(Math.floor,Math.log),M=Math.pow,w=Math.sin,E=Math.sign||function(n){return n>0?1:n<0?-1:0},P=Math.sqrt,O=Math.tan;function S(n){return n>1?0:n<-1?c:Math.acos(n)}function k(n){return n>1?f:n<-1?-f:Math.asin(n)}function _(n){return(n=w(n/2))*n}function R(){}function x(n,t){n&&z.hasOwnProperty(n.type)&&z[n.type](n,t)}var C={Feature:function(n,t){x(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,o=e.length;++r<o;)x(e[r].geometry,t)}},z={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){G(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)G(e[r],t,0)},Polygon:function(n,t){A(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)A(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,o=e.length;++r<o;)x(e[r],t)}};function G(n,t,e){var r,o=-1,i=n.length-e;for(t.lineStart();++o<i;)r=n[o],t.point(r[0],r[1],r[2]);t.lineEnd()}function A(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)G(n[e],t,1);t.polygonEnd()}var N,F,L,T,D,B=function(n,t){n&&C.hasOwnProperty(n.type)?C[n.type](n,t):x(n,t)},q=r(),U=r(),I={point:R,lineStart:R,lineEnd:R,polygonStart:function(){q.reset(),I.lineStart=W,I.lineEnd=X},polygonEnd:function(){var n=+q;U.add(n<0?s+n:n),this.lineStart=this.lineEnd=this.point=R},sphere:function(){U.add(s)}};function W(){I.point=Y}function X(){H(N,F)}function Y(n,t){I.point=H,N=n,F=t,L=n*=h,T=y(t=(t*=h)/2+l),D=w(t)}function H(n,t){var e=(n*=h)-L,r=e>=0?1:-1,o=r*e,i=y(t=(t*=h)/2+l),u=w(t),a=D*u,c=T*i+a*y(o),f=a*r*w(o);q.add(g(f,c)),L=n,T=i,D=u}var Q=function(n){return U.reset(),B(n,I),2*U};function V(n){return[g(n[1],n[0]),k(n[2])]}function J(n){var t=n[0],e=n[1],r=y(e);return[r*y(t),r*w(t),w(e)]}function K(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function Z(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function $(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function nn(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function tn(n){var t=P(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}var en,rn,on,un,an,cn,fn,ln,sn,pn,hn=r(),dn={point:vn,lineStart:yn,lineEnd:bn,polygonStart:function(){dn.point=mn,dn.lineStart=jn,dn.lineEnd=Mn,hn.reset(),I.polygonStart()},polygonEnd:function(){I.polygonEnd(),dn.point=vn,dn.lineStart=yn,dn.lineEnd=bn,q<0?(en=-(on=180),rn=-(un=90)):hn>a?un=90:hn<-a&&(rn=-90),pn[0]=en,pn[1]=on}};function vn(n,t){sn.push(pn=[en=n,on=n]),t<rn&&(rn=t),t>un&&(un=t)}function gn(n,t){var e=J([n*h,t*h]);if(ln){var r=Z(ln,e),o=Z([r[1],-r[0],0],r);tn(o),o=V(o);var i,u=n-an,a=u>0?1:-1,c=o[0]*p*a,f=d(u)>180;f^(a*an<c&&c<a*n)?(i=o[1]*p)>un&&(un=i):f^(a*an<(c=(c+360)%360-180)&&c<a*n)?(i=-o[1]*p)<rn&&(rn=i):(t<rn&&(rn=t),t>un&&(un=t)),f?n<an?wn(en,n)>wn(en,on)&&(on=n):wn(n,on)>wn(en,on)&&(en=n):on>=en?(n<en&&(en=n),n>on&&(on=n)):n>an?wn(en,n)>wn(en,on)&&(on=n):wn(n,on)>wn(en,on)&&(en=n)}else sn.push(pn=[en=n,on=n]);t<rn&&(rn=t),t>un&&(un=t),ln=e,an=n}function yn(){dn.point=gn}function bn(){pn[0]=en,pn[1]=on,dn.point=vn,ln=null}function mn(n,t){if(ln){var e=n-an;hn.add(d(e)>180?e+(e>0?360:-360):e)}else cn=n,fn=t;I.point(n,t),gn(n,t)}function jn(){I.lineStart()}function Mn(){mn(cn,fn),I.lineEnd(),d(hn)>a&&(en=-(on=180)),pn[0]=en,pn[1]=on,ln=null}function wn(n,t){return(t-=n)<0?t+360:t}function En(n,t){return n[0]-t[0]}function Pn(n,t){return n[0]<=n[1]?n[0]<=t&&t<=n[1]:t<n[0]||n[1]<t}var On,Sn,kn,_n,Rn,xn,Cn,zn,Gn,An,Nn,Fn,Ln,Tn,Dn,Bn,qn=function(n){var t,e,r,o,i,u,a;if(un=on=-(en=rn=1/0),sn=[],B(n,dn),e=sn.length){for(sn.sort(En),t=1,i=[r=sn[0]];t<e;++t)Pn(r,(o=sn[t])[0])||Pn(r,o[1])?(wn(r[0],o[1])>wn(r[0],r[1])&&(r[1]=o[1]),wn(o[0],r[1])>wn(r[0],r[1])&&(r[0]=o[0])):i.push(r=o);for(u=-1/0,t=0,r=i[e=i.length-1];t<=e;r=o,++t)o=i[t],(a=wn(r[1],o[0]))>u&&(u=a,en=o[0],on=r[1])}return sn=pn=null,en===1/0||rn===1/0?[[NaN,NaN],[NaN,NaN]]:[[en,rn],[on,un]]},Un={sphere:R,point:In,lineStart:Xn,lineEnd:Qn,polygonStart:function(){Un.lineStart=Vn,Un.lineEnd=Jn},polygonEnd:function(){Un.lineStart=Xn,Un.lineEnd=Qn}};function In(n,t){n*=h;var e=y(t*=h);Wn(e*y(n),e*w(n),w(t))}function Wn(n,t,e){kn+=(n-kn)/++On,_n+=(t-_n)/On,Rn+=(e-Rn)/On}function Xn(){Un.point=Yn}function Yn(n,t){n*=h;var e=y(t*=h);Tn=e*y(n),Dn=e*w(n),Bn=w(t),Un.point=Hn,Wn(Tn,Dn,Bn)}function Hn(n,t){n*=h;var e=y(t*=h),r=e*y(n),o=e*w(n),i=w(t),u=g(P((u=Dn*i-Bn*o)*u+(u=Bn*r-Tn*i)*u+(u=Tn*o-Dn*r)*u),Tn*r+Dn*o+Bn*i);Sn+=u,xn+=u*(Tn+(Tn=r)),Cn+=u*(Dn+(Dn=o)),zn+=u*(Bn+(Bn=i)),Wn(Tn,Dn,Bn)}function Qn(){Un.point=In}function Vn(){Un.point=Kn}function Jn(){Zn(Fn,Ln),Un.point=In}function Kn(n,t){Fn=n,Ln=t,n*=h,t*=h,Un.point=Zn;var e=y(t);Tn=e*y(n),Dn=e*w(n),Bn=w(t),Wn(Tn,Dn,Bn)}function Zn(n,t){n*=h;var e=y(t*=h),r=e*y(n),o=e*w(n),i=w(t),u=Dn*i-Bn*o,a=Bn*r-Tn*i,c=Tn*o-Dn*r,f=P(u*u+a*a+c*c),l=k(f),s=f&&-l/f;Gn+=s*u,An+=s*a,Nn+=s*c,Sn+=l,xn+=l*(Tn+(Tn=r)),Cn+=l*(Dn+(Dn=o)),zn+=l*(Bn+(Bn=i)),Wn(Tn,Dn,Bn)}var $n=function(n){On=Sn=kn=_n=Rn=xn=Cn=zn=Gn=An=Nn=0,B(n,Un);var t=Gn,e=An,r=Nn,o=t*t+e*e+r*r;return o<1e-12&&(t=xn,e=Cn,r=zn,Sn<a&&(t=kn,e=_n,r=Rn),(o=t*t+e*e+r*r)<1e-12)?[NaN,NaN]:[g(e,t)*p,k(r/P(o))*p]},nt=function(n){return function(){return n}},tt=function(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return(e=t.invert(e,r))&&n.invert(e[0],e[1])}),e};function et(n,t){return[n>c?n-s:n<-c?n+s:n,t]}function rt(n,t,e){return(n%=s)?t||e?tt(it(n),ut(t,e)):it(n):t||e?ut(t,e):et}function ot(n){return function(t,e){return[(t+=n)>c?t-s:t<-c?t+s:t,e]}}function it(n){var t=ot(n);return t.invert=ot(-n),t}function ut(n,t){var e=y(n),r=w(n),o=y(t),i=w(t);function u(n,t){var u=y(t),a=y(n)*u,c=w(n)*u,f=w(t),l=f*e+a*r;return[g(c*o-l*i,a*e-f*r),k(l*o+c*i)]}return u.invert=function(n,t){var u=y(t),a=y(n)*u,c=w(n)*u,f=w(t),l=f*o-c*i;return[g(c*o+f*i,a*e+l*r),k(l*e-a*r)]},u}et.invert=et;var at=function(n){function t(t){return(t=n(t[0]*h,t[1]*h))[0]*=p,t[1]*=p,t}return n=rt(n[0]*h,n[1]*h,n.length>2?n[2]*h:0),t.invert=function(t){return(t=n.invert(t[0]*h,t[1]*h))[0]*=p,t[1]*=p,t},t};function ct(n,t,e,r,o,i){if(e){var u=y(t),a=w(t),c=r*e;null==o?(o=t+r*s,i=t-c/2):(o=ft(u,o),i=ft(u,i),(r>0?o<i:o>i)&&(o+=r*s));for(var f,l=o;r>0?l>i:l<i;l-=c)f=V([u,-a*y(l),-a*w(l)]),n.point(f[0],f[1])}}function ft(n,t){(t=J(t))[0]-=n,tn(t);var e=S(-t[1]);return((-t[2]<0?-e:e)+s-a)%s}var lt=function(){var n,t,e=nt([0,0]),r=nt(90),o=nt(6),i={point:function(e,r){n.push(e=t(e,r)),e[0]*=p,e[1]*=p}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*h,c=o.apply(this,arguments)*h;return n=[],t=rt(-u[0]*h,-u[1]*h,0).invert,ct(i,a,c,1),u={type:\"Polygon\",coordinates:[n]},n=t=null,u}return u.center=function(n){return arguments.length?(e=\"function\"==typeof n?n:nt([+n[0],+n[1]]),u):e},u.radius=function(n){return arguments.length?(r=\"function\"==typeof n?n:nt(+n),u):r},u.precision=function(n){return arguments.length?(o=\"function\"==typeof n?n:nt(+n),u):o},u},st=function(){var n,t=[];return{point:function(t,e){n.push([t,e])},lineStart:function(){t.push(n=[])},lineEnd:R,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var e=t;return t=[],n=null,e}}},pt=function(n,t,e,r,o,i){var u,a=n[0],c=n[1],f=0,l=1,s=t[0]-a,p=t[1]-c;if(u=e-a,s||!(u>0)){if(u/=s,s<0){if(u<f)return;u<l&&(l=u)}else if(s>0){if(u>l)return;u>f&&(f=u)}if(u=o-a,s||!(u<0)){if(u/=s,s<0){if(u>l)return;u>f&&(f=u)}else if(s>0){if(u<f)return;u<l&&(l=u)}if(u=r-c,p||!(u>0)){if(u/=p,p<0){if(u<f)return;u<l&&(l=u)}else if(p>0){if(u>l)return;u>f&&(f=u)}if(u=i-c,p||!(u<0)){if(u/=p,p<0){if(u>l)return;u>f&&(f=u)}else if(p>0){if(u<f)return;u<l&&(l=u)}return f>0&&(n[0]=a+f*s,n[1]=c+f*p),l<1&&(t[0]=a+l*s,t[1]=c+l*p),!0}}}}},ht=function(n,t){return d(n[0]-t[0])<a&&d(n[1]-t[1])<a};function dt(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var vt=function(n,t,e,r,o){var i,u,a=[],c=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e,r=n[0],u=n[t];if(ht(r,u)){for(o.lineStart(),i=0;i<t;++i)o.point((r=n[i])[0],r[1]);o.lineEnd()}else a.push(e=new dt(r,n,null,!0)),c.push(e.o=new dt(r,null,e,!1)),a.push(e=new dt(u,n,null,!1)),c.push(e.o=new dt(u,null,e,!0))}}),a.length){for(c.sort(t),gt(a),gt(c),i=0,u=c.length;i<u;++i)c[i].e=e=!e;for(var f,l,s=a[0];;){for(var p=s,h=!0;p.v;)if((p=p.n)===s)return;f=p.z,o.lineStart();do{if(p.v=p.o.v=!0,p.e){if(h)for(i=0,u=f.length;i<u;++i)o.point((l=f[i])[0],l[1]);else r(p.x,p.n.x,1,o);p=p.n}else{if(h)for(f=p.p.z,i=f.length-1;i>=0;--i)o.point((l=f[i])[0],l[1]);else r(p.x,p.p.x,-1,o);p=p.p}f=(p=p.o).z,h=!h}while(!p.v);o.lineEnd()}}};function gt(n){if(t=n.length){for(var t,e,r=0,o=n[0];++r<t;)o.n=e=n[r],e.p=o,o=e;o.n=e=n[0],e.p=o}}var yt=e(399),bt=1e9,mt=-bt;function jt(n,t,e,r){function o(o,i){return n<=o&&o<=e&&t<=i&&i<=r}function i(o,i,a,c){var l=0,s=0;if(null==o||(l=u(o,a))!==(s=u(i,a))||f(o,i)<0^a>0)do{c.point(0===l||3===l?n:e,l>1?r:t)}while((l=(l+a+4)%4)!==s);else c.point(i[0],i[1])}function u(r,o){return d(r[0]-n)<a?o>0?0:3:d(r[0]-e)<a?o>0?2:1:d(r[1]-t)<a?o>0?1:0:o>0?3:2}function c(n,t){return f(n.x,t.x)}function f(n,t){var e=u(n,1),r=u(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(u){var a,f,l,s,p,h,d,v,g,y,b,m=u,j=st(),M={point:w,lineStart:function(){M.point=E,f&&f.push(l=[]);y=!0,g=!1,d=v=NaN},lineEnd:function(){a&&(E(s,p),h&&g&&j.rejoin(),a.push(j.result()));M.point=w,g&&m.lineEnd()},polygonStart:function(){m=j,a=[],f=[],b=!0},polygonEnd:function(){var t=function(){for(var t=0,e=0,o=f.length;e<o;++e)for(var i,u,a=f[e],c=1,l=a.length,s=a[0],p=s[0],h=s[1];c<l;++c)i=p,u=h,s=a[c],p=s[0],h=s[1],u<=r?h>r&&(p-i)*(r-u)>(h-u)*(n-i)&&++t:h<=r&&(p-i)*(r-u)<(h-u)*(n-i)&&--t;return t}(),e=b&&t,o=(a=Object(yt.a)(a)).length;(e||o)&&(u.polygonStart(),e&&(u.lineStart(),i(null,null,1,u),u.lineEnd()),o&&vt(a,c,t,i,u),u.polygonEnd());m=u,a=f=l=null}};function w(n,t){o(n,t)&&m.point(n,t)}function E(i,u){var a=o(i,u);if(f&&l.push([i,u]),y)s=i,p=u,h=a,y=!1,a&&(m.lineStart(),m.point(i,u));else if(a&&g)m.point(i,u);else{var c=[d=Math.max(mt,Math.min(bt,d)),v=Math.max(mt,Math.min(bt,v))],j=[i=Math.max(mt,Math.min(bt,i)),u=Math.max(mt,Math.min(bt,u))];pt(c,j,n,t,e,r)?(g||(m.lineStart(),m.point(c[0],c[1])),m.point(j[0],j[1]),a||m.lineEnd(),b=!1):a&&(m.lineStart(),m.point(i,u),b=!1)}d=i,v=u,g=a}return M}}var Mt,wt,Et,Pt=function(){var n,t,e,r=0,o=0,i=960,u=500;return e={stream:function(e){return n&&t===e?n:n=jt(r,o,i,u)(t=e)},extent:function(a){return arguments.length?(r=+a[0][0],o=+a[0][1],i=+a[1][0],u=+a[1][1],n=t=null,e):[[r,o],[i,u]]}}},Ot=r(),St=function(n,t){var e=t[0],r=t[1],o=[w(e),-y(e),0],i=0,u=0;Ot.reset();for(var f=0,p=n.length;f<p;++f)if(d=(h=n[f]).length)for(var h,d,v=h[d-1],b=v[0],m=v[1]/2+l,j=w(m),M=y(m),E=0;E<d;++E,b=O,j=_,M=R,v=P){var P=h[E],O=P[0],S=P[1]/2+l,_=w(S),R=y(S),x=O-b,C=x>=0?1:-1,z=C*x,G=z>c,A=j*_;if(Ot.add(g(A*C*w(z),M*R+A*y(z))),i+=G?x+C*s:x,G^b>=e^O>=e){var N=Z(J(v),J(P));tn(N);var F=Z(o,N);tn(F);var L=(G^x>=0?-1:1)*k(F[2]);(r>L||r===L&&(N[0]||N[1]))&&(u+=G^x>=0?1:-1)}}return(i<-a||i<a&&Ot<-a)^1&u},kt=r(),_t={sphere:R,point:R,lineStart:function(){_t.point=xt,_t.lineEnd=Rt},lineEnd:R,polygonStart:R,polygonEnd:R};function Rt(){_t.point=_t.lineEnd=R}function xt(n,t){Mt=n*=h,wt=w(t*=h),Et=y(t),_t.point=Ct}function Ct(n,t){n*=h;var e=w(t*=h),r=y(t),o=d(n-Mt),i=y(o),u=r*w(o),a=Et*e-wt*r*i,c=wt*e+Et*r*i;kt.add(g(P(u*u+a*a),c)),Mt=n,wt=e,Et=r}var zt=function(n){return kt.reset(),B(n,_t),+kt},Gt=[null,null],At={type:\"LineString\",coordinates:Gt},Nt=function(n,t){return Gt[0]=n,Gt[1]=t,zt(At)},Ft={Feature:function(n,t){return Tt(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,o=e.length;++r<o;)if(Tt(e[r].geometry,t))return!0;return!1}},Lt={Sphere:function(){return!0},Point:function(n,t){return Dt(n.coordinates,t)},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)if(Dt(e[r],t))return!0;return!1},LineString:function(n,t){return Bt(n.coordinates,t)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)if(Bt(e[r],t))return!0;return!1},Polygon:function(n,t){return qt(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)if(qt(e[r],t))return!0;return!1},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,o=e.length;++r<o;)if(Tt(e[r],t))return!0;return!1}};function Tt(n,t){return!(!n||!Lt.hasOwnProperty(n.type))&&Lt[n.type](n,t)}function Dt(n,t){return 0===Nt(n,t)}function Bt(n,t){var e=Nt(n[0],n[1]);return Nt(n[0],t)+Nt(t,n[1])<=e+a}function qt(n,t){return!!St(n.map(Ut),It(t))}function Ut(n){return(n=n.map(It)).pop(),n}function It(n){return[n[0]*h,n[1]*h]}var Wt=function(n,t){return(n&&Ft.hasOwnProperty(n.type)?Ft[n.type]:Tt)(n,t)};function Xt(n,t,e){var r=Object(yt.b)(n,t-a,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function Yt(n,t,e){var r=Object(yt.b)(n,t-a,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function Ht(){var n,t,e,r,o,i,u,c,f,l,s,p,h=10,v=h,g=90,y=360,m=2.5;function j(){return{type:\"MultiLineString\",coordinates:M()}}function M(){return Object(yt.b)(b(r/g)*g,e,g).map(s).concat(Object(yt.b)(b(c/y)*y,u,y).map(p)).concat(Object(yt.b)(b(t/h)*h,n,h).filter(function(n){return d(n%g)>a}).map(f)).concat(Object(yt.b)(b(i/v)*v,o,v).filter(function(n){return d(n%y)>a}).map(l))}return j.lines=function(){return M().map(function(n){return{type:\"LineString\",coordinates:n}})},j.outline=function(){return{type:\"Polygon\",coordinates:[s(r).concat(p(u).slice(1),s(e).reverse().slice(1),p(c).reverse().slice(1))]}},j.extent=function(n){return arguments.length?j.extentMajor(n).extentMinor(n):j.extentMinor()},j.extentMajor=function(n){return arguments.length?(r=+n[0][0],e=+n[1][0],c=+n[0][1],u=+n[1][1],r>e&&(n=r,r=e,e=n),c>u&&(n=c,c=u,u=n),j.precision(m)):[[r,c],[e,u]]},j.extentMinor=function(e){return arguments.length?(t=+e[0][0],n=+e[1][0],i=+e[0][1],o=+e[1][1],t>n&&(e=t,t=n,n=e),i>o&&(e=i,i=o,o=e),j.precision(m)):[[t,i],[n,o]]},j.step=function(n){return arguments.length?j.stepMajor(n).stepMinor(n):j.stepMinor()},j.stepMajor=function(n){return arguments.length?(g=+n[0],y=+n[1],j):[g,y]},j.stepMinor=function(n){return arguments.length?(h=+n[0],v=+n[1],j):[h,v]},j.precision=function(a){return arguments.length?(m=+a,f=Xt(i,o,90),l=Yt(t,n,m),s=Xt(c,u,90),p=Yt(r,e,m),j):m},j.extentMajor([[-180,-90+a],[180,90-a]]).extentMinor([[-180,-80-a],[180,80+a]])}function Qt(){return Ht()()}var Vt,Jt,Kt,Zt,$t=function(n,t){var e=n[0]*h,r=n[1]*h,o=t[0]*h,i=t[1]*h,u=y(r),a=w(r),c=y(i),f=w(i),l=u*y(e),s=u*w(e),d=c*y(o),v=c*w(o),b=2*k(P(_(i-r)+u*c*_(o-e))),m=w(b),j=b?function(n){var t=w(n*=b)/m,e=w(b-n)/m,r=e*l+t*d,o=e*s+t*v,i=e*a+t*f;return[g(o,r)*p,g(i,P(r*r+o*o))*p]}:function(){return[e*p,r*p]};return j.distance=b,j},ne=function(n){return n},te=r(),ee=r(),re={point:R,lineStart:R,lineEnd:R,polygonStart:function(){re.lineStart=oe,re.lineEnd=ae},polygonEnd:function(){re.lineStart=re.lineEnd=re.point=R,te.add(d(ee)),ee.reset()},result:function(){var n=te/2;return te.reset(),n}};function oe(){re.point=ie}function ie(n,t){re.point=ue,Vt=Kt=n,Jt=Zt=t}function ue(n,t){ee.add(Zt*n-Kt*t),Kt=n,Zt=t}function ae(){ue(Vt,Jt)}var ce=re,fe=1/0,le=fe,se=-fe,pe=se;var he,de,ve,ge,ye={point:function(n,t){n<fe&&(fe=n);n>se&&(se=n);t<le&&(le=t);t>pe&&(pe=t)},lineStart:R,lineEnd:R,polygonStart:R,polygonEnd:R,result:function(){var n=[[fe,le],[se,pe]];return se=pe=-(le=fe=1/0),n}},be=0,me=0,je=0,Me=0,we=0,Ee=0,Pe=0,Oe=0,Se=0,ke={point:_e,lineStart:Re,lineEnd:ze,polygonStart:function(){ke.lineStart=Ge,ke.lineEnd=Ae},polygonEnd:function(){ke.point=_e,ke.lineStart=Re,ke.lineEnd=ze},result:function(){var n=Se?[Pe/Se,Oe/Se]:Ee?[Me/Ee,we/Ee]:je?[be/je,me/je]:[NaN,NaN];return be=me=je=Me=we=Ee=Pe=Oe=Se=0,n}};function _e(n,t){be+=n,me+=t,++je}function Re(){ke.point=xe}function xe(n,t){ke.point=Ce,_e(ve=n,ge=t)}function Ce(n,t){var e=n-ve,r=t-ge,o=P(e*e+r*r);Me+=o*(ve+n)/2,we+=o*(ge+t)/2,Ee+=o,_e(ve=n,ge=t)}function ze(){ke.point=_e}function Ge(){ke.point=Ne}function Ae(){Fe(he,de)}function Ne(n,t){ke.point=Fe,_e(he=ve=n,de=ge=t)}function Fe(n,t){var e=n-ve,r=t-ge,o=P(e*e+r*r);Me+=o*(ve+n)/2,we+=o*(ge+t)/2,Ee+=o,Pe+=(o=ge*n-ve*t)*(ve+n),Oe+=o*(ge+t),Se+=3*o,_e(ve=n,ge=t)}var Le=ke;function Te(n){this._context=n}Te.prototype={_radius:4.5,pointRadius:function(n){return this._radius=n,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(n,t){switch(this._point){case 0:this._context.moveTo(n,t),this._point=1;break;case 1:this._context.lineTo(n,t);break;default:this._context.moveTo(n+this._radius,t),this._context.arc(n,t,this._radius,0,s)}},result:R};var De,Be,qe,Ue,Ie,We=r(),Xe={point:R,lineStart:function(){Xe.point=Ye},lineEnd:function(){De&&He(Be,qe),Xe.point=R},polygonStart:function(){De=!0},polygonEnd:function(){De=null},result:function(){var n=+We;return We.reset(),n}};function Ye(n,t){Xe.point=He,Be=Ue=n,qe=Ie=t}function He(n,t){Ue-=n,Ie-=t,We.add(P(Ue*Ue+Ie*Ie)),Ue=n,Ie=t}var Qe=Xe;function Ve(){this._string=[]}function Je(n){return\"m0,\"+n+\"a\"+n+\",\"+n+\" 0 1,1 0,\"+-2*n+\"a\"+n+\",\"+n+\" 0 1,1 0,\"+2*n+\"z\"}Ve.prototype={_circle:Je(4.5),pointRadius:function(n){return this._circle=Je(n),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push(\"Z\"),this._point=NaN},point:function(n,t){switch(this._point){case 0:this._string.push(\"M\",n,\",\",t),this._point=1;break;case 1:this._string.push(\"L\",n,\",\",t);break;default:this._string.push(\"M\",n,\",\",t,this._circle)}},result:function(){if(this._string.length){var n=this._string.join(\"\");return this._string=[],n}}};var Ke=function(n,t){var e,r,o=4.5;function i(n){return n&&(\"function\"==typeof o&&r.pointRadius(+o.apply(this,arguments)),B(n,e(r))),r.result()}return i.area=function(n){return B(n,e(ce)),ce.result()},i.measure=function(n){return B(n,e(Qe)),Qe.result()},i.bounds=function(n){return B(n,e(ye)),ye.result()},i.centroid=function(n){return B(n,e(Le)),Le.result()},i.projection=function(t){return arguments.length?(e=null==t?(n=null,ne):(n=t).stream,i):n},i.context=function(n){return arguments.length?(r=null==n?(t=null,new Ve):new Te(t=n),\"function\"!=typeof o&&r.pointRadius(o),i):t},i.pointRadius=function(n){return arguments.length?(o=\"function\"==typeof n?n:(r.pointRadius(+n),+n),i):o},i.projection(n).context(t)},Ze=function(n,t,e,r){return function(o,i){var u,a,c,f=t(i),l=o.invert(r[0],r[1]),s=st(),p=t(s),h=!1,d={point:v,lineStart:y,lineEnd:b,polygonStart:function(){d.point=m,d.lineStart=j,d.lineEnd=M,a=[],u=[]},polygonEnd:function(){d.point=v,d.lineStart=y,d.lineEnd=b,a=Object(yt.a)(a);var n=St(u,l);a.length?(h||(i.polygonStart(),h=!0),vt(a,nr,n,e,i)):n&&(h||(i.polygonStart(),h=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),h&&(i.polygonEnd(),h=!1),a=u=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function v(t,e){var r=o(t,e);n(t=r[0],e=r[1])&&i.point(t,e)}function g(n,t){var e=o(n,t);f.point(e[0],e[1])}function y(){d.point=g,f.lineStart()}function b(){d.point=v,f.lineEnd()}function m(n,t){c.push([n,t]);var e=o(n,t);p.point(e[0],e[1])}function j(){p.lineStart(),c=[]}function M(){m(c[0][0],c[0][1]),p.lineEnd();var n,t,e,r,o=p.clean(),f=s.result(),l=f.length;if(c.pop(),u.push(c),c=null,l)if(1&o){if((t=(e=f[0]).length-1)>0){for(h||(i.polygonStart(),h=!0),i.lineStart(),n=0;n<t;++n)i.point((r=e[n])[0],r[1]);i.lineEnd()}}else l>1&&2&o&&f.push(f.pop().concat(f.shift())),a.push(f.filter($e))}return d}};function $e(n){return n.length>1}function nr(n,t){return((n=n.x)[0]<0?n[1]-f-a:f-n[1])-((t=t.x)[0]<0?t[1]-f-a:f-t[1])}var tr=Ze(function(){return!0},function(n){var t,e=NaN,r=NaN,o=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(i,u){var l=i>0?c:-c,s=d(i-e);d(s-c)<a?(n.point(e,r=(r+u)/2>0?f:-f),n.point(o,r),n.lineEnd(),n.lineStart(),n.point(l,r),n.point(i,r),t=0):o!==l&&s>=c&&(d(e-o)<a&&(e-=o*a),d(i-l)<a&&(i-=l*a),r=function(n,t,e,r){var o,i,u=w(n-e);return d(u)>a?v((w(t)*(i=y(r))*w(e)-w(r)*(o=y(t))*w(n))/(o*i*u)):(t+r)/2}(e,r,i,u),n.point(o,r),n.lineEnd(),n.lineStart(),n.point(l,r),t=0),n.point(e=i,r=u),o=l},lineEnd:function(){n.lineEnd(),e=r=NaN},clean:function(){return 2-t}}},function(n,t,e,r){var o;if(null==n)o=e*f,r.point(-c,o),r.point(0,o),r.point(c,o),r.point(c,0),r.point(c,-o),r.point(0,-o),r.point(-c,-o),r.point(-c,0),r.point(-c,o);else if(d(n[0]-t[0])>a){var i=n[0]<t[0]?c:-c;o=e*i/2,r.point(-i,o),r.point(0,o),r.point(i,o)}else r.point(t[0],t[1])},[-c,-f]);var er=function(n,t){var e=y(n),r=e>0,o=d(e)>a;function i(n,t){return y(n)*y(t)>e}function u(n,t,r){var o=[1,0,0],i=Z(J(n),J(t)),u=K(i,i),f=i[0],l=u-f*f;if(!l)return!r&&n;var s=e*u/l,p=-e*f/l,h=Z(o,i),v=nn(o,s);$(v,nn(i,p));var g=h,y=K(v,g),b=K(g,g),m=y*y-b*(K(v,v)-1);if(!(m<0)){var j=P(m),M=nn(g,(-y-j)/b);if($(M,v),M=V(M),!r)return M;var w,E=n[0],O=t[0],S=n[1],k=t[1];O<E&&(w=E,E=O,O=w);var _=O-E,R=d(_-c)<a;if(!R&&k<S&&(w=S,S=k,k=w),R||_<a?R?S+k>0^M[1]<(d(M[0]-E)<a?S:k):S<=M[1]&&M[1]<=k:_>c^(E<=M[0]&&M[0]<=O)){var x=nn(g,(-y+j)/b);return $(x,v),[M,V(x)]}}}function f(t,e){var o=r?n:c-n,i=0;return t<-o?i|=1:t>o&&(i|=2),e<-o?i|=4:e>o&&(i|=8),i}return Ze(i,function(n){var t,e,l,s,p;return{lineStart:function(){s=l=!1,p=1},point:function(h,d){var v,g=[h,d],y=i(h,d),b=r?y?0:f(h,d):y?f(h+(h<0?c:-c),d):0;if(!t&&(s=l=y)&&n.lineStart(),y!==l&&(v=u(t,g),(ht(t,v)||ht(g,v))&&(g[0]+=a,g[1]+=a,y=i(g[0],g[1]))),y!==l)p=0,y?(n.lineStart(),v=u(g,t),n.point(v[0],v[1])):(v=u(t,g),n.point(v[0],v[1]),n.lineEnd()),t=v;else if(o&&t&&r^y){var m;b&e||!(m=u(g,t,!0))||(p=0,r?(n.lineStart(),n.point(m[0][0],m[0][1]),n.point(m[1][0],m[1][1]),n.lineEnd()):(n.point(m[1][0],m[1][1]),n.lineEnd(),n.lineStart(),n.point(m[0][0],m[0][1])))}!y||t&&ht(t,g)||n.point(g[0],g[1]),t=g,l=y,e=b},lineEnd:function(){l&&n.lineEnd(),t=null},clean:function(){return p|(s&&l)<<1}}},function(e,r,o,i){ct(i,n,t,o,e,r)},r?[0,-n]:[-c,n-c])},rr=function(n){return{stream:or(n)}};function or(n){return function(t){var e=new ir;for(var r in n)e[r]=n[r];return e.stream=t,e}}function ir(){}function ur(n,t,e){var r=t[1][0]-t[0][0],o=t[1][1]-t[0][1],i=n.clipExtent&&n.clipExtent();n.scale(150).translate([0,0]),null!=i&&n.clipExtent(null),B(e,n.stream(ye));var u=ye.result(),a=Math.min(r/(u[1][0]-u[0][0]),o/(u[1][1]-u[0][1])),c=+t[0][0]+(r-a*(u[1][0]+u[0][0]))/2,f=+t[0][1]+(o-a*(u[1][1]+u[0][1]))/2;return null!=i&&n.clipExtent(i),n.scale(150*a).translate([c,f])}function ar(n,t,e){return ur(n,[[0,0],t],e)}ir.prototype={constructor:ir,point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var cr=16,fr=y(30*h),lr=function(n,t){return+t?function(n,t){function e(r,o,i,u,c,f,l,s,p,h,v,y,b,m){var j=l-r,M=s-o,w=j*j+M*M;if(w>4*t&&b--){var E=u+h,O=c+v,S=f+y,_=P(E*E+O*O+S*S),R=k(S/=_),x=d(d(S)-1)<a||d(i-p)<a?(i+p)/2:g(O,E),C=n(x,R),z=C[0],G=C[1],A=z-r,N=G-o,F=M*A-j*N;(F*F/w>t||d((j*A+M*N)/w-.5)>.3||u*h+c*v+f*y<fr)&&(e(r,o,i,u,c,f,z,G,x,E/=_,O/=_,S,b,m),m.point(z,G),e(z,G,x,E,O,S,l,s,p,h,v,y,b,m))}}return function(t){var r,o,i,u,a,c,f,l,s,p,h,d,v={point:g,lineStart:y,lineEnd:m,polygonStart:function(){t.polygonStart(),v.lineStart=j},polygonEnd:function(){t.polygonEnd(),v.lineStart=y}};function g(e,r){e=n(e,r),t.point(e[0],e[1])}function y(){l=NaN,v.point=b,t.lineStart()}function b(r,o){var i=J([r,o]),u=n(r,o);e(l,s,f,p,h,d,l=u[0],s=u[1],f=r,p=i[0],h=i[1],d=i[2],cr,t),t.point(l,s)}function m(){v.point=g,t.lineEnd()}function j(){y(),v.point=M,v.lineEnd=w}function M(n,t){b(r=n,t),o=l,i=s,u=p,a=h,c=d,v.point=b}function w(){e(l,s,f,p,h,d,o,i,r,u,a,c,cr,t),v.lineEnd=m,m()}return v}}(n,t):function(n){return or({point:function(t,e){t=n(t,e),this.stream.point(t[0],t[1])}})}(n)};var sr=or({point:function(n,t){this.stream.point(n*h,t*h)}});function pr(n){return hr(function(){return n})()}function hr(n){var t,e,r,o,i,u,a,c,f,l,s=150,d=480,v=250,g=0,y=0,b=0,m=0,j=0,M=null,w=tr,E=null,O=ne,S=.5,k=lr(x,S);function _(n){return[(n=i(n[0]*h,n[1]*h))[0]*s+e,r-n[1]*s]}function R(n){return(n=i.invert((n[0]-e)/s,(r-n[1])/s))&&[n[0]*p,n[1]*p]}function x(n,o){return[(n=t(n,o))[0]*s+e,r-n[1]*s]}function C(){i=tt(o=rt(b,m,j),t);var n=t(g,y);return e=d-n[0]*s,r=v+n[1]*s,z()}function z(){return f=l=null,_}return _.stream=function(n){return f&&l===n?f:f=sr(w(o,k(O(l=n))))},_.clipAngle=function(n){return arguments.length?(w=+n?er(M=n*h,6*h):(M=null,tr),z()):M*p},_.clipExtent=function(n){return arguments.length?(O=null==n?(E=u=a=c=null,ne):jt(E=+n[0][0],u=+n[0][1],a=+n[1][0],c=+n[1][1]),z()):null==E?null:[[E,u],[a,c]]},_.scale=function(n){return arguments.length?(s=+n,C()):s},_.translate=function(n){return arguments.length?(d=+n[0],v=+n[1],C()):[d,v]},_.center=function(n){return arguments.length?(g=n[0]%360*h,y=n[1]%360*h,C()):[g*p,y*p]},_.rotate=function(n){return arguments.length?(b=n[0]%360*h,m=n[1]%360*h,j=n.length>2?n[2]%360*h:0,C()):[b*p,m*p,j*p]},_.precision=function(n){return arguments.length?(k=lr(x,S=n*n),z()):P(S)},_.fitExtent=function(n,t){return ur(_,n,t)},_.fitSize=function(n,t){return ar(_,n,t)},function(){return t=n.apply(this,arguments),_.invert=t.invert&&R,C()}}function dr(n){var t=0,e=c/3,r=hr(n),o=r(t,e);return o.parallels=function(n){return arguments.length?r(t=n[0]*h,e=n[1]*h):[t*p,e*p]},o}function vr(n,t){var e=w(n),r=(e+w(t))/2;if(d(r)<a)return function(n){var t=y(n);function e(n,e){return[n*t,w(e)/t]}return e.invert=function(n,e){return[n/t,k(e*t)]},e}(n);var o=1+e*(2*r-e),i=P(o)/r;function u(n,t){var e=P(o-2*r*w(t))/r;return[e*w(n*=r),i-e*y(n)]}return u.invert=function(n,t){var e=i-t;return[g(n,d(e))/r*E(e),k((o-(n*n+e*e)*r*r)/(2*r))]},u}var gr=function(){return dr(vr).scale(155.424).center([0,33.6442])},yr=function(){return gr().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var br=function(){var n,t,e,r,o,i,u=yr(),c=gr().rotate([154,0]).center([-2,58.5]).parallels([55,65]),f=gr().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(n,t){i=[n,t]}};function s(n){var t=n[0],u=n[1];return i=null,e.point(t,u),i||(r.point(t,u),i)||(o.point(t,u),i)}function p(){return n=t=null,s}return s.invert=function(n){var t=u.scale(),e=u.translate(),r=(n[0]-e[0])/t,o=(n[1]-e[1])/t;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?c:o>=.166&&o<.234&&r>=-.214&&r<-.115?f:u).invert(n)},s.stream=function(e){return n&&t===e?n:(r=[u.stream(t=e),c.stream(e),f.stream(e)],o=r.length,n={point:function(n,t){for(var e=-1;++e<o;)r[e].point(n,t)},sphere:function(){for(var n=-1;++n<o;)r[n].sphere()},lineStart:function(){for(var n=-1;++n<o;)r[n].lineStart()},lineEnd:function(){for(var n=-1;++n<o;)r[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<o;)r[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<o;)r[n].polygonEnd()}});var r,o},s.precision=function(n){return arguments.length?(u.precision(n),c.precision(n),f.precision(n),p()):u.precision()},s.scale=function(n){return arguments.length?(u.scale(n),c.scale(.35*n),f.scale(n),s.translate(u.translate())):u.scale()},s.translate=function(n){if(!arguments.length)return u.translate();var t=u.scale(),i=+n[0],s=+n[1];return e=u.translate(n).clipExtent([[i-.455*t,s-.238*t],[i+.455*t,s+.238*t]]).stream(l),r=c.translate([i-.307*t,s+.201*t]).clipExtent([[i-.425*t+a,s+.12*t+a],[i-.214*t-a,s+.234*t-a]]).stream(l),o=f.translate([i-.205*t,s+.212*t]).clipExtent([[i-.214*t+a,s+.166*t+a],[i-.115*t-a,s+.234*t-a]]).stream(l),p()},s.fitExtent=function(n,t){return ur(s,n,t)},s.fitSize=function(n,t){return ar(s,n,t)},s.scale(1070)};function mr(n){return function(t,e){var r=y(t),o=y(e),i=n(r*o);return[i*o*w(t),i*w(e)]}}function jr(n){return function(t,e){var r=P(t*t+e*e),o=n(r),i=w(o),u=y(o);return[g(t*i,r*u),k(r&&e*i/r)]}}var Mr=mr(function(n){return P(2/(1+n))});Mr.invert=jr(function(n){return 2*k(n/2)});var wr=function(){return pr(Mr).scale(124.75).clipAngle(179.999)},Er=mr(function(n){return(n=S(n))&&n/w(n)});Er.invert=jr(function(n){return n});var Pr=function(){return pr(Er).scale(79.4188).clipAngle(179.999)};function Or(n,t){return[n,j(O((f+t)/2))]}Or.invert=function(n,t){return[n,2*v(m(t))-f]};var Sr=function(){return kr(Or).scale(961/s)};function kr(n){var t,e,r,o=pr(n),i=o.center,u=o.scale,a=o.translate,f=o.clipExtent,l=null;function s(){var i=c*u(),a=o(at(o.rotate()).invert([0,0]));return f(null==l?[[a[0]-i,a[1]-i],[a[0]+i,a[1]+i]]:n===Or?[[Math.max(a[0]-i,l),t],[Math.min(a[0]+i,e),r]]:[[l,Math.max(a[1]-i,t)],[e,Math.min(a[1]+i,r)]])}return o.scale=function(n){return arguments.length?(u(n),s()):u()},o.translate=function(n){return arguments.length?(a(n),s()):a()},o.center=function(n){return arguments.length?(i(n),s()):i()},o.clipExtent=function(n){return arguments.length?(null==n?l=t=e=r=null:(l=+n[0][0],t=+n[0][1],e=+n[1][0],r=+n[1][1]),s()):null==l?null:[[l,t],[e,r]]},s()}function _r(n){return O((f+n)/2)}function Rr(n,t){var e=y(n),r=n===t?w(n):j(e/y(t))/j(_r(t)/_r(n)),o=e*M(_r(n),r)/r;if(!r)return Or;function i(n,t){o>0?t<-f+a&&(t=-f+a):t>f-a&&(t=f-a);var e=o/M(_r(t),r);return[e*w(r*n),o-e*y(r*n)]}return i.invert=function(n,t){var e=o-t,i=E(r)*P(n*n+e*e);return[g(n,d(e))/r*E(e),2*v(M(o/i,1/r))-f]},i}var xr=function(){return dr(Rr).scale(109.5).parallels([30,30])};function Cr(n,t){return[n,t]}Cr.invert=Cr;var zr=function(){return pr(Cr).scale(152.63)};function Gr(n,t){var e=y(n),r=n===t?w(n):(e-y(t))/(t-n),o=e/r+n;if(d(r)<a)return Cr;function i(n,t){var e=o-t,i=r*n;return[e*w(i),o-e*y(i)]}return i.invert=function(n,t){var e=o-t;return[g(n,d(e))/r*E(e),o-E(r)*P(n*n+e*e)]},i}var Ar=function(){return dr(Gr).scale(131.154).center([0,13.9389])};function Nr(n,t){var e=y(t),r=y(n)*e;return[e*w(n)/r,w(t)/r]}Nr.invert=jr(v);var Fr=function(){return pr(Nr).scale(144.049).clipAngle(60)};function Lr(n,t,e,r){return 1===n&&1===t&&0===e&&0===r?ne:or({point:function(o,i){this.stream.point(o*n+e,i*t+r)}})}var Tr=function(){var n,t,e,r,o,i,u=1,a=0,c=0,f=1,l=1,s=ne,p=null,h=ne;function d(){return r=o=null,i}return i={stream:function(n){return r&&o===n?r:r=s(h(o=n))},clipExtent:function(r){return arguments.length?(h=null==r?(p=n=t=e=null,ne):jt(p=+r[0][0],n=+r[0][1],t=+r[1][0],e=+r[1][1]),d()):null==p?null:[[p,n],[t,e]]},scale:function(n){return arguments.length?(s=Lr((u=+n)*f,u*l,a,c),d()):u},translate:function(n){return arguments.length?(s=Lr(u*f,u*l,a=+n[0],c=+n[1]),d()):[a,c]},reflectX:function(n){return arguments.length?(s=Lr(u*(f=n?-1:1),u*l,a,c),d()):f<0},reflectY:function(n){return arguments.length?(s=Lr(u*f,u*(l=n?-1:1),a,c),d()):l<0},fitExtent:function(n,t){return ur(i,n,t)},fitSize:function(n,t){return ar(i,n,t)}}};function Dr(n,t){return[y(t)*w(n),w(t)]}Dr.invert=jr(k);var Br=function(){return pr(Dr).scale(249.5).clipAngle(90+a)};function qr(n,t){var e=y(t),r=1+y(n)*e;return[e*w(n)/r,w(t)/r]}qr.invert=jr(function(n){return 2*v(n)});var Ur=function(){return pr(qr).scale(250).clipAngle(142)};function Ir(n,t){return[j(O((f+t)/2)),-n]}Ir.invert=function(n,t){return[-t,2*v(m(n))-f]};var Wr=function(){var n=kr(Ir),t=n.center,e=n.rotate;return n.center=function(n){return arguments.length?t([-n[1],n[0]]):[(n=t())[1],-n[0]]},n.rotate=function(n){return arguments.length?e([n[0],n[1],n.length>2?n[2]+90:90]):[(n=e())[0],n[1],n[2]-90]},e([0,0,90]).scale(159.155)};e.d(t,\"geoArea\",function(){return Q}),e.d(t,\"geoBounds\",function(){return qn}),e.d(t,\"geoCentroid\",function(){return $n}),e.d(t,\"geoCircle\",function(){return lt}),e.d(t,\"geoClipExtent\",function(){return Pt}),e.d(t,\"geoContains\",function(){return Wt}),e.d(t,\"geoDistance\",function(){return Nt}),e.d(t,\"geoGraticule\",function(){return Ht}),e.d(t,\"geoGraticule10\",function(){return Qt}),e.d(t,\"geoInterpolate\",function(){return $t}),e.d(t,\"geoLength\",function(){return zt}),e.d(t,\"geoPath\",function(){return Ke}),e.d(t,\"geoAlbers\",function(){return yr}),e.d(t,\"geoAlbersUsa\",function(){return br}),e.d(t,\"geoAzimuthalEqualArea\",function(){return wr}),e.d(t,\"geoAzimuthalEqualAreaRaw\",function(){return Mr}),e.d(t,\"geoAzimuthalEquidistant\",function(){return Pr}),e.d(t,\"geoAzimuthalEquidistantRaw\",function(){return Er}),e.d(t,\"geoConicConformal\",function(){return xr}),e.d(t,\"geoConicConformalRaw\",function(){return Rr}),e.d(t,\"geoConicEqualArea\",function(){return gr}),e.d(t,\"geoConicEqualAreaRaw\",function(){return vr}),e.d(t,\"geoConicEquidistant\",function(){return Ar}),e.d(t,\"geoConicEquidistantRaw\",function(){return Gr}),e.d(t,\"geoEquirectangular\",function(){return zr}),e.d(t,\"geoEquirectangularRaw\",function(){return Cr}),e.d(t,\"geoGnomonic\",function(){return Fr}),e.d(t,\"geoGnomonicRaw\",function(){return Nr}),e.d(t,\"geoIdentity\",function(){return Tr}),e.d(t,\"geoProjection\",function(){return pr}),e.d(t,\"geoProjectionMutator\",function(){return hr}),e.d(t,\"geoMercator\",function(){return Sr}),e.d(t,\"geoMercatorRaw\",function(){return Or}),e.d(t,\"geoOrthographic\",function(){return Br}),e.d(t,\"geoOrthographicRaw\",function(){return Dr}),e.d(t,\"geoStereographic\",function(){return Ur}),e.d(t,\"geoStereographicRaw\",function(){return qr}),e.d(t,\"geoTransverseMercator\",function(){return Wr}),e.d(t,\"geoTransverseMercatorRaw\",function(){return Ir}),e.d(t,\"geoRotation\",function(){return at}),e.d(t,\"geoStream\",function(){return B}),e.d(t,\"geoTransform\",function(){return rr})},399:function(n,t,e){\"use strict\";var r=function(n,t){return n<t?-1:n>t?1:n>=t?0:NaN};var o,i;1===(o=r).length&&(i=o,o=function(n,t){return r(i(n),t)});var u=Array.prototype,a=(u.slice,u.map,function(n,t,e){n=+n,t=+t,e=(o=arguments.length)<2?(t=n,n=0,1):o<3?1:+e;for(var r=-1,o=0|Math.max(0,Math.ceil((t-n)/e)),i=new Array(o);++r<o;)i[r]=n+r*e;return i});Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var c=function(n){for(var t,e,r,o=n.length,i=-1,u=0;++i<o;)u+=n[i].length;for(e=new Array(u);--o>=0;)for(t=(r=n[o]).length;--t>=0;)e[--u]=r[t];return e};e.d(t,\"a\",function(){return c}),e.d(t,\"b\",function(){return a})},413:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.replaceStrokeWidth=function(n){var t={};return Object.keys(n).map(function(e,r){t[e]=\"strokeWidth\"===e?\"inherit\":n[e]}),t},t.createChoroplethStyles=function(n,t){if(t){var e={};return Object.keys(n).map(function(r,o){e[r]=\"fill\"===r?t.value:n[r]}),e}return n},t.calculateResizeFactor=function(n,t){return 100/n*t*.01},t.calculateMousePosition=function(n,t,e,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e.center,u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:e.width,a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:e.height,c={x:0,y:1},f=t().rotate().map(function(n){return-n});return(t().rotate(f)([-i[0],-i[1]])[c[n]]-(0===c[n]?u:a)/2)*r*(1/o)},t.isChildOfType=u,t.createNewChildren=function(n,t){if(!n)return;return n.length?n.map(function(n,e){if(n)return u(n,\"Geographies\")?i.default.cloneElement(n,{key:\"zoomable-child-\"+e,projection:t.projection}):u(n,\"Markers\")||u(n,\"Annotation\")||u(n,\"Graticule\")?i.default.cloneElement(n,{key:\"zoomable-child-\"+e,projection:t.projection,zoom:t.zoom}):n}):u(n,\"Geographies\")?i.default.cloneElement(n,{projection:t.projection}):u(n,\"Markers\")||u(n,\"Annotation\")||u(child,\"Graticule\")?i.default.cloneElement(n,{projection:t.projection,zoom:t.zoom}):n},t.roundPath=function(n,t){if(!n)return;return n.replace(/[\\d\\.-][\\d\\.e-]*/g,function(n){return Math.round(n*(1/t))/(1/t)})},t.createConnectorPath=function(n,t){return\"M0,0 L\"+t[0]+\",\"+t[1]},t.createTextAnchor=function(n){return n>0?\"start\":n<0?\"end\":\"middle\"};var r,o=e(38),i=(r=o)&&r.__esModule?r:{default:r};function u(n,t){return n.props.componentIdentifier===t}},504:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={scale:160,xOffset:0,yOffset:0,rotation:[0,0,0],precision:.1}},702:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=e(703);Object.defineProperty(t,\"ComposableMap\",{enumerable:!0,get:function(){return s(r).default}});var o=e(705);Object.defineProperty(t,\"ZoomableGroup\",{enumerable:!0,get:function(){return s(o).default}});var i=e(706);Object.defineProperty(t,\"Geographies\",{enumerable:!0,get:function(){return s(i).default}});var u=e(707);Object.defineProperty(t,\"Geography\",{enumerable:!0,get:function(){return s(u).default}});var a=e(708);Object.defineProperty(t,\"Marker\",{enumerable:!0,get:function(){return s(a).default}});var c=e(709);Object.defineProperty(t,\"Markers\",{enumerable:!0,get:function(){return s(c).default}});var f=e(710);Object.defineProperty(t,\"Annotation\",{enumerable:!0,get:function(){return s(f).default}});var l=e(711);function s(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(t,\"Graticule\",{enumerable:!0,get:function(){return s(l).default}})},703:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),o=e(38),i=c(o),u=c(e(704)),a=c(e(504));function c(n){return n&&n.__esModule?n:{default:n}}var f=function(n){function t(){!function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var n=function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.projection=n.projection.bind(n),n}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,o.Component),r(t,[{key:\"projection\",value:function(){var n=this.props,t=n.projection,e=n.projectionConfig,r=n.width,o=n.height;return\"function\"!=typeof t?(0,u.default)(r,o,e,t):t(r,o,e)}},{key:\"render\",value:function(){var n=this.props,t=n.width,e=n.height,r=n.style,o=n.showCenter;n.children;return i.default.createElement(\"svg\",{width:t,height:e,viewBox:\"0 0 \"+t+\" \"+e,className:\"rsm-svg\",style:r},i.default.cloneElement(this.props.children,{projection:this.projection,width:t,height:e}),o&&i.default.createElement(\"g\",null,i.default.createElement(\"rect\",{x:t/2-.5,y:0,width:1,height:e,fill:\"#e91e63\"}),i.default.createElement(\"rect\",{x:0,y:e/2-.5,width:t,height:1,fill:\"#e91e63\"})))}}]),t}();f.defaultProps={width:800,height:450,projection:\"times\",projectionConfig:a.default},t.default=f},704:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=function(n,t,e,r){var o=e.scale||a.default.scale,i=e.xOffset||a.default.xOffset,u=e.yOffset||a.default.yOffset,f=e.rotation||a.default.rotation,l=e.precision||a.default.precision;return c[r]().scale(o).translate([i+n/2,u+t/2]).rotate(f).precision(l)};var r,o=e(713),i=e(369),u=e(504),a=(r=u)&&r.__esModule?r:{default:r};var c={mercator:i.geoMercator,miller:o.geoMiller,times:o.geoTimes,robinson:o.geoRobinson,winkel3:o.geoWinkel3,eckert4:o.geoEckert4}},705:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(38),u=(r=i)&&r.__esModule?r:{default:r},a=(e(369),e(413));var c=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n)),r=n.projection().rotate([0,0,0])([n.backdrop.x[0],0])[0],o=n.projection().rotate([0,0,0])([0,n.backdrop.y[0]])[1],i=n.projection().rotate([0,0,0])([n.backdrop.x[1],0])[0]-n.projection().rotate([0,0,0])([n.backdrop.x[0],0])[0],u=n.projection().rotate([0,0,0])([0,n.backdrop.y[1]])[1]-n.projection().rotate([0,0,0])([0,n.backdrop.y[0]])[1];return e.state={mouseX:(0,a.calculateMousePosition)(\"x\",n.projection,n,n.zoom,1),mouseY:(0,a.calculateMousePosition)(\"y\",n.projection,n,n.zoom,1),mouseXStart:0,mouseYStart:0,isPressed:!1,resizeFactorX:1,resizeFactorY:1,backdrop:{width:Math.round(i),height:Math.round(u),x:Math.round(r),y:Math.round(o)}},e.handleMouseMove=e.handleMouseMove.bind(e),e.handleMouseUp=e.handleMouseUp.bind(e),e.handleMouseDown=e.handleMouseDown.bind(e),e.handleResize=e.handleResize.bind(e),e}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:\"handleMouseMove\",value:function(n){var t=n.pageX,e=n.pageY;this.props.disablePanning||this.state.isPressed&&this.setState({mouseX:t-this.state.mouseXStart,mouseY:e-this.state.mouseYStart})}},{key:\"handleMouseUp\",value:function(){this.props.disablePanning||this.state.isPressed&&this.setState({isPressed:!1})}},{key:\"handleMouseDown\",value:function(n){var t=n.pageX,e=n.pageY;this.props.disablePanning||this.setState({isPressed:!0,mouseXStart:t-this.state.mouseX,mouseYStart:e-this.state.mouseY})}},{key:\"componentWillReceiveProps\",value:function(n){var t=this.state,e=t.mouseX,r=t.mouseY,o=t.resizeFactorX,i=t.resizeFactorY,u=this.props,c=u.projection,f=u.center,l=u.zoom,s=n.zoom/l,p=JSON.stringify(n.center)!==JSON.stringify(f);this.setState({zoom:n.zoom,mouseX:p?(0,a.calculateMousePosition)(\"x\",c,n,n.zoom,o):e*s,mouseY:p?(0,a.calculateMousePosition)(\"y\",c,n,n.zoom,i):r*s})}},{key:\"handleResize\",value:function(){var n=this.props,t=n.width,e=n.height,r=(n.projection,n.zoom,(0,a.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width,t)),o=(0,a.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height,e),i=1/r*this.state.resizeFactorX,u=1/o*this.state.resizeFactorY;this.setState({resizeFactorX:r,resizeFactorY:o,mouseX:this.state.mouseX*i,mouseY:this.state.mouseY*u})}},{key:\"componentDidMount\",value:function(){var n=this.props,t=n.width,e=n.height,r=n.projection,o=n.zoom,i=(0,a.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width,t),u=(0,a.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height,e);this.setState({resizeFactorX:i,resizeFactorY:u,mouseX:(0,a.calculateMousePosition)(\"x\",r,this.props,o,i),mouseY:(0,a.calculateMousePosition)(\"y\",r,this.props,o,u)}),window.addEventListener(\"resize\",this.handleResize),window.addEventListener(\"mouseup\",this.handleMouseUp)}},{key:\"componentWillUnmount\",value:function(){window.removeEventListener(\"resize\",this.handleResize),window.removeEventListener(\"mouseup\",this.handleMouseUp)}},{key:\"render\",value:function(){var n=this,t=this.props,e=t.width,r=t.height,o=t.zoom,i=t.style,c=(t.projection,t.children),f=this.state,l=f.mouseX,s=f.mouseY,p=f.resizeFactorX,h=f.resizeFactorY;return u.default.createElement(\"g\",{className:\"rsm-zoomable-group\",ref:function(t){return n.zoomableGroupNode=t},transform:\"\\n           translate(\\n             \"+Math.round(100*(e/2+p*l))/100+\"\\n             \"+Math.round(100*(r/2+h*s))/100+\"\\n           )\\n           scale(\"+o+\")\\n           translate(\"+-e/2+\" \"+-r/2+\")\\n         \",onMouseMove:this.handleMouseMove,onMouseUp:this.handleMouseUp,onMouseDown:this.handleMouseDown,style:i},u.default.createElement(\"rect\",{x:this.state.backdrop.x,y:this.state.backdrop.y,width:this.state.backdrop.width,height:this.state.backdrop.height,fill:\"transparent\",style:{strokeWidth:0}}),(0,a.createNewChildren)(c,this.props))}}]),t}();c.defaultProps={center:[0,0],backdrop:{x:[-179.9,179.9],y:[89.9,-89.9]},zoom:1,disablePanning:!1},t.default=c},706:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(38),u=(r=i)&&r.__esModule?r:{default:r},a=e(715);var c=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.state={geographyPaths:n.geographyPaths},e.fetchGeographies=e.fetchGeographies.bind(e),e}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:\"fetchGeographies\",value:function(n){var t=this,e=this.props;e.width,e.height;if(n){var r=new XMLHttpRequest;r.open(\"GET\",n,!0),r.onload=function(){if(r.status>=200&&r.status<400){var n=JSON.parse(r.responseText);t.setState({geographyPaths:(0,a.feature)(n,n.objects[Object.keys(n.objects)[0]]).features},function(){t.props.onGeographiesLoaded&&t.props.onGeographyPathsLoaded(String(r.status))})}else{if(!t.props.onGeographiesLoaded)return;t.props.onGeographyPathsLoaded(String(r.status))}},r.onerror=function(){console.log(\"There was a connection error...\")},r.send()}}},{key:\"componentWillReceiveProps\",value:function(n){n.geographyUrl||!n.geographyPaths.length===this.props.geographyPaths.length?n.geographyUrl!==this.props.geographyUrl&&this.fetchGeographies(n.geographyUrl):this.setState({geographyPaths:n.geographyPaths})}},{key:\"shouldComponentUpdate\",value:function(n,t){var e=t.geographyPaths.length!==this.state.geographyPaths.length,r=JSON.stringify(n.choropleth)!==JSON.stringify(this.props.choropleth);return e||r||n.disableOptimization}},{key:\"componentDidMount\",value:function(){this.fetchGeographies(this.props.geographyUrl)}},{key:\"render\",value:function(){var n=this.props,t=n.projection,e=n.style,r=n.children;return u.default.createElement(\"g\",{className:\"rsm-geographies\",style:e},r(this.state.geographyPaths,t))}}]),t}();c.defaultProps={componentIdentifier:\"Geographies\",disableOptimization:!1,geographyUrl:\"\",geographyPaths:[]},t.default=c},707:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r,o=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),u=e(38),a=(r=u)&&r.__esModule?r:{default:r},c=e(369),f=e(413);var l={},s=function(n){function t(){!function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var n=function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.state={hover:!1,pressed:!1},n.handleMouseEnter=n.handleMouseEnter.bind(n),n.handleMouseMove=n.handleMouseMove.bind(n),n.handleMouseLeave=n.handleMouseLeave.bind(n),n.handleMouseDown=n.handleMouseDown.bind(n),n.handleMouseUp=n.handleMouseUp.bind(n),n.handleMouseClick=n.handleMouseClick.bind(n),n.handleFocus=n.handleFocus.bind(n),n.handleBlur=n.handleBlur.bind(n),n}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,u.Component),i(t,[{key:\"handleMouseClick\",value:function(n){n.persist();var t=this.props,e=t.onClick,r=t.geography;return e&&e(r,n)}},{key:\"handleMouseEnter\",value:function(n){n.persist();var t=this.props,e=t.onMouseEnter,r=t.geography;this.setState({hover:!0},function(){return e&&e(r,n)})}},{key:\"handleMouseMove\",value:function(n){if(n.persist(),!this.state.pressed){var t=this.props,e=t.onMouseMove,r=t.geography;if(this.state.hover){if(!e)return;e(r,n)}else this.setState({hover:!0},function(){return e&&e(r,n)})}}},{key:\"handleMouseLeave\",value:function(n){n.persist();var t=this.props,e=t.onMouseLeave,r=t.geography;this.setState({hover:!1,pressed:!1},function(){return e&&e(r,n)})}},{key:\"handleMouseDown\",value:function(n){n.persist();var t=this.props,e=t.onMouseDown,r=t.geography;this.setState({pressed:!0},function(){return e&&e(r,n)})}},{key:\"handleMouseUp\",value:function(n){n.persist();var t=this.props,e=t.onMouseUp,r=t.geography;this.setState({pressed:!1},function(){return e&&e(r,n)})}},{key:\"handleFocus\",value:function(n){n.persist();var t=this.props,e=t.onFocus,r=t.geography;this.setState({hover:!0},function(){return e&&e(r,n)})}},{key:\"handleBlur\",value:function(n){n.persist();var t=this.props,e=t.onBlur,r=t.geography;this.setState({hover:!1},function(){return e&&e(r,n)})}},{key:\"render\",value:function(){var n=this,t=this.props,e=t.geography,r=t.projection,i=t.round,u=t.cacheId,s=t.precision,p=t.tabable,h=t.style,d=this.state,v=d.hover,g=d.pressed,y=function(n,t,e,r,o){if(l[n])return l[n];var i=n&&l[n]?l[n]:r?(0,f.roundPath)((0,c.geoPath)().projection(e())(t),o):(0,c.geoPath)().projection(e())(t);return n&&(l[n]=i),i}(u,e,r,i,s),b=[\"geography\",\"projection\",\"round\",\"cacheId\",\"precision\",\"tabable\",\"style\",\"onClick\",\"onMouseEnter\",\"onMouseMove\",\"onMouseLeave\",\"onMouseDown\",\"onMouseUp\",\"onFocus\",\"onBlur\"],m=Object.keys(this.props).filter(function(n){return-1===b.indexOf(n)}).reduce(function(t,e){return t[e]=n.props[e],t},{});return a.default.createElement(\"path\",o({d:y,className:\"rsm-geography\"+(g?\" rsm-geography--pressed\":\"\")+(v?\" rsm-geography--hover\":\"\"),style:h[g||v?g?\"pressed\":\"hover\":\"default\"],onClick:this.handleMouseClick,onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onMouseLeave:this.handleMouseLeave,onMouseDown:this.handleMouseDown,onMouseUp:this.handleMouseUp,onFocus:p&&this.handleFocus,onBlur:p&&this.handleBlur,tabIndex:p?0:-1},m))}}]),t}();s.defaultProps={precision:.1,cacheId:null,round:!1,tabable:!0,style:{default:{},hover:{},pressed:{}}},t.default=s},708:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(38),u=(r=i)&&r.__esModule?r:{default:r};var a=function(n){function t(){!function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var n=function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.state={hover:!1,pressed:!1},n.handleMouseEnter=n.handleMouseEnter.bind(n),n.handleMouseLeave=n.handleMouseLeave.bind(n),n.handleMouseDown=n.handleMouseDown.bind(n),n.handleMouseUp=n.handleMouseUp.bind(n),n.handleMouseClick=n.handleMouseClick.bind(n),n.handleMouseMove=n.handleMouseMove.bind(n),n.handleFocus=n.handleFocus.bind(n),n.handleBlur=n.handleBlur.bind(n),n}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:\"handleMouseEnter\",value:function(n){n.persist();var t=this.props,e=t.onMouseEnter,r=t.marker;this.setState({hover:!0},function(){return e&&e(r,n)})}},{key:\"handleMouseMove\",value:function(n){if(n.persist(),!this.state.pressed){var t=this.props,e=t.onMouseMove,r=t.marker;if(this.state.hover){if(!e)return;e(r,n)}else this.setState({hover:!0},function(){return e&&e(r,n)})}}},{key:\"handleMouseLeave\",value:function(n){n.persist();var t=this.props,e=t.onMouseLeave,r=t.marker;this.setState({hover:!1},function(){return e&&e(r,n)})}},{key:\"handleMouseDown\",value:function(n){n.persist();var t=this.props,e=t.onMouseDown,r=t.marker;this.setState({pressed:!0},function(){return e&&e(r,n)})}},{key:\"handleMouseUp\",value:function(n){n.persist();var t=this.props,e=t.onMouseUp,r=t.marker;this.setState({pressed:!1},function(){return e&&e(r,n)})}},{key:\"handleMouseClick\",value:function(n){if(this.props.onClick){n.persist();var t=this.props,e=t.onClick,r=t.marker,o=t.projection;return e&&e(r,o()(r.coordinates),n)}}},{key:\"handleFocus\",value:function(n){n.persist();var t=this.props,e=t.onFocus,r=t.marker;this.setState({hover:!0},function(){return e&&e(r,n)})}},{key:\"handleBlur\",value:function(n){n.persist();var t=this.props,e=t.onBlur,r=t.marker;this.setState({hover:!1},function(){return e&&e(r,n)})}},{key:\"render\",value:function(){var n=this.props,t=n.projection,e=n.marker,r=n.style,o=n.tabable,i=n.children,a=this.state,c=a.pressed,f=a.hover;return u.default.createElement(\"g\",{className:\"rsm-marker\"+(c?\" rsm-marker--pressed\":\"\")+(f?\" rsm-marker--hover\":\"\"),transform:\"translate(\\n           \"+t()(e.coordinates)[0]+\"\\n           \"+t()(e.coordinates)[1]+\"\\n         )\",style:r[c||f?c?\"pressed\":\"hover\":\"default\"],onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,onMouseDown:this.handleMouseDown,onMouseUp:this.handleMouseUp,onClick:this.handleMouseClick,onMouseMove:this.handleMouseMove,onFocus:this.handleFocus,onBlur:this.handleBlur,tabIndex:o?0:-1},i)}}]),t}();a.defaultProps={style:{default:{},hover:{},pressed:{}},marker:{coordinates:[0,0]},tabable:!0},t.default=a},709:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(38),u=(r=i)&&r.__esModule?r:{default:r};var a=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t),function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:\"render\",value:function(){var n=this.props,t=n.children,e=n.projection,r=n.style;return u.default.createElement(\"g\",{className:\"rsm-markers\",style:r},t?void 0===t.length?u.default.cloneElement(t,{projection:e}):t.map(function(n,t){return n?u.default.cloneElement(n,{key:n.key||\"marker-\"+t,projection:e}):null}):null)}}]),t}();a.defaultProps={componentIdentifier:\"Markers\"},t.default=a},710:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(38),u=(r=i)&&r.__esModule?r:{default:r},a=e(413);var c=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t),function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:\"render\",value:function(){var n=this.props,t=n.projection,e=n.subject,r=n.style,o=n.dx,i=n.dy,c=n.zoom,f=n.stroke,l=n.strokeWidth,s=n.children,p=(0,a.createConnectorPath)(null,[-o/c,-i/c]);return u.default.createElement(\"g\",{className:\"rsm-annotation\",style:{style:r},transform:\"translate(\\n          \"+(t()(e)[0]+o/c)+\"\\n          \"+(t()(e)[1]+i/c)+\"\\n        )\",textAnchor:(0,a.createTextAnchor)(o)},s,u.default.createElement(\"path\",{d:p,stroke:f,strokeWidth:l}))}}]),t}();c.defaultProps={componentIdentifier:\"Annotation\",stroke:\"#000000\",strokeWidth:1,zoom:1},t.default=c},711:function(n,t,e){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(38),u=(r=i)&&r.__esModule?r:{default:r},a=e(369),c=e(413);var f=function(n,t){return(0,a.geoPath)().projection(n())((0,a.geoGraticule)().step(t)())},l=function(n){return(0,a.geoPath)().projection(n())((0,a.geoGraticule)().outline())},s=function(n){function t(){!function(n,t){if(!(n instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var n=function(n,t){if(!n)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.state={renderGraticule:!1,graticulePath:\"\",outlinePath:\"\"},n.renderGraticule=n.renderGraticule.bind(n),n}return function(n,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:\"componentDidMount\",value:function(){this.renderGraticule()}},{key:\"renderGraticule\",value:function(){var n=this.props,t=n.step,e=n.projection,r=n.round,o=n.precision;this.setState({renderGraticule:!0,graticulePath:r?(0,c.roundPath)(f(e,t),o):f(e,t),outlinePath:r?(0,c.roundPath)(l(e),o):l(e)})}},{key:\"componentWillReceiveProps\",value:function(n){var t=this.props,e=t.step,r=t.projection,o=t.round,i=t.precision;n.round===o&&n.precision===i||this.setState({graticulePath:n.round?(0,c.roundPath)(f(r,e),i):f(r,e),outlinePath:n.round?(0,c.roundPath)(l(r),i):l(r)})}},{key:\"shouldComponentUpdate\",value:function(n){return n.disableOptimization}},{key:\"render\",value:function(){var n=this.props,t=(n.zoom,n.style),e=n.outline,r=n.fill,o=n.stroke;return this.state.renderGraticule&&u.default.createElement(\"g\",{className:\"rsm-graticule\"},u.default.createElement(\"path\",{fill:r,stroke:o,d:this.state.graticulePath,style:t}),e&&u.default.createElement(\"path\",{fill:r,stroke:o,d:this.state.outlinePath,style:t}))}}]),t}();s.defaultProps={componentIdentifier:\"Graticule\",disableOptimization:!0,round:!0,precision:.1,step:[10,10],outline:!0,stroke:\"#DDDDDD\",fill:\"transparent\",style:{pointerEvents:\"none\"}},t.default=s},713:function(n,t,e){\"use strict\";e.r(t);var r=e(369),o=Math.abs,i=Math.atan,u=Math.atan2,a=(Math.ceil,Math.cos),c=Math.exp,f=Math.floor,l=Math.log,s=Math.max,p=Math.min,h=Math.pow,d=Math.round,v=Math.sign||function(n){return n>0?1:n<0?-1:0},g=Math.sin,y=Math.tan,b=1e-6,m=1e-12,j=Math.PI,M=j/2,w=j/4,E=Math.SQRT1_2,P=C(2),O=C(j),S=2*j,k=180/j,_=j/180;function R(n){return n>1?M:n<-1?-M:Math.asin(n)}function x(n){return n>1?0:n<-1?j:Math.acos(n)}function C(n){return n>0?Math.sqrt(n):0}function z(n){return(c(n)-c(-n))/2}function G(n){return(c(n)+c(-n))/2}function A(n){var t=y(n/2),e=2*l(a(n/2))/(t*t);function r(n,t){var r=a(n),o=a(t),i=g(t),u=o*r,c=-((1-u?l((1+u)/2)/(1-u):-.5)+e/(1+u));return[c*o*g(n),c*i]}return r.invert=function(t,r){var i,c=C(t*t+r*r),f=-n/2,s=50;if(!c)return[0,0];do{var p=f/2,h=a(p),d=g(p),v=y(p),m=l(1/h);f-=i=(2/v*m-e*v-c)/(-m/(d*d)+1-e/(2*h*h))}while(o(i)>b&&--s>0);var j=g(f);return[u(t*j,c*a(f)),R(r*j/c)]},r}var N=function(){var n=M,t=Object(r.geoProjectionMutator)(A),e=t(n);return e.radius=function(e){return arguments.length?t(n=e*_):n*k},e.scale(179.976).clipAngle(147)};function F(n,t){var e=a(t),r=function(n){return n?n/Math.sin(n):1}(x(e*a(n/=2)));return[2*e*g(n)*r,g(t)*r]}F.invert=function(n,t){if(!(n*n+4*t*t>j*j+b)){var e=n,r=t,i=25;do{var u,c=g(e),f=g(e/2),l=a(e/2),s=g(r),p=a(r),h=g(2*r),d=s*s,v=p*p,y=f*f,m=1-v*l*l,M=m?x(p*l)*C(u=1/m):u=0,w=2*M*p*f-n,E=M*s-t,P=u*(v*y+M*p*l*d),O=u*(.5*c*h-2*M*s*f),S=.25*u*(h*f-M*s*v*c),k=u*(d*l+M*y*p),_=O*S-k*P;if(!_)break;var R=(E*O-w*k)/_,z=(w*S-E*P)/_;e-=R,r-=z}while((o(R)>b||o(z)>b)&&--i>0);return[e,r]}};var L=function(){return Object(r.geoProjection)(F).scale(152.63)};function T(n){var t=g(n),e=a(n),r=n>=0?1:-1,i=y(r*n),c=(1+t-e)/2;function f(n,o){var f=a(o),l=a(n/=2);return[(1+f)*g(n),(r*o>-u(l,i)-.001?0:10*-r)+c+g(o)*e-(1+f)*t*l]}return f.invert=function(n,f){var l=0,s=0,p=50;do{var h=a(l),d=g(l),v=a(s),y=g(s),m=1+v,j=m*d-n,M=c+y*e-m*t*h-f,w=m*h/2,E=-d*y,P=t*m*d/2,O=e*v+t*h*y,S=E*P-O*w,k=(M*E-j*O)/S/2,_=(j*P-M*w)/S;l-=k,s-=_}while((o(k)>b||o(_)>b)&&--p>0);return r*s>-u(a(l),i)-.001?[2*l,s]:null},f}var D=function(){var n=20*_,t=n>=0?1:-1,e=y(t*n),o=Object(r.geoProjectionMutator)(T),i=o(n),c=i.stream;return i.parallel=function(r){return arguments.length?(e=y((t=(n=r*_)>=0?1:-1)*n),o(n)):n*k},i.stream=function(r){var o=i.rotate(),f=c(r),l=(i.rotate([0,0]),c(r));return i.rotate(o),f.sphere=function(){l.polygonStart(),l.lineStart();for(var r=-180*t;t*r<180;r+=90*t)l.point(r,90*t);for(;t*(r-=n)>=-180;)l.point(r,t*-u(a(r*_/2),e)*k);l.lineEnd(),l.polygonEnd()},f},i.scale(218.695).center([0,28.0974])};function B(n,t){var e=y(t/2),r=C(1-e*e),o=1+r*a(n/=2),i=g(n)*r/o,u=e/o,c=i*i,f=u*u;return[4/3*i*(3+c-3*f),4/3*u*(3+3*c-f)]}B.invert=function(n,t){if(t*=3/8,!(n*=3/8)&&o(t)>1)return null;var e=1+n*n+t*t,r=C((e-C(e*e-4*t*t))/2),i=R(r)/3,c=r?function(n){return l(n+C(n*n-1))}(o(t/r))/3:function(n){return l(n+C(n*n+1))}(o(n))/3,f=a(i),s=G(c),p=s*s-f*f;return[2*v(n)*u(z(c)*f,.25-p),2*v(t)*u(s*g(i),.25+p)]};var q=function(){return Object(r.geoProjection)(B).scale(66.1603)},U=C(8),I=l(1+P);function W(n,t){var e=o(t);return e<w?[n,l(y(w+t/2))]:[n*a(e)*(2*P-1/g(e)),v(t)*(2*P*(e-w)-l(y(e/2)))]}W.invert=function(n,t){if((r=o(t))<I)return[n,2*i(c(t))-M];var e,r,u=w,f=25;do{var s=a(u/2),p=y(u/2);u-=e=(U*(u-w)-l(p)-r)/(U-s*s/(2*p))}while(o(e)>m&&--f>0);return[n/(a(u)*(U-1/g(u))),v(t)*u]};var X=function(){return Object(r.geoProjection)(W).scale(112.314)};function Y(n){var t=2*j/n;function e(n,e){var i=Object(r.geoAzimuthalEquidistantRaw)(n,e);if(o(n)>M){var c=u(i[1],i[0]),f=C(i[0]*i[0]+i[1]*i[1]),l=t*d((c-M)/t)+M,s=u(g(c-=l),2-a(c));c=l+R(j/f*g(s))-s,i[0]=f*a(c),i[1]=f*g(c)}return i}return e.invert=function(n,e){var o=C(n*n+e*e);if(o>M){var c=u(e,n),f=t*d((c-M)/t)+M,l=c>f?-1:1,s=o*a(f-c),p=1/y(l*x((s-j)/C(j*(j-2*s)+o*o)));c=f+2*i((p+l*C(p*p-3))/3),n=o*a(c),e=o*g(c)}return r.geoAzimuthalEquidistantRaw.invert(n,e)},e}var H=function(){var n=5,t=Object(r.geoProjectionMutator)(Y),e=t(n),o=e.stream,i=-a(.01*_),c=g(.01*_);return e.lobes=function(e){return arguments.length?t(n=+e):n},e.stream=function(t){var r=e.rotate(),f=o(t),l=(e.rotate([0,0]),o(t));return e.rotate(r),f.sphere=function(){l.polygonStart(),l.lineStart();for(var t=0,e=360/n,r=2*j/n,o=90-180/n,f=M;t<n;++t,o-=e,f-=r)l.point(u(c*a(f),i)*k,R(c*g(f))*k),o<-90?(l.point(-90,-180-o-.01),l.point(-90,-180-o+.01)):(l.point(90,o+.01),l.point(90,o-.01));l.lineEnd(),l.polygonEnd()},f},e.scale(87.8076).center([0,17.1875]).clipAngle(179.999)};function Q(n,t){var e,r=n*g(t),i=30;do{t-=e=(t+g(t)-r)/(1+a(t))}while(o(e)>b&&--i>0);return t/2}function V(n,t,e){function r(r,o){return[n*r*a(o=Q(e,o)),t*g(o)]}return r.invert=function(r,o){return o=R(o/t),[r/(n*a(o)),R((2*o+g(2*o))/e)]},r}var J=V(P/M,P,j),K=function(){return Object(r.geoProjection)(J).scale(169.529)},Z=2.00276,$=1.11072;function nn(n,t){var e=Q(j,t);return[Z*n/(1/a(t)+$/a(e)),(t+P*g(e))/Z]}nn.invert=function(n,t){var e,r,i=Z*t,u=t<0?-w:w,c=25;do{r=i-P*g(u),u-=e=(g(2*u)+2*u-j*g(r))/(2*a(2*u)+2+j*a(r)*P*a(u))}while(o(e)>b&&--c>0);return r=i-P*g(u),[n*(1/a(r)+$/a(u))/Z,r]};var tn=function(){return Object(r.geoProjection)(nn).scale(160.857)},en=function(n){var t=0,e=Object(r.geoProjectionMutator)(n),o=e(t);return o.parallel=function(n){return arguments.length?e(t=n*_):t*k},o};function rn(n,t){return[n*a(t),t]}rn.invert=function(n,t){return[n/a(t),t]};var on=function(){return Object(r.geoProjection)(rn).scale(152.63)};function un(n){if(!n)return rn;var t=1/y(n);function e(e,r){var o=t+n-r,i=o?e*a(r)/o:o;return[o*g(i),t-o*a(i)]}return e.invert=function(e,r){var o=C(e*e+(r=t-r)*r),i=t+n-o;return[o/a(i)*u(e,r),i]},e}var an=function(){return en(un).scale(123.082).center([0,26.1441]).parallel(45)};function cn(n){function t(t,e){var r=M-e,o=r?t*n*g(r)/r:r;return[r*g(o)/n,M-r*a(o)]}return t.invert=function(t,e){var r=t*n,o=M-e,i=C(r*r+o*o),a=u(r,o);return[(i?i/g(i):1)*a/n,M-i]},t}var fn=function(){var n=.5,t=Object(r.geoProjectionMutator)(cn),e=t(n);return e.fraction=function(e){return arguments.length?t(n=+e):n},e.scale(158.837)},ln=V(1,4/j,j),sn=function(){return Object(r.geoProjection)(ln).scale(152.63)};function pn(n,t,e,r,i,c){var f,l=a(c);if(o(n)>1||o(c)>1)f=x(e*i+t*r*l);else{var s=g(n/2),p=g(c/2);f=2*R(C(s*s+t*r*p*p))}return o(f)>b?[f,u(r*g(c),t*i-e*r*l)]:[0,0]}function hn(n,t,e){return x((n*n+t*t-e*e)/(2*n*t))}function dn(n){return n-2*j*f((n+j)/(2*j))}function vn(n,t,e){for(var r,o=[[n[0],n[1],g(n[1]),a(n[1])],[t[0],t[1],g(t[1]),a(t[1])],[e[0],e[1],g(e[1]),a(e[1])]],i=o[2],u=0;u<3;++u,i=r)r=o[u],i.v=pn(r[1]-i[1],i[3],i[2],r[3],r[2],r[0]-i[0]),i.point=[0,0];var c=hn(o[0].v[0],o[2].v[0],o[1].v[0]),f=hn(o[0].v[0],o[1].v[0],o[2].v[0]),l=j-c;o[2].point[1]=0,o[0].point[0]=-(o[1].point[0]=o[0].v[0]/2);var s=[o[2].point[0]=o[0].point[0]+o[2].v[0]*a(c),2*(o[0].point[1]=o[1].point[1]=o[2].v[0]*g(c))];return function(n,t){var e,r=g(t),i=a(t),u=new Array(3);for(e=0;e<3;++e){var c=o[e];if(u[e]=pn(t-c[1],c[3],c[2],i,r,n-c[0]),!u[e][0])return c.point;u[e][1]=dn(u[e][1]-c.v[1])}var p=s.slice();for(e=0;e<3;++e){var h=2==e?0:e+1,d=hn(o[e].v[0],u[e][0],u[h][0]);u[e][1]<0&&(d=-d),e?1==e?(d=f-d,p[0]-=u[e][0]*a(d),p[1]-=u[e][0]*g(d)):(d=l-d,p[0]+=u[e][0]*a(d),p[1]+=u[e][0]*g(d)):(p[0]+=u[e][0]*a(d),p[1]-=u[e][0]*g(d))}return p[0]/=3,p[1]/=3,p}}function gn(n){return n[0]*=_,n[1]*=_,n}function yn(){return bn([0,22],[45,22],[22.5,-22]).scale(380).center([22.5,2])}function bn(n,t,e){var o=Object(r.geoCentroid)({type:\"MultiPoint\",coordinates:[n,t,e]}),i=[-o[0],-o[1]],u=Object(r.geoRotation)(i),a=Object(r.geoProjection)(vn(gn(u(n)),gn(u(t)),gn(u(e)))).rotate(i),c=a.center;return delete a.rotate,a.center=function(n){return arguments.length?c(u(n)):u.invert(c())},a.clipAngle(90)}function mn(n,t){var e=C(1-g(t));return[2/O*n*e,O*(1-e)]}mn.invert=function(n,t){var e=(e=t/O-1)*e;return[e>0?n*C(j/e)/2:0,R(1-e)]};var jn=function(){return Object(r.geoProjection)(mn).scale(95.6464).center([0,30])};function Mn(n){var t=y(n);function e(n,e){return[n,(n?n/g(n):1)*(g(e)*a(n)-t*a(e))]}return e.invert=t?function(n,e){n&&(e*=g(n)/n);var r=a(n);return[n,2*u(C(r*r+t*t-e*e)-r,t-e)]}:function(n,t){return[n,R(n?t*y(n)/n:t)]},e}var wn=function(){return en(Mn).scale(249.828).clipAngle(90)},En=C(3);function Pn(n,t){return[En*n*(2*a(2*t/3)-1)/O,En*O*g(t/3)]}Pn.invert=function(n,t){var e=3*R(t/(En*O));return[O*n/(En*(2*a(2*e/3)-1)),e]};var On=function(){return Object(r.geoProjection)(Pn).scale(156.19)};function Sn(n){var t=a(n);function e(n,e){return[n*t,g(e)/t]}return e.invert=function(n,e){return[n/t,R(e*t)]},e}var kn=function(){return en(Sn).parallel(38.58).scale(195.044)};function _n(n){var t=a(n);function e(n,e){return[n*t,(1+t)*y(e/2)]}return e.invert=function(n,e){return[n/t,2*i(e/(1+t))]},e}var Rn=function(){return en(_n).scale(124.75)};function xn(n,t){var e=C(8/(3*j));return[e*n*(1-o(t)/j),e*t]}xn.invert=function(n,t){var e=C(8/(3*j)),r=t/e;return[n/(e*(1-o(r)/j)),r]};var Cn=function(){return Object(r.geoProjection)(xn).scale(165.664)};function zn(n,t){var e=C(4-3*g(o(t)));return[2/C(6*j)*n*e,v(t)*C(2*j/3)*(2-e)]}zn.invert=function(n,t){var e=2-o(t)/C(2*j/3);return[n*C(6*j)/(2*e),v(t)*R((4-e*e)/3)]};var Gn=function(){return Object(r.geoProjection)(zn).scale(165.664)};function An(n,t){var e=C(j*(4+j));return[2/e*n*(1+C(1-4*t*t/(j*j))),4/e*t]}An.invert=function(n,t){var e=C(j*(4+j))/2;return[n*e/(1+C(1-t*t*(4+j)/(4*j))),t*e/2]};var Nn=function(){return Object(r.geoProjection)(An).scale(180.739)};function Fn(n,t){var e=(2+M)*g(t);t/=2;for(var r=0,i=1/0;r<10&&o(i)>b;r++){var u=a(t);t-=i=(t+g(t)*(u+2)-e)/(2*u*(1+u))}return[2/C(j*(4+j))*n*(1+a(t)),2*C(j/(4+j))*g(t)]}Fn.invert=function(n,t){var e=t*C((4+j)/j)/2,r=R(e),o=a(r);return[n/(2/C(j*(4+j))*(1+o)),R((r+e*(o+2))/(2+M))]};var Ln=function(){return Object(r.geoProjection)(Fn).scale(180.739)};function Tn(n,t){return[n*(1+a(t))/C(2+j),2*t/C(2+j)]}Tn.invert=function(n,t){var e=C(2+j),r=t*e/2;return[e*n/(1+a(r)),r]};var Dn=function(){return Object(r.geoProjection)(Tn).scale(173.044)};function Bn(n,t){for(var e=(1+M)*g(t),r=0,i=1/0;r<10&&o(i)>b;r++)t-=i=(t+g(t)-e)/(1+a(t));return e=C(2+j),[n*(1+a(t))/e,2*t/e]}Bn.invert=function(n,t){var e=1+M,r=C(e/2);return[2*n*r/(1+a(t*=r)),R((t+g(t))/e)]};var qn=function(){return Object(r.geoProjection)(Bn).scale(173.044)},Un=3+2*P;function In(n,t){var e=g(n/=2),r=a(n),o=C(a(t)),u=a(t/=2),c=g(t)/(u+P*r*o),f=C(2/(1+c*c)),s=C((P*u+(r+e)*o)/(P*u+(r-e)*o));return[Un*(f*(s-1/s)-2*l(s)),Un*(f*c*(s+1/s)-2*i(c))]}In.invert=function(n,t){if(!(e=B.invert(n/1.2,1.065*t)))return null;var e,r=e[0],u=e[1],c=20;n/=Un,t/=Un;do{var f=r/2,h=u/2,d=g(f),v=a(f),y=g(h),m=a(h),j=a(u),w=C(j),O=y/(m+P*v*w),S=O*O,k=C(2/(1+S)),_=(P*m+(v+d)*w)/(P*m+(v-d)*w),R=C(_),x=R-1/R,z=R+1/R,G=k*x-2*l(R)-n,A=k*O*z-2*i(O)-t,N=y&&E*w*d*S/y,F=(P*v*m+w)/(2*(m+P*v*w)*(m+P*v*w)*w),L=-.5*O*k*k*k,T=L*N,D=L*F,q=(q=2*m+P*w*(v-d))*q*R,U=(P*v*m*w+j)/q,I=-P*d*y/(w*q),W=x*T-2*U/R+k*(U+U/_),X=x*D-2*I/R+k*(I+I/_),Y=O*z*T-2*N/(1+S)+k*z*N+k*O*(U-U/_),H=O*z*D-2*F/(1+S)+k*z*F+k*O*(I-I/_),Q=X*Y-H*W;if(!Q)break;var V=(A*X-G*H)/Q,J=(G*Y-A*W)/Q;r-=V,u=s(-M,p(M,u-J))}while((o(V)>b||o(J)>b)&&--c>0);return o(o(u)-M)<b?[0,u]:c&&[r,u]};var Wn=function(){return Object(r.geoProjection)(In).scale(62.5271)},Xn=a(35*_);function Yn(n,t){var e=y(t/2);return[n*Xn*C(1-e*e),(1+Xn)*e]}Yn.invert=function(n,t){var e=t/(1+Xn);return[n&&n/(Xn*C(1-e*e)),2*i(e)]};var Hn=function(){return Object(r.geoProjection)(Yn).scale(137.152)};function Qn(n,t){var e=t/2,r=a(e);return[2*n/O*a(t)*r*r,O*y(e)]}Qn.invert=function(n,t){var e=i(t/O),r=a(e),o=2*e;return[n*O/2/(a(o)*r*r),o]};var Vn=function(){return Object(r.geoProjection)(Qn).scale(135.264)};function Jn(n){return[n[0]/2,R(y(n[1]/2*_))*k]}function Kn(n){return[2*n[0],2*i(g(n[1]*_))*k]}var Zn=function(n){null==n&&(n=r.geoOrthographic);var t=n(),e=Object(r.geoEquirectangular)().scale(k).precision(0).clipAngle(null).translate([0,0]);function o(n){return t(Jn(n))}function i(n){o[n]=function(e){return arguments.length?(t[n](e),o):t[n]()}}return t.invert&&(o.invert=function(n){return Kn(t.invert(n))}),o.stream=function(n){var r=t.stream(n),o=e.stream({point:function(n,t){r.point(n/2,R(y(-t/2*_))*k)},lineStart:function(){r.lineStart()},lineEnd:function(){r.lineEnd()},polygonStart:function(){r.polygonStart()},polygonEnd:function(){r.polygonEnd()}});return o.sphere=r.sphere,o},o.rotate=function(n){return arguments.length?(e.rotate(n),o):e.rotate()},o.center=function(n){return arguments.length?(t.center(Jn(n)),o):Kn(t.center())},i(\"clipAngle\"),i(\"clipExtent\"),i(\"scale\"),i(\"translate\"),i(\"precision\"),o.scale(249.5)};function $n(n,t){var e=2*j/t,i=n*n;function c(t,c){var f=Object(r.geoAzimuthalEquidistantRaw)(t,c),l=f[0],s=f[1],p=l*l+s*s;if(p>i){var h=C(p),v=u(s,l),y=e*d(v/e),m=v-y,w=n*a(m),E=(n*g(m)-m*g(w))/(M-w),P=nt(m,E),O=(j-n)/tt(P,w,j);l=h;var S,k=50;do{l-=S=(n+tt(P,w,l)*O-h)/(P(l)*O)}while(o(S)>b&&--k>0);s=m*g(l),l<M&&(s-=E*(l-M));var _=g(y),R=a(y);f[0]=l*R-s*_,f[1]=l*_+s*R}return f}return c.invert=function(t,c){var f=t*t+c*c;if(f>i){var l=C(f),s=u(c,t),p=e*d(s/e),h=s-p;t=l*a(h),c=l*g(h);for(var v=t-M,y=g(t),b=c/y,w=t<M?1/0:0,E=10;;){var P=n*g(b),O=n*a(b),S=g(O),k=M-O,_=(P-b*S)/k,R=nt(b,_);if(o(w)<m||!--E)break;b-=w=(b*y-_*v-c)/(y-2*v*(k*(O+b*P*a(O)-S)-P*(P-b*S))/(k*k))}t=(l=n+tt(R,O,t)*(j-n)/tt(R,O,j))*a(s=p+b),c=l*g(s)}return r.geoAzimuthalEquidistantRaw.invert(t,c)},c}function nt(n,t){return function(e){var r=n*a(e);return e<M&&(r-=t),C(1+r*r)}}function tt(n,t,e){for(var r=(e-t)/50,o=n(t)+n(e),i=1,u=t;i<50;++i)o+=2*n(u+=r);return.5*o*r}var et=function(){var n=6,t=30*_,e=a(t),o=g(t),i=Object(r.geoProjectionMutator)($n),c=i(t,n),f=c.stream,l=-a(.01*_),s=g(.01*_);return c.radius=function(r){return arguments.length?(e=a(t=r*_),o=g(t),i(t,n)):t*k},c.lobes=function(e){return arguments.length?i(t,n=+e):n},c.stream=function(t){var r=c.rotate(),i=f(t),p=(c.rotate([0,0]),f(t));return c.rotate(r),i.sphere=function(){p.polygonStart(),p.lineStart();for(var t=0,r=2*j/n,i=0;t<n;++t,i-=r)p.point(u(s*a(i),l)*k,R(s*g(i))*k),p.point(u(o*a(i-r/2),e)*k,R(o*g(i-r/2))*k);p.lineEnd(),p.polygonEnd()},i},c.rotate([90,-40]).scale(91.7095).clipAngle(179.999)},rt=function(n,t,e,r,i,u,c,f){function l(o,l){if(!l)return[n*o/j,0];var s=l*l,p=n+s*(t+s*(e+s*r)),h=l*(i-1+s*(u-f+s*c)),d=(p*p+h*h)/(2*h),v=o*R(p/d)/j;return[d*g(v),l*(1+s*f)+d*(1-a(v))]}return arguments.length<8&&(f=0),l.invert=function(l,s){var p,h,d=j*l/n,v=s,y=50;do{var m=v*v,M=n+m*(t+m*(e+m*r)),w=v*(i-1+m*(u-f+m*c)),E=M*M+w*w,P=2*w,O=E/P,S=O*O,k=R(M/O)/j,_=d*k,x=M*M,z=(2*t+m*(4*e+6*m*r))*v,G=i+m*(3*u+5*m*c),A=(2*(M*z+w*(G-1))*P-E*(2*(G-1)))/(P*P),N=a(_),F=g(_),L=O*N,T=O*F,D=d/j*(1/C(1-x/S))*(z*O-M*A)/S,B=T-l,q=v*(1+m*f)+O-L-s,U=A*F+L*D,I=L*k,W=1+A-(A*N-T*D),X=T*k,Y=U*X-W*I;if(!Y)break;d-=p=(q*U-B*W)/Y,v-=h=(B*X-q*I)/Y}while((o(p)>b||o(h)>b)&&--y>0);return[d,v]},l},ot=rt(2.8284,-1.6988,.75432,-.18071,1.76003,-.38914,.042555),it=function(){return Object(r.geoProjection)(ot).scale(149.995)},ut=rt(2.583819,-.835827,.170354,-.038094,1.543313,-.411435,.082742),at=function(){return Object(r.geoProjection)(ut).scale(153.93)},ct=rt(5/6*j,-.62636,-.0344,0,1.3493,-.05524,0,.045),ft=function(){return Object(r.geoProjection)(ct).scale(130.945)};function lt(n,t){var e=n*n,r=t*t;return[n*(1-.162388*r)*(.87-952426e-9*e*e),t*(1+r/12)]}lt.invert=function(n,t){var e,r=n,i=t,u=50;do{var a=i*i;i-=e=(i*(1+a/12)-t)/(1+a/4)}while(o(e)>b&&--u>0);u=50,n/=1-.162388*a;do{var c=(c=r*r)*c;r-=e=(r*(.87-952426e-9*c)-n)/(.87-.00476213*c)}while(o(e)>b&&--u>0);return[r,i]};var st=function(){return Object(r.geoProjection)(lt).scale(131.747)},pt=rt(2.6516,-.76534,.19123,-.047094,1.36289,-.13965,.031762),ht=function(){return Object(r.geoProjection)(pt).scale(131.087)},dt=function(n){var t=n(M,0)[0]-n(-M,0)[0];function e(e,r){var o=e>0?-.5:.5,i=n(e+o*j,r);return i[0]-=o*t,i}return n.invert&&(e.invert=function(e,r){var o=e>0?-.5:.5,i=n.invert(e+o*t,r),u=i[0]-o*j;return u<-j?u+=2*j:u>j&&(u-=2*j),i[0]=u,i}),e};function vt(n,t){var e=v(n),r=v(t),i=a(t),c=a(n)*i,f=g(n)*i,l=g(r*t);n=o(u(f,l)),t=R(c),o(n-M)>b&&(n%=M);var s=function(n,t){if(t===M)return[0,0];var e,r,i=g(t),u=i*i,c=u*u,f=1+c,l=1+3*c,s=1-c,p=R(1/C(f)),h=s+u*f*p,d=(1-i)/h,v=C(d),y=d*f,m=C(y),w=v*s;if(0===n)return[0,-(w+u*m)];var E,P=a(t),O=1/P,S=2*i*P,k=(-h*P-(-3*u+p*l)*S*(1-i))/(h*h),_=-O*S,x=-O*(u*f*k+d*l*S),z=-2*O*(s*(.5*k/v)-2*u*v*S),G=4*n/j;if(n>.222*j||t<j/4&&n>.175*j){if(e=(w+u*C(y*(1+c)-w*w))/(1+c),n>j/4)return[e,e];var A=e,N=.5*e;e=.5*(N+A),r=50;do{var F=C(y-e*e),L=e*(z+_*F)+x*R(e/m)-G;if(!L)break;L<0?N=e:A=e,e=.5*(N+A)}while(o(A-N)>b&&--r>0)}else{e=b,r=25;do{var T=e*e,D=C(y-T),B=z+_*D,q=e*B+x*R(e/m)-G,U=B+(x-_*T)/D;e-=E=D?q/U:0}while(o(E)>b&&--r>0)}return[e,-w-u*C(y-e*e)]}(n>j/4?M-n:n,t);return n>j/4&&(l=s[0],s[0]=-s[1],s[1]=-l),s[0]*=e,s[1]*=-r,s}vt.invert=function(n,t){var e=v(n),r=v(t),i=-e*n,c=-r*t,f=c/i<1,l=function(n,t){var e=0,r=1,i=.5,u=50;for(;;){var c=i*i,f=C(i),l=R(1/C(1+c)),s=1-c+i*(1+c)*l,p=(1-f)/s,h=C(p),d=p*(1+c),v=h*(1-c),g=d-n*n,y=C(g),b=t+v+i*y;if(o(r-e)<m||0==--u||0===b)break;b>0?e=i:r=i,i=.5*(e+r)}if(!u)return null;var M=R(f),w=a(M),E=1/w,P=2*f*w,O=(-s*w-(-3*i+l*(1+3*c))*P*(1-f))/(s*s);return[j/4*(n*(-2*E*(.5*O/h*(1-c)-2*i*h*P)+-E*P*y)+-E*(i*(1+c)*O+p*(1+3*c)*P)*R(n/C(d))),M]}(f?c:i,f?i:c),s=l[0],p=l[1],h=a(p);return f&&(s=-M-s),[e*(u(g(s)*h,-g(p))+j),r*R(a(s)*h)]};var gt=function(){return Object(r.geoProjection)(dt(vt)).scale(239.75)};function yt(n,t){var e,r,u,f,l,s;if(t<b)return[(f=g(n))-(e=t*(n-f*(r=a(n)))/4)*r,r+e*f,1-t*f*f/2,n-e];if(t>=1-b)return e=(1-t)/4,u=1/(r=G(n)),[(f=((s=c(2*(s=n)))-1)/(s+1))+e*((l=r*z(n))-n)/(r*r),u-e*f*u*(l-n),u+e*f*u*(l+n),2*i(c(n))-M+e*(l-n)/r];var p=[1,0,0,0,0,0,0,0,0],h=[C(t),0,0,0,0,0,0,0,0],d=0;for(r=C(1-t),l=1;o(h[d]/p[d])>b&&d<8;)e=p[d++],h[d]=(e-r)/2,p[d]=(e+r)/2,r=C(e*r),l*=2;u=l*p[d]*n;do{u=(R(f=h[d]*g(r=u)/p[d])+u)/2}while(--d);return[g(u),f=a(u),f/a(u-r),u]}function bt(n,t){if(!t)return n;if(1===t)return l(y(n/2+w));for(var e=1,r=C(1-t),u=C(t),a=0;o(u)>b;a++){if(n%j){var c=i(r*y(n)/e);c<0&&(c+=j),n+=c+~~(n/j)*j}else n+=n;u=(e+r)/2,r=C(e*r),u=((e=u)-r)/2}return n/(h(2,a)*e)}function mt(n,t){var e=(P-1)/(P+1),r=C(1-e*e),f=bt(M,r*r),s=l(y(j/4+o(t)/2)),p=c(-1*s)/C(e),h=function(n,t){var e=n*n,r=t+1,o=1-e-t*t;return[.5*((n>=0?M:-M)-u(o,2*n)),-.25*l(o*o+4*e)+.5*l(r*r+e)]}(p*a(-1*n),p*g(-1*n)),d=function(n,t,e){var r=o(n),u=z(o(t));if(r){var a=1/g(r),c=1/(y(r)*y(r)),f=-(c+e*(u*u*a*a)-1+e),l=(-f+C(f*f-(e-1)*c*4))/2;return[bt(i(1/C(l)),e)*v(n),bt(i(C((l/c-1)/e)),1-e)*v(t)]}return[0,bt(i(u),1-e)*v(t)]}(h[0],h[1],r*r);return[-d[1],(t>=0?1:-1)*(.5*f-d[0])]}mt.invert=function(n,t){var e,r,o,a,f,s,p=(P-1)/(P+1),h=C(1-p*p),d=bt(M,h*h),v=(r=-n,o=h*h,(e=.5*d-t)?(a=yt(e,o),r?(s=(f=yt(r,1-o))[1]*f[1]+o*a[0]*a[0]*f[0]*f[0],[[a[0]*f[2]/s,a[1]*a[2]*f[0]*f[1]/s],[a[1]*f[1]/s,-a[0]*a[2]*f[0]*f[2]/s],[a[2]*f[1]*f[2]/s,-o*a[0]*a[1]*f[0]/s]]):[[a[0],0],[a[1],0],[a[2],0]]):[[0,(f=yt(r,1-o))[0]/f[1]],[1/f[1],0],[f[2]/f[1],0]]),g=function(n,t){var e=t[0]*t[0]+t[1]*t[1];return[(n[0]*t[0]+n[1]*t[1])/e,(n[1]*t[0]-n[0]*t[1])/e]}(v[0],v[1]);return[u(g[1],g[0])/-1,2*i(c(-.5*l(p*g[0]*g[0]+p*g[1]*g[1])))-M]};var jt=function(){return Object(r.geoProjection)(dt(mt)).scale(151.496)};function Mt(n,t){if(arguments.length<2&&(t=n),1===t)return r.geoAzimuthalEqualAreaRaw;if(t===1/0)return wt;function e(e,o){var i=Object(r.geoAzimuthalEqualAreaRaw)(e/t,o);return i[0]*=n,i}return e.invert=function(e,o){var i=r.geoAzimuthalEqualAreaRaw.invert(e/n,o);return i[0]*=t,i},e}function wt(n,t){return[n*a(t)/a(t/=2),2*g(t)]}wt.invert=function(n,t){var e=2*R(t/2);return[n*a(e/2)/a(e),e]};var Et=function(){var n=2,t=Object(r.geoProjectionMutator)(Mt),e=t(n);return e.coefficient=function(e){return arguments.length?t(n=+e):n},e.scale(169.529)};function Pt(n){var t=g(n),e=a(n),r=Ot(n);function i(n,i){var u=r(n,i);n=u[0],i=u[1];var c=g(i),f=a(i),l=a(n),s=x(t*c+e*f*l),p=g(s),h=o(p)>b?s/p:1;return[h*e*g(n),(o(n)>M?h:-h)*(t*f-e*c*l)]}return r.invert=Ot(-n),i.invert=function(n,e){var o=C(n*n+e*e),i=-g(o),c=a(o),f=o*c,l=-e*i,s=o*t,p=C(f*f+l*l-s*s),h=u(f*s+l*p,l*s-f*p),d=(o>M?-1:1)*u(n*i,o*a(h)*c+e*g(h)*i);return r.invert(d,h)},i}function Ot(n){var t=g(n),e=a(n);return function(n,r){var o=a(r),i=a(n)*o,c=g(n)*o,f=g(r);return[u(c,i*e-f*t),R(f*e+i*t)]}}var St=function(){var n=0,t=Object(r.geoProjectionMutator)(Pt),e=t(n),o=e.rotate,i=e.stream,u=Object(r.geoCircle)();return e.parallel=function(r){if(!arguments.length)return n*k;var o=e.rotate();return t(n=r*_).rotate(o)},e.rotate=function(t){return arguments.length?(o.call(e,[t[0],t[1]-n*k]),u.center([-t[0],-t[1]]),e):((t=o.call(e))[1]+=n*k,t)},e.stream=function(n){return(n=i(n)).sphere=function(){n.polygonStart();var t,e=u.radius(89.99)().coordinates[0],r=e.length-1,o=-1;for(n.lineStart();++o<r;)n.point((t=e[o])[0],t[1]);for(n.lineEnd(),r=(e=u.radius(90.01)().coordinates[0]).length-1,n.lineStart();--o>=0;)n.point((t=e[o])[0],t[1]);n.lineEnd(),n.polygonEnd()},n},e.scale(79.4187).parallel(45).clipAngle(179.999)},kt=e(399),_t=41+48/36+37/3600,Rt=Sn(0);function xt(n){var t=_t*_,e=mn(j,t)[0]-mn(-j,t)[0],r=Rt(0,t)[1],i=mn(0,t)[1],u=O-i,a=S/n,c=4/S,l=r+u*u*4/S;function h(h,d){var v,g=o(d);if(g>t){var y=p(n-1,s(0,f((h+j)/a)));(v=mn(h+=j*(n-1)/n-y*a,g))[0]=v[0]*S/e-S*(n-1)/(2*n)+y*S/n,v[1]=r+4*(v[1]-i)*u/S,d<0&&(v[1]=-v[1])}else v=Rt(h,d);return v[0]*=c,v[1]/=l,v}return h.invert=function(t,h){t/=c;var d=o(h*=l);if(d>r){var v=p(n-1,s(0,f((t+j)/a)));t=(t+j*(n-1)/n-v*a)*e/S;var g=mn.invert(t,.25*(d-r)*S/u+i);return g[0]-=j*(n-1)/n-v*a,h<0&&(g[1]=-g[1]),g}return Rt.invert(t,h)},h}var Ct=function(){var n=4,t=Object(r.geoProjectionMutator)(xt),e=t(n),o=e.stream;return e.lobes=function(e){return arguments.length?t(n=+e):n},e.stream=function(t){var i=e.rotate(),u=o(t),a=(e.rotate([0,0]),o(t));return e.rotate(i),u.sphere=function(){var t;Object(r.geoStream)((t=180/n,{type:\"Polygon\",coordinates:[Object(kt.b)(-180,180+t/2,t).map(function(n,t){return[n,1&t?90-1e-6:_t]}).concat(Object(kt.b)(180,-180-t/2,-t).map(function(n,t){return[n,1&t?1e-6-90:-_t]}))]}),a)},u},e.scale(239.75)};function zt(n){var t,e=1+n,r=R(g(1/e)),i=2*C(j/(t=j+4*r*e)),c=.5*i*(e+C(n*(2+n))),f=n*n,l=e*e;function s(s,p){var h,d,v=1-g(p);if(v&&v<2){var y,b=M-p,w=25;do{var E=g(b),P=a(b),O=r+u(E,e-P),S=1+l-2*e*P;b-=y=(b-f*r-e*E+S*O-.5*v*t)/(2*e*E*O)}while(o(y)>m&&--w>0);h=i*C(S),d=s*O/j}else h=i*(n+v),d=s*r/j;return[h*g(d),c-h*a(d)]}return s.invert=function(n,o){var a=n*n+(o-=c)*o,s=(1+l-a/(i*i))/(2*e),p=x(s),h=g(p),d=r+u(h,e-s);return[R(n/C(a))*j/d,R(1-2*(p-f*r-e*h+(1+l-2*e*s)*d)/t)]},s}var Gt=function(){var n=1,t=Object(r.geoProjectionMutator)(zt),e=t(n);return e.ratio=function(e){return arguments.length?t(n=+e):n},e.scale(167.774).center([0,18.67])},At=.7109889596207567,Nt=.0528035274542;function Ft(n,t){return t>-At?((n=J(n,t))[1]+=Nt,n):rn(n,t)}Ft.invert=function(n,t){return t>-At?J.invert(n,t-Nt):rn.invert(n,t)};var Lt=function(){return Object(r.geoProjection)(Ft).rotate([-20,-55]).scale(164.263).center([0,-5.4036])};function Tt(n,t){return o(t)>At?((n=J(n,t))[1]-=t>0?Nt:-Nt,n):rn(n,t)}Tt.invert=function(n,t){return o(t)>At?J.invert(n,t+(t>0?Nt:-Nt)):rn.invert(n,t)};var Dt=function(){return Object(r.geoProjection)(Tt).scale(152.63)};function Bt(n,t){return o(n[0]-t[0])<b&&o(n[1]-t[1])<b}function qt(n,t){for(var e,r,o,i=-1,u=n.length,a=n[0],c=[];++i<u;){r=((e=n[i])[0]-a[0])/t,o=(e[1]-a[1])/t;for(var f=0;f<t;++f)c.push([a[0]+f*r,a[1]+f*o]);a=e}return c.push(e),c}var Ut=function(n,t){var e=function(n){var t,e,r,o,i,u,a,c=[],f=n[0].length;for(a=0;a<f;++a)e=(t=n[0][a])[0][0],r=t[0][1],o=t[1][1],i=t[2][0],u=t[2][1],c.push(qt([[e+b,r+b],[e+b,o-b],[i-b,o-b],[i-b,u+b]],30));for(a=n[1].length-1;a>=0;--a)e=(t=n[1][a])[0][0],r=t[0][1],o=t[1][1],i=t[2][0],u=t[2][1],c.push(qt([[i-b,u-b],[i-b,o+b],[e+b,o+b],[e+b,r-b]],30));return{type:\"Polygon\",coordinates:[Object(kt.a)(c)]}}(t),o=(t=t.map(function(n){return n.map(function(n){return[[n[0][0]*_,n[0][1]*_],[n[1][0]*_,n[1][1]*_],[n[2][0]*_,n[2][1]*_]]})})).map(function(t){return t.map(function(t){var e,r=n(t[0][0],t[0][1])[0],o=n(t[2][0],t[2][1])[0],i=n(t[1][0],t[0][1])[1],u=n(t[1][0],t[1][1])[1];return i>u&&(e=i,i=u,u=e),[[r,i],[o,u]]})});function i(e,r){for(var o=r<0?-1:1,i=t[+(r<0)],u=0,a=i.length-1;u<a&&e>i[u][2][0];++u);var c=n(e-i[u][1][0],r);return c[0]+=n(i[u][1][0],o*r>o*i[u][0][1]?i[u][0][1]:r)[0],c}n.invert&&(i.invert=function(e,r){for(var u=o[+(r<0)],a=t[+(r<0)],c=0,f=u.length;c<f;++c){var l=u[c];if(l[0][0]<=e&&e<l[1][0]&&l[0][1]<=r&&r<l[1][1]){var s=n.invert(e-n(a[c][1][0],0)[0],r);return s[0]+=a[c][1][0],Bt(i(s[0],s[1]),[e,r])?s:null}}});var u=Object(r.geoProjection)(i),a=u.stream;return u.stream=function(n){var t=u.rotate(),o=a(n),i=(u.rotate([0,0]),a(n));return u.rotate(t),o.sphere=function(){Object(r.geoStream)(e,i)},o},u},It=[[[[-180,0],[-100,90],[-40,0]],[[-40,0],[30,90],[180,0]]],[[[-180,0],[-160,-90],[-100,0]],[[-100,0],[-60,-90],[-20,0]],[[-20,0],[20,-90],[80,0]],[[80,0],[140,-90],[180,0]]]],Wt=function(){return Ut(nn,It).scale(160.857)},Xt=[[[[-180,0],[-100,90],[-40,0]],[[-40,0],[30,90],[180,0]]],[[[-180,0],[-160,-90],[-100,0]],[[-100,0],[-60,-90],[-20,0]],[[-20,0],[20,-90],[80,0]],[[80,0],[140,-90],[180,0]]]],Yt=function(){return Ut(Tt,Xt).scale(152.63)},Ht=[[[[-180,0],[-100,90],[-40,0]],[[-40,0],[30,90],[180,0]]],[[[-180,0],[-160,-90],[-100,0]],[[-100,0],[-60,-90],[-20,0]],[[-20,0],[20,-90],[80,0]],[[80,0],[140,-90],[180,0]]]],Qt=function(){return Ut(J,Ht).scale(169.529)},Vt=[[[[-180,0],[-90,90],[0,0]],[[0,0],[90,90],[180,0]]],[[[-180,0],[-90,-90],[0,0]],[[0,0],[90,-90],[180,0]]]],Jt=function(){return Ut(J,Vt).scale(169.529).rotate([20,0])},Kt=[[[[-180,35],[-30,90],[0,35]],[[0,35],[30,90],[180,35]]],[[[-180,-10],[-102,-90],[-65,-10]],[[-65,-10],[5,-90],[77,-10]],[[77,-10],[103,-90],[180,-10]]]],Zt=function(){return Ut(Ft,Kt).rotate([-20,-55]).scale(164.263).center([0,-5.4036])},$t=[[[[-180,0],[-110,90],[-40,0]],[[-40,0],[0,90],[40,0]],[[40,0],[110,90],[180,0]]],[[[-180,0],[-110,-90],[-40,0]],[[-40,0],[0,-90],[40,0]],[[40,0],[110,-90],[180,0]]]],ne=function(){return Ut(rn,$t).scale(152.63).rotate([-20,0])};function te(n,t){return[3/S*n*C(j*j/3-t*t),t]}te.invert=function(n,t){return[S/3*n/C(j*j/3-t*t),t]};var ee=function(){return Object(r.geoProjection)(te).scale(158.837)};function re(n){function t(t,e){if(o(o(e)-M)<b)return[0,e<0?-2:2];var r=g(e),i=h((1+r)/(1-r),n/2),u=.5*(i+1/i)+a(t*=n);return[2*g(t)/u,(i-1/i)/u]}return t.invert=function(t,e){var r=o(e);if(o(r-2)<b)return t?null:[0,v(e)*M];if(r>2)return null;var i=(t/=2)*t,a=(e/=2)*e,c=2*e/(1+i+a);return c=h((1+c)/(1-c),1/n),[u(2*t,1-i-a)/n,R((c-1)/(c+1))]},t}var oe=function(){var n=.5,t=Object(r.geoProjectionMutator)(re),e=t(n);return e.spacing=function(e){return arguments.length?t(n=+e):n},e.scale(124.75)},ie=j/P;function ue(n,t){return[n*(1+C(a(t)))/2,t/(a(t/2)*a(n/6))]}ue.invert=function(n,t){var e=o(n),r=o(t),i=b,u=M;r<ie?u*=r/ie:i+=6*x(ie/r);for(var c=0;c<25;c++){var f=g(u),l=C(a(u)),s=g(u/2),p=a(u/2),h=g(i/6),d=a(i/6),v=.5*i*(1+l)-e,y=u/(p*d)-r,m=l?-.25*i*f/l:0,j=.5*(1+l),w=(1+.5*u*s/p)/(p*d),E=u/p*(h/6)/(d*d),P=m*E-w*j,O=(v*E-y*j)/P,S=(y*m-v*w)/P;if(u-=O,i-=S,o(O)<b&&o(S)<b)break}return[n<0?-i:i,t<0?-u:u]};var ae=function(){return Object(r.geoProjection)(ue).scale(97.2672)};function ce(n,t){var e=n*n,r=t*t;return[n*(.975534+r*(-.0143059*e-.119161+-.0547009*r)),t*(1.00384+e*(.0802894+-.02855*r+199025e-9*e)+r*(.0998909+-.0491032*r))]}ce.invert=function(n,t){var e=v(n)*j,r=t/2,i=50;do{var u=e*e,a=r*r,c=e*r,f=e*(.975534+a*(-.0143059*u-.119161+-.0547009*a))-n,l=r*(1.00384+u*(.0802894+-.02855*a+199025e-9*u)+a*(.0998909+-.0491032*a))-t,s=.975534-a*(.119161+3*u*.0143059+.0547009*a),p=-c*(.238322+.2188036*a+.0286118*u),h=c*(.1605788+7961e-7*u+-.0571*a),d=1.00384+u*(.0802894+199025e-9*u)+a*(3*(.0998909-.02855*u)-.245516*a),g=p*h-d*s,y=(l*p-f*d)/g,m=(f*h-l*s)/g;e-=y,r-=m}while((o(y)>b||o(m)>b)&&--i>0);return i&&[e,r]};var fe=function(){return Object(r.geoProjection)(ce).scale(139.98)};function le(n,t){return[g(n)/a(t),y(t)*a(n)]}le.invert=function(n,t){var e=n*n,r=t*t,o=r+1,i=n?E*C((o-C(e*e+2*e*(r-1)+o*o))/e+1):1/C(o);return[R(n*i),v(t)*x(i)]};var se=function(){return Object(r.geoProjection)(le).scale(144.049).clipAngle(89.999)};function pe(n){var t=a(n),e=y(w+n/2);function r(r,i){var u=i-n,a=o(u)<b?r*t:o(a=w+i/2)<b||o(o(a)-M)<b?0:r*u/l(y(a)/e);return[a,u]}return r.invert=function(r,i){var u,a=i+n;return[o(i)<b?r/t:o(u=w+a/2)<b||o(o(u)-M)<b?0:r*l(y(u)/e)/i,a]},r}var he=function(){return en(pe).parallel(40).scale(158.837)};function de(n,t){return[n,1.25*l(y(w+.4*t))]}de.invert=function(n,t){return[n,2.5*i(c(.8*t))-.625*j]};var ve=function(){return Object(r.geoProjection)(de).scale(108.318)};function ge(n){var t=n.length-1;function e(e,r){for(var o,i=a(r),u=2/(1+i*a(e)),c=u*i*g(e),f=u*g(r),l=t,s=n[l],p=s[0],h=s[1];--l>=0;)p=(s=n[l])[0]+c*(o=p)-f*h,h=s[1]+c*h+f*o;return[p=c*(o=p)-f*h,h=c*h+f*o]}return e.invert=function(e,r){var c=20,f=e,l=r;do{for(var s,p=t,h=n[p],d=h[0],v=h[1],y=0,m=0;--p>=0;)y=d+f*(s=y)-l*m,m=v+f*m+l*s,d=(h=n[p])[0]+f*(s=d)-l*v,v=h[1]+f*v+l*s;var j,M,w=(y=d+f*(s=y)-l*m)*y+(m=v+f*m+l*s)*m;f-=j=((d=f*(s=d)-l*v-e)*y+(v=f*v+l*s-r)*m)/w,l-=M=(v*y-d*m)/w}while(o(j)+o(M)>b*b&&--c>0);if(c){var E=C(f*f+l*l),P=2*i(.5*E),O=g(P);return[u(f*O,E*a(P)),E?R(l*O/E):0]}},e}var ye=[[.9972523,0],[.0052513,-.0041175],[.0074606,.0048125],[-.0153783,-.1968253],[.0636871,-.1408027],[.3660976,-.2937382]],be=[[.98879,0],[0,0],[-.050909,0],[0,0],[.075528,0]],me=[[.984299,0],[.0211642,.0037608],[-.1036018,-.0575102],[-.0329095,-.0320119],[.0499471,.1223335],[.026046,.0899805],[7388e-7,-.1435792],[.0075848,-.1334108],[-.0216473,.0776645],[-.0225161,.0853673]],je=[[.9245,0],[0,0],[.01943,0]],Me=[[.721316,0],[0,0],[-.00881625,-.00617325]];function we(){return ke(ye,[152,-64]).scale(1500).center([-160.908,62.4864]).clipAngle(25)}function Ee(){return ke(be,[95,-38]).scale(1e3).clipAngle(55).center([-96.5563,38.8675])}function Pe(){return ke(me,[120,-45]).scale(359.513).clipAngle(55).center([-117.474,53.0628])}function Oe(){return ke(je,[-20,-18]).scale(209.091).center([20,16.7214]).clipAngle(82)}function Se(){return ke(Me,[165,10]).scale(250).clipAngle(130).center([-165,-10])}function ke(n,t){var e=Object(r.geoProjection)(ge(n)).rotate(t).clipAngle(90),o=Object(r.geoRotation)(t),i=e.center;return delete e.rotate,e.center=function(n){return arguments.length?i(o(n)):o.invert(i())},e}var _e=C(6),Re=C(7);function xe(n,t){var e=R(7*g(t)/(3*_e));return[_e*n*(2*a(2*e/3)-1)/Re,9*g(e/3)/Re]}xe.invert=function(n,t){var e=3*R(t*Re/9);return[n*Re/(_e*(2*a(2*e/3)-1)),R(3*g(e)*_e/7)]};var Ce=function(){return Object(r.geoProjection)(xe).scale(164.859)};function ze(n,t){for(var e,r=(1+E)*g(t),i=t,u=0;u<25&&(i-=e=(g(i/2)+g(i)-r)/(.5*a(i/2)+a(i)),!(o(e)<b));u++);return[n*(1+2*a(i)/a(i/2))/(3*P),2*C(3)*g(i/2)/C(2+P)]}ze.invert=function(n,t){var e=t*C(2+P)/(2*C(3)),r=2*R(e);return[3*P*n/(1+2*a(r)/a(r/2)),R((e+g(r))/(1+E))]};var Ge=function(){return Object(r.geoProjection)(ze).scale(188.209)};function Ae(n,t){for(var e,r=C(6/(4+j)),i=(1+j/4)*g(t),u=t/2,c=0;c<25&&(u-=e=(u/2+g(u)-i)/(.5+a(u)),!(o(e)<b));c++);return[r*(.5+a(u))*n/1.5,r*u]}Ae.invert=function(n,t){var e=C(6/(4+j)),r=t/e;return o(o(r)-M)<b&&(r=r<0?-M:M),[1.5*n/(e*(.5+a(r))),R((r/2+g(r))/(1+j/4))]};var Ne=function(){return Object(r.geoProjection)(Ae).scale(166.518)};function Fe(n,t){var e=t*t,r=e*e;return[n*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),t*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Fe.invert=function(n,t){var e,r=t,i=25;do{var u=r*r,a=u*u;r-=e=(r*(1.007226+u*(.015085+a*(.028874*u-.044475-.005916*a)))-t)/(1.007226+u*(.045255+a*(.259866*u-.311325-.005916*11*a)))}while(o(e)>b&&--i>0);return[n/(.8707+(u=r*r)*(u*(u*u*u*(.003971-.001529*u)-.013791)-.131979)),r]};var Le=function(){return Object(r.geoProjection)(Fe).scale(175.295)};function Te(n,t){return[n*(1+a(t))/2,2*(t-y(t/2))]}Te.invert=function(n,t){for(var e=t/2,r=0,i=1/0;r<10&&o(i)>b;++r){var u=a(t/2);t-=i=(t-y(t/2)-e)/(1-.5/(u*u))}return[2*n/(1+a(t)),t]};var De=function(){return Object(r.geoProjection)(Te).scale(152.63)},Be=1.0148,qe=.23185,Ue=-.14499,Ie=.02406,We=Be,Xe=5*qe,Ye=7*Ue,He=9*Ie;function Qe(n,t){var e=t*t;return[n,t*(Be+e*e*(qe+e*(Ue+Ie*e)))]}Qe.invert=function(n,t){t>1.790857183?t=1.790857183:t<-1.790857183&&(t=-1.790857183);var e,r=t;do{var i=r*r;r-=e=(r*(Be+i*i*(qe+i*(Ue+Ie*i)))-t)/(We+i*i*(Xe+i*(Ye+He*i)))}while(o(e)>b);return[n,r]};var Ve=function(){return Object(r.geoProjection)(Qe).scale(139.319)};function Je(n,t){if(o(t)<b)return[n,0];var e=y(t),r=n*g(t);return[g(r)/e,t+(1-a(r))/e]}Je.invert=function(n,t){if(o(t)<b)return[n,0];var e,r=n*n+t*t,i=.5*t,u=10;do{var c=y(i),f=1/a(i),l=r-2*t*i+i*i;i-=e=(c*l+2*(i-t))/(2+l*f*f+2*(i-t)*c)}while(o(e)>b&&--u>0);return c=y(i),[(o(t)<o(i+1/c)?R(n*c):v(n)*(x(o(n*c))+M))/g(i),i]};var Ke=function(){return Object(r.geoProjection)(Je).scale(103.74)},Ze=function(n,t){var e=nr(n[1],n[0]),r=nr(t[1],t[0]),o=function(n,t){return u(n[0]*t[1]-n[1]*t[0],n[0]*t[0]+n[1]*t[1])}(e,r),i=tr(e)/tr(r);return $e([1,0,n[0][0],0,1,n[0][1]],$e([i,0,0,0,i,0],$e([a(o),g(o),0,-g(o),a(o),0],[1,0,-t[0][0],0,1,-t[0][1]])))};function $e(n,t){return[n[0]*t[0]+n[1]*t[3],n[0]*t[1]+n[1]*t[4],n[0]*t[2]+n[1]*t[5]+n[2],n[3]*t[0]+n[4]*t[3],n[3]*t[1]+n[4]*t[4],n[3]*t[2]+n[4]*t[5]+n[5]]}function nr(n,t){return[n[0]-t[0],n[1]-t[1]]}function tr(n){return C(n[0]*n[0]+n[1]*n[1])}var er=function(n,t,e){function i(n,e){var r,o=t(n,e),i=o.project([n*k,e*k]);return(r=o.transform)?[r[0]*i[0]+r[1]*i[1]+r[2],-(r[3]*i[0]+r[4]*i[1]+r[5])]:(i[1]=-i[1],i)}(function n(t,e){t.edges=function(n){for(var t=n.length,e=[],r=n[t-1],o=0;o<t;++o)e.push([r,r=n[o]]);return e}(t.face);if(e.face){var r=t.shared=function(n,t){for(var e,r,o=n.length,i=null,u=0;u<o;++u){e=n[u];for(var a=t.length;--a>=0;)if(r=t[a],e[0]===r[0]&&e[1]===r[1]){if(i)return[i,e];i=e}}}(t.face,e.face),o=Ze(r.map(e.project),r.map(t.project));t.transform=e.transform?$e(e.transform,o):o;for(var i=e.edges,u=0,a=i.length;u<a;++u)rr(r[0],i[u][1])&&rr(r[1],i[u][0])&&(i[u]=t),rr(r[0],i[u][0])&&rr(r[1],i[u][1])&&(i[u]=t);for(i=t.edges,u=0,a=i.length;u<a;++u)rr(r[0],i[u][0])&&rr(r[1],i[u][1])&&(i[u]=e),rr(r[0],i[u][1])&&rr(r[1],i[u][0])&&(i[u]=e)}else t.transform=e.transform;t.children&&t.children.forEach(function(e){n(e,t)});return t})(n,{transform:[a(e=null==e?-j/6:e),g(e),0,-g(e),a(e),0]}),or(n)&&(i.invert=function(e,r){var o=function n(e,r){var o=e.project.invert,i=e.transform,u=r;i&&(c=1/((a=i)[0]*a[4]-a[1]*a[3]),i=[c*a[4],-c*a[1],c*(a[1]*a[5]-a[2]*a[4]),-c*a[3],c*a[0],c*(a[2]*a[3]-a[0]*a[5])],u=[i[0]*u[0]+i[1]*u[1]+i[2],i[3]*u[0]+i[4]*u[1]+i[5]]);var a,c;if(o&&e===function(n){return t(n[0]*_,n[1]*_)}(f=o(u)))return f;var f,l=e.children;for(var s=0,p=l&&l.length;s<p;++s)if(f=n(l[s],r))return f}(n,[e,-r]);return o&&(o[0]*=_,o[1]*=_,o)});var u=Object(r.geoProjection)(i),c=u.stream;return u.stream=function(t){var e=u.rotate(),i=c(t),a=(u.rotate([0,0]),c(t));return u.rotate(e),i.sphere=function(){a.polygonStart(),a.lineStart(),function n(t,e,i){var u,a,c=e.edges,f=c.length,l={type:\"MultiPoint\",coordinates:e.face},s=e.face.filter(function(n){return 90!==o(n[1])}),p=Object(r.geoBounds)({type:\"MultiPoint\",coordinates:s}),h=!1,d=-1,v=p[1][0]-p[0][0];var g=180===v||360===v?[(p[0][0]+p[1][0])/2,(p[0][1]+p[1][1])/2]:Object(r.geoCentroid)(l);if(i)for(;++d<f&&c[d]!==i;);++d;for(var y=0;y<f;++y)a=c[(y+d)%f],Array.isArray(a)?(h||(t.point((u=Object(r.geoInterpolate)(a[0],g)(b))[0],u[1]),h=!0),t.point((u=Object(r.geoInterpolate)(a[1],g)(b))[0],u[1])):(h=!1,a!==i&&n(t,a,e))}(a,n),a.lineEnd(),a.polygonEnd()},i},u};function rr(n,t){return n&&t&&n[0]===t[0]&&n[1]===t[1]}function or(n){return n.project.invert||n.children&&n.children.some(or)}var ir=[[0,90],[-90,0],[0,0],[90,0],[180,0],[0,-90]],ur=[[0,2,1],[0,3,2],[5,1,2],[5,2,3],[0,1,4],[0,4,3],[5,4,1],[5,3,4]].map(function(n){return n.map(function(n){return ir[n]})}),ar=function(n){n=n||function(n){var t=Object(r.geoCentroid)({type:\"MultiPoint\",coordinates:n});return Object(r.geoGnomonic)().scale(1).translate([0,0]).rotate([-t[0],-t[1]])};var t=ur.map(function(t){return{face:t,project:n(t)}});return[-1,0,0,1,0,1,4,5].forEach(function(n,e){var r=t[n];r&&(r.children||(r.children=[])).push(t[e])}),er(t[0],function(n,e){return t[n<-j/2?e<0?6:4:n<0?e<0?2:0:n<j/2?e<0?3:1:e<0?7:5]}).scale(101.858).center([0,45])},cr=2/C(3);function fr(n,t){var e=mn(n,t);return[e[0]*cr,e[1]]}fr.invert=function(n,t){return mn.invert(n/cr,t)};var lr=function(n){n=n||function(n){var t=Object(r.geoCentroid)({type:\"MultiPoint\",coordinates:n});return Object(r.geoProjection)(fr).translate([0,0]).scale(1).rotate(t[1]>0?[-t[0],0]:[180-t[0],180])};var t=ur.map(function(t){return{face:t,project:n(t)}});return[-1,0,0,1,0,1,4,5].forEach(function(n,e){var r=t[n];r&&(r.children||(r.children=[])).push(t[e])}),er(t[0],function(n,e){return t[n<-j/2?e<0?6:4:n<0?e<0?2:0:n<j/2?e<0?3:1:e<0?7:5]}).scale(121.906).center([0,48.5904])},sr=function(n){n=n||function(n){var t=6===n.length?Object(r.geoCentroid)({type:\"MultiPoint\",coordinates:n}):n[0];return Object(r.geoGnomonic)().scale(1).translate([0,0]).rotate([-t[0],-t[1]])};var t=ur.map(function(n){for(var t,e=n.map(dr),r=e.length,o=e[r-1],i=[],u=0;u<r;++u)t=e[u],i.push(hr([.9486832980505138*o[0]+.31622776601683794*t[0],.9486832980505138*o[1]+.31622776601683794*t[1],.9486832980505138*o[2]+.31622776601683794*t[2]]),hr([.9486832980505138*t[0]+.31622776601683794*o[0],.9486832980505138*t[1]+.31622776601683794*o[1],.9486832980505138*t[2]+.31622776601683794*o[2]])),o=t;return i}),e=[],o=[-1,0,0,1,0,1,4,5];t.forEach(function(n,r){for(var i,u,a=ur[r],c=a.length,f=e[r]=[],l=0;l<c;++l)t.push([a[l],n[(2*l+2)%(2*c)],n[(2*l+1)%(2*c)]]),o.push(r),f.push((i=dr(n[(2*l+2)%(2*c)]),u=dr(n[(2*l+1)%(2*c)]),[i[1]*u[2]-i[2]*u[1],i[2]*u[0]-i[0]*u[2],i[0]*u[1]-i[1]*u[0]]))});var i=t.map(function(t){return{project:n(t),face:t}});return o.forEach(function(n,t){var e=i[n];e&&(e.children||(e.children=[])).push(i[t])}),er(i[0],function(n,t){var r=a(t),o=[r*a(n),r*g(n),g(t)],u=n<-j/2?t<0?6:4:n<0?t<0?2:0:n<j/2?t<0?3:1:t<0?7:5,c=e[u];return i[pr(c[0],o)<0?8+3*u:pr(c[1],o)<0?8+3*u+1:pr(c[2],o)<0?8+3*u+2:u]}).scale(110.625).center([0,45])};function pr(n,t){for(var e=0,r=n.length,o=0;e<r;++e)o+=n[e]*t[e];return o}function hr(n){return[u(n[1],n[0])*k,R(s(-1,p(1,n[2])))*k]}function dr(n){var t=n[0]*_,e=n[1]*_,r=a(e);return[r*a(t),r*g(t),g(e)]}var vr=function(){},gr=function(n,t){var e,r=t.stream;if(!r)throw new Error(\"invalid projection\");switch(n&&n.type){case\"Feature\":e=br;break;case\"FeatureCollection\":e=yr;break;default:e=mr}return e(n,r)};function yr(n,t){return{type:\"FeatureCollection\",features:n.features.map(function(n){return br(n,t)})}}function br(n,t){return{type:\"Feature\",id:n.id,properties:n.properties,geometry:mr(n.geometry,t)}}function mr(n,t){if(!n)return null;if(\"GeometryCollection\"===n.type)return function(n,t){return{type:\"GeometryCollection\",geometries:n.geometries.map(function(n){return mr(n,t)})}}(n,t);var e;switch(n.type){case\"Point\":case\"MultiPoint\":e=wr;break;case\"LineString\":case\"MultiLineString\":e=Er;break;case\"Polygon\":case\"MultiPolygon\":case\"Sphere\":e=Pr;break;default:return null}return Object(r.geoStream)(n,t(e)),e.result()}var jr=[],Mr=[],wr={point:function(n,t){jr.push([n,t])},result:function(){var n=jr.length?jr.length<2?{type:\"Point\",coordinates:jr[0]}:{type:\"MultiPoint\",coordinates:jr}:null;return jr=[],n}},Er={lineStart:vr,point:function(n,t){jr.push([n,t])},lineEnd:function(){jr.length&&(Mr.push(jr),jr=[])},result:function(){var n=Mr.length?Mr.length<2?{type:\"LineString\",coordinates:Mr[0]}:{type:\"MultiLineString\",coordinates:Mr}:null;return Mr=[],n}},Pr={polygonStart:vr,lineStart:vr,point:function(n,t){jr.push([n,t])},lineEnd:function(){var n=jr.length;if(n){do{jr.push(jr[0].slice())}while(++n<4);Mr.push(jr),jr=[]}},polygonEnd:vr,result:function(){if(!Mr.length)return null;var n=[],t=[];return Mr.forEach(function(e){!function(n){if((t=n.length)<4)return!1;for(var t,e=0,r=n[t-1][1]*n[0][0]-n[t-1][0]*n[0][1];++e<t;)r+=n[e-1][1]*n[e][0]-n[e-1][0]*n[e][1];return r<=0}(e)?t.push(e):n.push([e])}),t.forEach(function(t){var e=t[0];n.some(function(n){if(function(n,t){for(var e=t[0],r=t[1],o=!1,i=0,u=n.length,a=u-1;i<u;a=i++){var c=n[i],f=c[0],l=c[1],s=n[a],p=s[0],h=s[1];l>r^h>r&&e<(p-f)*(r-l)/(h-l)+f&&(o=!o)}return o}(n[0],e))return n.push(t),!0})||n.push([t])}),Mr=[],n.length?n.length>1?{type:\"MultiPolygon\",coordinates:n}:{type:\"Polygon\",coordinates:n[0]}:null}},Or=function(n){var t=n(M,0)[0]-n(-M,0)[0];function e(e,r){var i=o(e)<M,u=n(i?e:e>0?e-j:e+j,r),a=(u[0]-u[1])*E,c=(u[0]+u[1])*E;if(i)return[a,c];var f=t*E,l=a>0^c>0?-1:1;return[l*a-v(c)*f,l*c-v(a)*f]}return n.invert&&(e.invert=function(e,r){var i=(e+r)*E,u=(r-e)*E,a=o(i)<.5*t&&o(u)<.5*t;if(!a){var c=t*E,f=i>0^u>0?-1:1,l=-f*(e+(u>0?1:-1)*c),s=-f*(r+(i>0?1:-1)*c);i=(-l-s)*E,u=(l-s)*E}var p=n.invert(i,u);return a||(p[0]+=i>0?j:-j),p}),Object(r.geoProjection)(e).rotate([-90,-90,45]).clipAngle(179.999)},Sr=function(){return Or(vt).scale(176.423)},kr=function(){return Or(mt).scale(111.48)},_r=function(n,t){if(!(0<=(t=+t)&&t<=20))throw new Error(\"invalid digits\");function e(n){n[0]=+n[0].toFixed(t),n[1]=+n[1].toFixed(t)}function r(n){n.forEach(e)}function o(n){n.forEach(r)}function i(n){if(n)switch(n.type){case\"GeometryCollection\":n.geometries.forEach(i);break;case\"Point\":e(n.coordinates);break;case\"MultiPoint\":case\"LineString\":r(n.coordinates);break;case\"MultiLineString\":case\"Polygon\":o(n.coordinates);break;case\"MultiPolygon\":n.coordinates.forEach(o);break;default:return}}function u(n){i(n.geometry)}if(n)switch(n.type){case\"Feature\":u(n);break;case\"FeatureCollection\":n.features.forEach(u);break;default:i(n)}return n};function Rr(n){var t=g(n);function e(e,r){var o=t?y(e*t/2)/t:e/2;if(!r)return[2*o,-n];var u=2*i(o*g(r)),c=1/y(r);return[g(u)*c,r+(1-a(u))*c-n]}return e.invert=function(e,r){if(o(r+=n)<b)return[t?2*i(t*e/2)/t:e,0];var u,c=e*e+r*r,f=0,l=10;do{var s=y(f),p=1/a(f),h=c-2*r*f+f*f;f-=u=(s*h+2*(f-r))/(2+h*p*p+2*(f-r)*s)}while(o(u)>b&&--l>0);var d=e*(s=y(f)),v=y(o(r)<o(f+1/s)?.5*R(d):.5*x(d)+j/4)/g(f);return[t?2*i(t*v)/t:2*v,f]},e}var xr=function(){return en(Rr).scale(131.215)},Cr=[[.9986,-.062],[1,0],[.9986,.062],[.9954,.124],[.99,.186],[.9822,.248],[.973,.31],[.96,.372],[.9427,.434],[.9216,.4958],[.8962,.5571],[.8679,.6176],[.835,.6769],[.7986,.7346],[.7597,.7903],[.7186,.8435],[.6732,.8936],[.6213,.9394],[.5722,.9761],[.5322,1]];function zr(n,t){var e,r=p(18,36*o(t)/j),i=f(r),u=r-i,a=(e=Cr[i])[0],c=e[1],l=(e=Cr[++i])[0],s=e[1],h=(e=Cr[p(19,++i)])[0],d=e[1];return[n*(l+u*(h-a)/2+u*u*(h-2*l+a)/2),(t>0?M:-M)*(s+u*(d-c)/2+u*u*(d-2*s+c)/2)]}Cr.forEach(function(n){n[1]*=1.0144}),zr.invert=function(n,t){var e=t/M,r=90*e,i=p(18,o(r/5)),u=s(0,f(i));do{var a=Cr[u][1],c=Cr[u+1][1],l=Cr[p(19,u+2)][1],h=l-a,d=l-2*c+a,v=2*(o(e)-c)/h,g=d/h,y=v*(1-g*v*(1-2*g*v));if(y>=0||1===u){r=(t>=0?5:-5)*(y+i);var b,j=50;do{y=(i=p(18,o(r)/5))-(u=f(i)),a=Cr[u][1],c=Cr[u+1][1],l=Cr[p(19,u+2)][1],r-=(b=(t>=0?M:-M)*(c+y*(l-a)/2+y*y*(l-2*c+a)/2)-t)*k}while(o(b)>m&&--j>0);break}}while(--u>=0);var w=Cr[u][0],E=Cr[u+1][0],P=Cr[p(19,u+2)][0];return[n/(E+y*(P-w)/2+y*y*(P-2*E+w)/2),r*_]};var Gr=function(){return Object(r.geoProjection)(zr).scale(152.63)};function Ar(n,t){var e=function(n){function t(t,e){var r=a(e),o=(n-1)/(n-r*a(t));return[o*r*g(t),o*g(e)]}return t.invert=function(t,e){var r=t*t+e*e,o=C(r),i=(n-C(1-r*(n+1)/(n-1)))/((n-1)/o+o/(n-1));return[u(t*i,o*C(1-i*i)),o?R(e*i/o):0]},t}(n);if(!t)return e;var r=a(t),o=g(t);function i(t,i){var u=e(t,i),a=u[1],c=a*o/(n-1)+r;return[u[0]*r/c,a/c]}return i.invert=function(t,i){var u=(n-1)/(n-1-i*o);return e.invert(u*t,u*i*r)},i}var Nr=function(){var n=2,t=0,e=Object(r.geoProjectionMutator)(Ar),o=e(n,t);return o.distance=function(r){return arguments.length?e(n=+r,t):n},o.tilt=function(r){return arguments.length?e(n,t=r*_):t*k},o.scale(432.147).clipAngle(x(1/n)*k-1e-6)},Fr=1e4,Lr=-180,Tr=Lr+1e-4,Dr=180,Br=Dr-1e-4,qr=-90,Ur=qr+1e-4,Ir=90,Wr=Ir-1e-4;function Xr(n){return n===qr||n===Ir?[0,n]:[Lr,(t=n,Math.floor(t*Fr)/Fr)];var t}function Yr(n){n[0]<=Tr?n[0]=Lr:n[0]>=Br&&(n[0]=Dr),n[1]<=Ur?n[1]=qr:n[1]>=Wr&&(n[1]=Ir)}function Hr(n){n.forEach(Yr)}function Qr(n,t){for(var e=0,r=n.length;e<r;++e){var o=n[e];o.polygon=n,t.push(o);for(var i=0,u=o.length;i<u;++i){var a=o[i],c=a[0],f=a[1];if(c<=Tr||c>=Br||f<=Ur||f>=Wr){Yr(a);for(var l=i+1;l<u;++l){var s=o[l],p=s[0],h=s[1];if(p>Tr&&p<Br&&h>Ur&&h<Wr)break}if(l===i+1)continue;if(i){var d=o.slice(0,i+1);d.polygon=n,d[d.length-1]=Xr(f),t[t.length-1]=d}else t.pop();if(l>=u)break;t.push(o=o.slice(l-1)),o[0]=Xr(o[0][1]),o.polygon=n,i=-1,u=o.length}}}n.length=0}function Vr(n){Jr(n.geometry)}function Jr(n){if(n){var t,e,r;switch(n.type){case\"GeometryCollection\":return void n.geometries.forEach(Jr);case\"Point\":Yr(n.coordinates);break;case\"MultiPoint\":case\"LineString\":Hr(n.coordinates);break;case\"MultiLineString\":n.coordinates.forEach(Hr);break;case\"Polygon\":Qr(n.coordinates,t=[]);break;case\"MultiPolygon\":for(t=[],e=-1,r=n.coordinates.length;++e<r;)Qr(n.coordinates[e],t);break;default:return}!function(n){var t,e,r,o,i,u,a=n.length,c={},f={};for(t=0;t<a;++t)r=(e=n[t])[0],i=e[e.length-1],r[0]!==i[0]||r[1]!==i[1]?(e.index=t,c[r]=f[i]=e):(e.polygon.push(e),n[t]=null);for(t=0;t<a;++t)if(e=n[t]){if(r=e[0],i=e[e.length-1],o=f[r],u=c[i],delete c[r],delete f[i],r[0]===i[0]&&r[1]===i[1]){e.polygon.push(e);continue}o?(delete f[r],delete c[o[0]],o.pop(),n[o.index]=null,(e=o.concat(e)).polygon=o.polygon,o===u?e.polygon.push(e):(e.index=a++,n.push(c[e[0]]=f[e[e.length-1]]=e))):u?(delete c[i],delete f[u[u.length-1]],e.pop(),(e=e.concat(u)).polygon=u.polygon,e.index=a++,n[u.index]=null,n.push(c[e[0]]=f[e[e.length-1]]=e)):(e.push(e[0]),e.polygon.push(e))}}(t)}}var Kr=function(n){if(n)switch(n.type){case\"Feature\":Vr(n);break;case\"FeatureCollection\":n.features.forEach(Vr);break;default:Jr(n)}return n};function Zr(n,t){var e=y(t/2),r=g(w*e);return[n*(.74482-.34588*r*r),1.70711*e]}Zr.invert=function(n,t){var e=t/1.70711,r=g(w*e);return[n/(.74482-.34588*r*r),2*i(e)]};var $r=function(){return Object(r.geoProjection)(Zr).scale(146.153)},no=function(n,t,e){var o=Object(r.geoInterpolate)(t,e),i=o(.5),u=Object(r.geoRotation)([-i[0],-i[1]])(t),a=o.distance/2,c=-R(g(u[1]*_)/g(a)),f=[-i[0],-i[1],-(u[0]>0?j-c:c)*k],l=Object(r.geoProjection)(n(a)).rotate(f),s=Object(r.geoRotation)(f),p=l.center;return delete l.rotate,l.center=function(n){return arguments.length?p(s(n)):s.invert(p())},l.clipAngle(90)};function to(n){var t=a(n);function e(n,e){var o=Object(r.geoGnomonicRaw)(n,e);return o[0]*=t,o}return e.invert=function(n,e){return r.geoGnomonicRaw.invert(n/t,e)},e}function eo(){return ro([-158,21.5],[-77,39]).clipAngle(60).scale(400)}function ro(n,t){return no(to,n,t)}function oo(n){if(!(n*=2))return r.geoAzimuthalEquidistantRaw;var t=-n/2,e=-t,o=n*n,i=y(e),c=.5/g(e);function f(r,i){var u=x(a(i)*a(r-t)),c=x(a(i)*a(r-e));return[((u*=u)-(c*=c))/(2*n),(i<0?-1:1)*C(4*o*c-(o-u+c)*(o-u+c))/(2*n)]}return f.invert=function(n,r){var o,f,l=r*r,s=a(C(l+(o=n+t)*o)),p=a(C(l+(o=n+e)*o));return[u(f=s-p,o=(s+p)*i),(r<0?-1:1)*x(C(o*o+f*f)*c)]},f}function io(){return uo([-158,21.5],[-77,39]).clipAngle(130).scale(122.571)}function uo(n,t){return no(oo,n,t)}function ao(n,t){if(o(t)<b)return[n,0];var e=o(t/M),r=R(e);if(o(n)<b||o(o(t)-M)<b)return[0,v(t)*j*y(r/2)];var i=a(r),u=o(j/n-n/j)/2,c=u*u,f=i/(e+i-1),l=f*(2/e-1),s=l*l,p=s+c,h=f-s,d=c+f;return[v(n)*j*(u*h+C(c*h*h-p*(f*f-s)))/p,v(t)*j*(l*d-u*C((c+1)*p-d*d))/p]}ao.invert=function(n,t){if(o(t)<b)return[n,0];if(o(n)<b)return[0,M*g(2*i(t/j))];var e=(n/=j)*n,r=(t/=j)*t,u=e+r,c=u*u,f=-o(t)*(1+u),l=f-2*r+e,s=-2*f+1+2*r+c,p=r/s+(2*l*l*l/(s*s*s)-9*f*l/(s*s))/27,h=(f-l*l/(3*s))/s,d=2*C(-h/3),y=x(3*p/(h*d))/3;return[j*(u-1+C(1+2*(e-r)+c))/(2*n),v(t)*j*(-d*a(y+j/3)-l/(3*s))]};var co=function(){return Object(r.geoProjection)(ao).scale(79.4183)};function fo(n,t){if(o(t)<b)return[n,0];var e=o(t/M),r=R(e);if(o(n)<b||o(o(t)-M)<b)return[0,v(t)*j*y(r/2)];var i=a(r),u=o(j/n-n/j)/2,c=u*u,f=i*(C(1+c)-u*i)/(1+c*e*e);return[v(n)*j*f,v(t)*j*C(1-f*(2*u+f))]}fo.invert=function(n,t){if(!n)return[0,M*g(2*i(t/j))];var e=o(n/j),r=(1-e*e-(t/=j)*t)/(2*e),a=C(r*r+1);return[v(n)*j*(a-r),v(t)*M*g(2*u(C((1-2*r*e)*(r+a)-e),C(a+r+e)))]};var lo=function(){return Object(r.geoProjection)(fo).scale(79.4183)};function so(n,t){if(o(t)<b)return[n,0];var e=t/M,r=R(e);if(o(n)<b||o(o(t)-M)<b)return[0,j*y(r/2)];var i=(j/n-n/j)/2,u=e/(1+a(r));return[j*(v(n)*C(i*i+1-u*u)-i),j*u]}so.invert=function(n,t){if(!t)return[n,0];var e=t/j,r=(j*j*(1-e*e)-n*n)/(2*j*n);return[n?j*(v(n)*C(r*r+1)-r):0,M*g(2*i(e))]};var po=function(){return Object(r.geoProjection)(so).scale(79.4183)};function ho(n,t){if(!t)return[n,0];var e=o(t);if(!n||e===M)return[0,t];var r=e/M,i=r*r,u=(8*r-i*(i+2)-5)/(2*i*(r-1)),a=u*u,c=r*u,f=i+a+2*c,l=r+3*u,s=n/M,p=s+1/s,h=v(o(n)-M)*C(p*p-4),d=h*h,g=(h*(f+a-1)+2*C(f*(i+a*d-1)+(1-i)*(i*(l*l+4*a)+12*c*a+4*a*a)))/(4*f+d);return[v(n)*M*g,v(t)*M*C(1+h*o(g)-g*g)]}ho.invert=function(n,t){var e;if(!n||!t)return[n,t];t/=j;var r=v(n)*n/M,i=(r*r-1+4*t*t)/o(r),u=i*i,a=2*t,c=50;do{var f=a*a,l=(8*a-f*(f+2)-5)/(2*f*(a-1)),s=(3*a-f*a-10)/(2*f*a),p=l*l,h=a*l,d=a+l,g=d*d,y=a+3*l,m=-2*d*(4*h*p+(1-4*f+3*f*f)*(1+s)+p*(14*f-6-u+(8*f-8-2*u)*s)+h*(12*f-8+(10*f-10-u)*s)),w=C(g*(f+p*u-1)+(1-f)*(f*(y*y+4*p)+p*(12*h+4*p)));a-=e=(i*(g+p-1)+2*w-r*(4*g+u))/(i*(2*l*s+2*d*(1+s))+m/w-8*d*(i*(-1+p+g)+2*w)*(1+s)/(u+4*g))}while(e>b&&--c>0);return[v(n)*(C(i*i+4)+i)*j/4,M*a]};var vo=function(){return Object(r.geoProjection)(ho).scale(127.16)},go=4*j+3*C(3),yo=2*C(2*j*C(3)/go),bo=V(yo*C(3)/j,yo,go/6),mo=function(){return Object(r.geoProjection)(bo).scale(176.84)};function jo(n,t){return[n*C(1-3*t*t/(j*j)),t]}jo.invert=function(n,t){return[n/C(1-3*t*t/(j*j)),t]};var Mo=function(){return Object(r.geoProjection)(jo).scale(152.63)};function wo(n,t){var e=.90631*g(t),r=C(1-e*e),o=C(2/(1+r*a(n/=3)));return[2.66723*r*o*g(n),1.24104*e*o]}wo.invert=function(n,t){var e=n/2.66723,r=t/1.24104,o=C(e*e+r*r),i=2*R(o/2);return[3*u(n*y(i),2.66723*o),o&&R(t*g(i)/(1.24104*.90631*o))]};var Eo=function(){return Object(r.geoProjection)(wo).scale(172.632)};function Po(n,t){var e=a(t),r=a(n)*e,o=1-r,i=a(n=u(g(n)*e,-g(t))),c=g(n);return[c*(e=C(1-r*r))-i*o,-i*e-c*o]}Po.invert=function(n,t){var e=(n*n+t*t)/-2,r=C(-e*(2+e)),o=t*e+n*r,i=n*e-t*r,a=C(i*i+o*o);return[u(r*o,a*(1+e)),a?-R(r*i/a):0]};var Oo=function(){return Object(r.geoProjection)(Po).rotate([0,-90,45]).scale(124.75).clipAngle(179.999)};function So(n,t){var e=F(n,t);return[(e[0]+n/M)/2,(e[1]+t)/2]}So.invert=function(n,t){var e=n,r=t,i=25;do{var u,c=a(r),f=g(r),l=g(2*r),s=f*f,p=c*c,h=g(e),d=a(e/2),v=g(e/2),y=v*v,m=1-p*d*d,j=m?x(c*d)*C(u=1/m):u=0,w=.5*(2*j*c*v+e/M)-n,E=.5*(j*f+r)-t,P=.5*u*(p*y+j*c*d*s)+.5/M,O=u*(h*l/4-j*f*v),S=.125*u*(l*v-j*f*p*h),k=.5*u*(s*d+j*y*c)+.5,_=O*S-k*P,R=(E*O-w*k)/_,z=(w*S-E*P)/_;e-=R,r-=z}while((o(R)>b||o(z)>b)&&--i>0);return[e,r]};var ko=function(){return Object(r.geoProjection)(So).scale(158.837)};e.d(t,\"geoAiry\",function(){return N}),e.d(t,\"geoAiryRaw\",function(){return A}),e.d(t,\"geoAitoff\",function(){return L}),e.d(t,\"geoAitoffRaw\",function(){return F}),e.d(t,\"geoArmadillo\",function(){return D}),e.d(t,\"geoArmadilloRaw\",function(){return T}),e.d(t,\"geoAugust\",function(){return q}),e.d(t,\"geoAugustRaw\",function(){return B}),e.d(t,\"geoBaker\",function(){return X}),e.d(t,\"geoBakerRaw\",function(){return W}),e.d(t,\"geoBerghaus\",function(){return H}),e.d(t,\"geoBerghausRaw\",function(){return Y}),e.d(t,\"geoBoggs\",function(){return tn}),e.d(t,\"geoBoggsRaw\",function(){return nn}),e.d(t,\"geoBonne\",function(){return an}),e.d(t,\"geoBonneRaw\",function(){return un}),e.d(t,\"geoBottomley\",function(){return fn}),e.d(t,\"geoBottomleyRaw\",function(){return cn}),e.d(t,\"geoBromley\",function(){return sn}),e.d(t,\"geoBromleyRaw\",function(){return ln}),e.d(t,\"geoChamberlin\",function(){return bn}),e.d(t,\"geoChamberlinRaw\",function(){return vn}),e.d(t,\"geoChamberlinAfrica\",function(){return yn}),e.d(t,\"geoCollignon\",function(){return jn}),e.d(t,\"geoCollignonRaw\",function(){return mn}),e.d(t,\"geoCraig\",function(){return wn}),e.d(t,\"geoCraigRaw\",function(){return Mn}),e.d(t,\"geoCraster\",function(){return On}),e.d(t,\"geoCrasterRaw\",function(){return Pn}),e.d(t,\"geoCylindricalEqualArea\",function(){return kn}),e.d(t,\"geoCylindricalEqualAreaRaw\",function(){return Sn}),e.d(t,\"geoCylindricalStereographic\",function(){return Rn}),e.d(t,\"geoCylindricalStereographicRaw\",function(){return _n}),e.d(t,\"geoEckert1\",function(){return Cn}),e.d(t,\"geoEckert1Raw\",function(){return xn}),e.d(t,\"geoEckert2\",function(){return Gn}),e.d(t,\"geoEckert2Raw\",function(){return zn}),e.d(t,\"geoEckert3\",function(){return Nn}),e.d(t,\"geoEckert3Raw\",function(){return An}),e.d(t,\"geoEckert4\",function(){return Ln}),e.d(t,\"geoEckert4Raw\",function(){return Fn}),e.d(t,\"geoEckert5\",function(){return Dn}),e.d(t,\"geoEckert5Raw\",function(){return Tn}),e.d(t,\"geoEckert6\",function(){return qn}),e.d(t,\"geoEckert6Raw\",function(){return Bn}),e.d(t,\"geoEisenlohr\",function(){return Wn}),e.d(t,\"geoEisenlohrRaw\",function(){return In}),e.d(t,\"geoFahey\",function(){return Hn}),e.d(t,\"geoFaheyRaw\",function(){return Yn}),e.d(t,\"geoFoucaut\",function(){return Vn}),e.d(t,\"geoFoucautRaw\",function(){return Qn}),e.d(t,\"geoGilbert\",function(){return Zn}),e.d(t,\"geoGingery\",function(){return et}),e.d(t,\"geoGingeryRaw\",function(){return $n}),e.d(t,\"geoGinzburg4\",function(){return it}),e.d(t,\"geoGinzburg4Raw\",function(){return ot}),e.d(t,\"geoGinzburg5\",function(){return at}),e.d(t,\"geoGinzburg5Raw\",function(){return ut}),e.d(t,\"geoGinzburg6\",function(){return ft}),e.d(t,\"geoGinzburg6Raw\",function(){return ct}),e.d(t,\"geoGinzburg8\",function(){return st}),e.d(t,\"geoGinzburg8Raw\",function(){return lt}),e.d(t,\"geoGinzburg9\",function(){return ht}),e.d(t,\"geoGinzburg9Raw\",function(){return pt}),e.d(t,\"geoGringorten\",function(){return gt}),e.d(t,\"geoGringortenRaw\",function(){return vt}),e.d(t,\"geoGuyou\",function(){return jt}),e.d(t,\"geoGuyouRaw\",function(){return mt}),e.d(t,\"geoHammer\",function(){return Et}),e.d(t,\"geoHammerRaw\",function(){return Mt}),e.d(t,\"geoHammerRetroazimuthal\",function(){return St}),e.d(t,\"geoHammerRetroazimuthalRaw\",function(){return Pt}),e.d(t,\"geoHealpix\",function(){return Ct}),e.d(t,\"geoHealpixRaw\",function(){return xt}),e.d(t,\"geoHill\",function(){return Gt}),e.d(t,\"geoHillRaw\",function(){return zt}),e.d(t,\"geoHomolosine\",function(){return Dt}),e.d(t,\"geoHomolosineRaw\",function(){return Tt}),e.d(t,\"geoInterrupt\",function(){return Ut}),e.d(t,\"geoInterruptedBoggs\",function(){return Wt}),e.d(t,\"geoInterruptedHomolosine\",function(){return Yt}),e.d(t,\"geoInterruptedMollweide\",function(){return Qt}),e.d(t,\"geoInterruptedMollweideHemispheres\",function(){return Jt}),e.d(t,\"geoInterruptedSinuMollweide\",function(){return Zt}),e.d(t,\"geoInterruptedSinusoidal\",function(){return ne}),e.d(t,\"geoKavrayskiy7\",function(){return ee}),e.d(t,\"geoKavrayskiy7Raw\",function(){return te}),e.d(t,\"geoLagrange\",function(){return oe}),e.d(t,\"geoLagrangeRaw\",function(){return re}),e.d(t,\"geoLarrivee\",function(){return ae}),e.d(t,\"geoLarriveeRaw\",function(){return ue}),e.d(t,\"geoLaskowski\",function(){return fe}),e.d(t,\"geoLaskowskiRaw\",function(){return ce}),e.d(t,\"geoLittrow\",function(){return se}),e.d(t,\"geoLittrowRaw\",function(){return le}),e.d(t,\"geoLoximuthal\",function(){return he}),e.d(t,\"geoLoximuthalRaw\",function(){return pe}),e.d(t,\"geoMiller\",function(){return ve}),e.d(t,\"geoMillerRaw\",function(){return de}),e.d(t,\"geoModifiedStereographic\",function(){return ke}),e.d(t,\"geoModifiedStereographicRaw\",function(){return ge}),e.d(t,\"geoModifiedStereographicAlaska\",function(){return we}),e.d(t,\"geoModifiedStereographicGs48\",function(){return Ee}),e.d(t,\"geoModifiedStereographicGs50\",function(){return Pe}),e.d(t,\"geoModifiedStereographicMiller\",function(){return Oe}),e.d(t,\"geoModifiedStereographicLee\",function(){return Se}),e.d(t,\"geoMollweide\",function(){return K}),e.d(t,\"geoMollweideRaw\",function(){return J}),e.d(t,\"geoMtFlatPolarParabolic\",function(){return Ce}),e.d(t,\"geoMtFlatPolarParabolicRaw\",function(){return xe}),e.d(t,\"geoMtFlatPolarQuartic\",function(){return Ge}),e.d(t,\"geoMtFlatPolarQuarticRaw\",function(){return ze}),e.d(t,\"geoMtFlatPolarSinusoidal\",function(){return Ne}),e.d(t,\"geoMtFlatPolarSinusoidalRaw\",function(){return Ae}),e.d(t,\"geoNaturalEarth\",function(){return Le}),e.d(t,\"geoNaturalEarthRaw\",function(){return Fe}),e.d(t,\"geoNellHammer\",function(){return De}),e.d(t,\"geoNellHammerRaw\",function(){return Te}),e.d(t,\"geoPatterson\",function(){return Ve}),e.d(t,\"geoPattersonRaw\",function(){return Qe}),e.d(t,\"geoPolyconic\",function(){return Ke}),e.d(t,\"geoPolyconicRaw\",function(){return Je}),e.d(t,\"geoPolyhedral\",function(){return er}),e.d(t,\"geoPolyhedralButterfly\",function(){return ar}),e.d(t,\"geoPolyhedralCollignon\",function(){return lr}),e.d(t,\"geoPolyhedralWaterman\",function(){return sr}),e.d(t,\"geoProject\",function(){return gr}),e.d(t,\"geoGringortenQuincuncial\",function(){return Sr}),e.d(t,\"geoPeirceQuincuncial\",function(){return kr}),e.d(t,\"geoPierceQuincuncial\",function(){return kr}),e.d(t,\"geoQuantize\",function(){return _r}),e.d(t,\"geoQuincuncial\",function(){return Or}),e.d(t,\"geoRectangularPolyconic\",function(){return xr}),e.d(t,\"geoRectangularPolyconicRaw\",function(){return Rr}),e.d(t,\"geoRobinson\",function(){return Gr}),e.d(t,\"geoRobinsonRaw\",function(){return zr}),e.d(t,\"geoSatellite\",function(){return Nr}),e.d(t,\"geoSatelliteRaw\",function(){return Ar}),e.d(t,\"geoSinuMollweide\",function(){return Lt}),e.d(t,\"geoSinuMollweideRaw\",function(){return Ft}),e.d(t,\"geoSinusoidal\",function(){return on}),e.d(t,\"geoSinusoidalRaw\",function(){return rn}),e.d(t,\"geoStitch\",function(){return Kr}),e.d(t,\"geoTimes\",function(){return $r}),e.d(t,\"geoTimesRaw\",function(){return Zr}),e.d(t,\"geoTwoPointAzimuthal\",function(){return ro}),e.d(t,\"geoTwoPointAzimuthalRaw\",function(){return to}),e.d(t,\"geoTwoPointAzimuthalUsa\",function(){return eo}),e.d(t,\"geoTwoPointEquidistant\",function(){return uo}),e.d(t,\"geoTwoPointEquidistantRaw\",function(){return oo}),e.d(t,\"geoTwoPointEquidistantUsa\",function(){return io}),e.d(t,\"geoVanDerGrinten\",function(){return co}),e.d(t,\"geoVanDerGrintenRaw\",function(){return ao}),e.d(t,\"geoVanDerGrinten2\",function(){return lo}),e.d(t,\"geoVanDerGrinten2Raw\",function(){return fo}),e.d(t,\"geoVanDerGrinten3\",function(){return po}),e.d(t,\"geoVanDerGrinten3Raw\",function(){return so}),e.d(t,\"geoVanDerGrinten4\",function(){return vo}),e.d(t,\"geoVanDerGrinten4Raw\",function(){return ho}),e.d(t,\"geoWagner4\",function(){return mo}),e.d(t,\"geoWagner4Raw\",function(){return bo}),e.d(t,\"geoWagner6\",function(){return Mo}),e.d(t,\"geoWagner6Raw\",function(){return jo}),e.d(t,\"geoWagner7\",function(){return Eo}),e.d(t,\"geoWagner7Raw\",function(){return wo}),e.d(t,\"geoWiechel\",function(){return Oo}),e.d(t,\"geoWiechelRaw\",function(){return Po}),e.d(t,\"geoWinkel3\",function(){return ko}),e.d(t,\"geoWinkel3Raw\",function(){return So})},715:function(n,t,e){\"use strict\";e.r(t);var r=function(n){return n},o=function(n){if(null==(t=n.transform))return r;var t,e,o,i=t.scale[0],u=t.scale[1],a=t.translate[0],c=t.translate[1];return function(n,t){return t||(e=o=0),n[0]=(e+=n[0])*i+a,n[1]=(o+=n[1])*u+c,n}},i=function(n){var t=n.bbox;function e(n){c[0]=n[0],c[1]=n[1],a(c),c[0]<f&&(f=c[0]),c[0]>s&&(s=c[0]),c[1]<l&&(l=c[1]),c[1]>p&&(p=c[1])}function r(n){switch(n.type){case\"GeometryCollection\":n.geometries.forEach(r);break;case\"Point\":e(n.coordinates);break;case\"MultiPoint\":n.coordinates.forEach(e)}}if(!t){var i,u,a=o(n),c=new Array(2),f=1/0,l=f,s=-f,p=-f;for(u in n.arcs.forEach(function(n){for(var t=-1,e=n.length;++t<e;)i=n[t],c[0]=i[0],c[1]=i[1],a(c,t),c[0]<f&&(f=c[0]),c[0]>s&&(s=c[0]),c[1]<l&&(l=c[1]),c[1]>p&&(p=c[1])}),n.objects)r(n.objects[u]);t=n.bbox=[f,l,s,p]}return t},u=function(n,t){for(var e,r=n.length,o=r-t;o<--r;)e=n[o],n[o++]=n[r],n[r]=e},a=function(n,t){return\"GeometryCollection\"===t.type?{type:\"FeatureCollection\",features:t.geometries.map(function(t){return c(n,t)})}:c(n,t)};function c(n,t){var e=t.id,r=t.bbox,o=null==t.properties?{}:t.properties,i=f(n,t);return null==e&&null==r?{type:\"Feature\",properties:o,geometry:i}:null==r?{type:\"Feature\",id:e,properties:o,geometry:i}:{type:\"Feature\",id:e,bbox:r,properties:o,geometry:i}}function f(n,t){var e=o(n),r=n.arcs;function i(n,t){t.length&&t.pop();for(var o=r[n<0?~n:n],i=0,a=o.length;i<a;++i)t.push(e(o[i].slice(),i));n<0&&u(t,a)}function a(n){return e(n.slice())}function c(n){for(var t=[],e=0,r=n.length;e<r;++e)i(n[e],t);return t.length<2&&t.push(t[0].slice()),t}function f(n){for(var t=c(n);t.length<4;)t.push(t[0].slice());return t}function l(n){return n.map(f)}return function n(t){var e,r=t.type;switch(r){case\"GeometryCollection\":return{type:r,geometries:t.geometries.map(n)};case\"Point\":e=a(t.coordinates);break;case\"MultiPoint\":e=t.coordinates.map(a);break;case\"LineString\":e=c(t.arcs);break;case\"MultiLineString\":e=t.arcs.map(c);break;case\"Polygon\":e=l(t.arcs);break;case\"MultiPolygon\":e=t.arcs.map(l);break;default:return null}return{type:r,coordinates:e}}(t)}var l=function(n,t){var e={},r={},o={},i=[],u=-1;function a(n,t){for(var r in n){var o=n[r];delete t[o.start],delete o.start,delete o.end,o.forEach(function(n){e[n<0?~n:n]=1}),i.push(o)}}return t.forEach(function(e,r){var o,i=n.arcs[e<0?~e:e];i.length<3&&!i[1][0]&&!i[1][1]&&(o=t[++u],t[u]=e,t[r]=o)}),t.forEach(function(t){var e,i,u=function(t){var e,r=n.arcs[t<0?~t:t],o=r[0];n.transform?(e=[0,0],r.forEach(function(n){e[0]+=n[0],e[1]+=n[1]})):e=r[r.length-1];return t<0?[e,o]:[o,e]}(t),a=u[0],c=u[1];if(e=o[a])if(delete o[e.end],e.push(t),e.end=c,i=r[c]){delete r[i.start];var f=i===e?e:e.concat(i);r[f.start=e.start]=o[f.end=i.end]=f}else r[e.start]=o[e.end]=e;else if(e=r[c])if(delete r[e.start],e.unshift(t),e.start=a,i=o[a]){delete o[i.end];var l=i===e?e:i.concat(e);r[l.start=i.start]=o[l.end=e.end]=l}else r[e.start]=o[e.end]=e;else r[(e=[t]).start=a]=o[e.end=c]=e}),a(o,r),a(r,o),t.forEach(function(n){e[n<0?~n:n]||i.push([n])}),i},s=function(n){return f(n,p.apply(this,arguments))};function p(n,t,e){var r,o,i;if(arguments.length>1)r=function(n,t,e){var r,o=[],i=[];function u(n){var t=n<0?~n:n;(i[t]||(i[t]=[])).push({i:n,g:r})}function a(n){n.forEach(u)}function c(n){n.forEach(a)}return function n(t){switch(r=t,t.type){case\"GeometryCollection\":t.geometries.forEach(n);break;case\"LineString\":a(t.arcs);break;case\"MultiLineString\":case\"Polygon\":c(t.arcs);break;case\"MultiPolygon\":!function(n){n.forEach(c)}(t.arcs)}}(t),i.forEach(null==e?function(n){o.push(n[0].i)}:function(n){e(n[0].g,n[n.length-1].g)&&o.push(n[0].i)}),o}(0,t,e);else for(o=0,r=new Array(i=n.arcs.length);o<i;++o)r[o]=o;return{type:\"MultiLineString\",arcs:l(n,r)}}var h=function(n){return f(n,d.apply(this,arguments))};function d(n,t){var e={},r=[],o=[];function i(n){n.forEach(function(t){t.forEach(function(t){(e[t=t<0?~t:t]||(e[t]=[])).push(n)})}),r.push(n)}function u(t){return function(n){for(var t,e=-1,r=n.length,o=n[r-1],i=0;++e<r;)t=o,o=n[e],i+=t[0]*o[1]-t[1]*o[0];return Math.abs(i)}(f(n,{type:\"Polygon\",arcs:[t]}).coordinates[0])}return t.forEach(function n(t){switch(t.type){case\"GeometryCollection\":t.geometries.forEach(n);break;case\"Polygon\":i(t.arcs);break;case\"MultiPolygon\":t.arcs.forEach(i)}}),r.forEach(function(n){if(!n._){var t=[],r=[n];for(n._=1,o.push(t);n=r.pop();)t.push(n),n.forEach(function(n){n.forEach(function(n){e[n<0?~n:n].forEach(function(n){n._||(n._=1,r.push(n))})})})}}),r.forEach(function(n){delete n._}),{type:\"MultiPolygon\",arcs:o.map(function(t){var r,o=[];if(t.forEach(function(n){n.forEach(function(n){n.forEach(function(n){e[n<0?~n:n].length<2&&o.push(n)})})}),(r=(o=l(n,o)).length)>1)for(var i,a,c=1,f=u(o[0]);c<r;++c)(i=u(o[c]))>f&&(a=o[0],o[0]=o[c],o[c]=a,f=i);return o})}}var v=function(n,t){for(var e=0,r=n.length;e<r;){var o=e+r>>>1;n[o]<t?e=o+1:r=o}return e},g=function(n){var t={},e=n.map(function(){return[]});function r(n,e){n.forEach(function(n){n<0&&(n=~n);var r=t[n];r?r.push(e):t[n]=[e]})}function o(n,t){n.forEach(function(n){r(n,t)})}var i={LineString:r,MultiLineString:o,Polygon:o,MultiPolygon:function(n,t){n.forEach(function(n){o(n,t)})}};for(var u in n.forEach(function n(t,e){\"GeometryCollection\"===t.type?t.geometries.forEach(function(t){n(t,e)}):t.type in i&&i[t.type](t.arcs,e)}),t)for(var a=t[u],c=a.length,f=0;f<c;++f)for(var l=f+1;l<c;++l){var s,p=a[f],h=a[l];(s=e[p])[u=v(s,h)]!==h&&s.splice(u,0,h),(s=e[h])[u=v(s,p)]!==p&&s.splice(u,0,p)}return e},y=function(n,t){if(!((t=Math.floor(t))>=2))throw new Error(\"n must be ≥2\");if(n.transform)throw new Error(\"already quantized\");var e,r=i(n),o=r[0],u=(r[2]-o)/(t-1)||1,a=r[1],c=(r[3]-a)/(t-1)||1;function f(n){n[0]=Math.round((n[0]-o)/u),n[1]=Math.round((n[1]-a)/c)}function l(n){switch(n.type){case\"GeometryCollection\":n.geometries.forEach(l);break;case\"Point\":f(n.coordinates);break;case\"MultiPoint\":n.coordinates.forEach(f)}}for(e in n.arcs.forEach(function(n){for(var t,e,r,i=1,f=1,l=n.length,s=n[0],p=s[0]=Math.round((s[0]-o)/u),h=s[1]=Math.round((s[1]-a)/c);i<l;++i)s=n[i],e=Math.round((s[0]-o)/u),r=Math.round((s[1]-a)/c),e===p&&r===h||((t=n[f++])[0]=e-p,p=e,t[1]=r-h,h=r);f<2&&((t=n[f++])[0]=0,t[1]=0),n.length=f}),n.objects)l(n.objects[e]);return n.transform={scale:[u,c],translate:[o,a]},n},b=function(n){if(null==(t=n.transform))return r;var t,e,o,i=t.scale[0],u=t.scale[1],a=t.translate[0],c=t.translate[1];return function(n,t){t||(e=o=0);var r=Math.round((n[0]-a)/i),f=Math.round((n[1]-c)/u);return n[0]=r-e,e=r,n[1]=f-o,o=f,n}};e.d(t,\"bbox\",function(){return i}),e.d(t,\"feature\",function(){return a}),e.d(t,\"mesh\",function(){return s}),e.d(t,\"meshArcs\",function(){return p}),e.d(t,\"merge\",function(){return h}),e.d(t,\"mergeArcs\",function(){return d}),e.d(t,\"neighbors\",function(){return g}),e.d(t,\"quantize\",function(){return y}),e.d(t,\"transform\",function(){return o}),e.d(t,\"untransform\",function(){return b})}}]);","extractedComments":[]}